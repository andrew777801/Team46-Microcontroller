

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 11 13:27:47 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4620 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	mediumconst
    79  00FEB4                     __pmediumconst:
    80                           	opt stack 0
    81  00FEB4  00                 	db	0
    82  00FEB5                     _dpowers:
    83                           	opt stack 0
    84  00FEB5  0001               	dw	1
    85  00FEB7  000A               	dw	10
    86  00FEB9  0064               	dw	100
    87  00FEBB  03E8               	dw	1000
    88  00FEBD  2710               	dw	10000
    89  00FEBF                     __end_of_dpowers:
    90                           	opt stack 0
    91  00FEBF                     _hexpowers:
    92                           	opt stack 0
    93  00FEBF  0001               	dw	1
    94  00FEC1  0010               	dw	16
    95  00FEC3  0100               	dw	256
    96  00FEC5  1000               	dw	4096
    97  00FEC7                     __end_of_hexpowers:
    98                           	opt stack 0
    99  0000                     _SSPBUF	set	4041
   100  0000                     _SSPADD	set	4040
   101  0000                     _SSPCON2	set	4037
   102  0000                     _SSPCON1	set	4038
   103  0000                     _SSPSTAT	set	4039
   104  0000                     _LATD	set	3980
   105  0000                     _LATDbits	set	3980
   106  0000                     _INTCONbits	set	4082
   107  0000                     _PORTB	set	3969
   108  0000                     _ADCON1	set	4033
   109  0000                     _ADCON0	set	4034
   110  0000                     _LATB	set	3978
   111  0000                     _TRISE	set	3990
   112  0000                     _TRISD	set	3989
   113  0000                     _TRISC	set	3988
   114  0000                     _TRISB	set	3987
   115  0000                     _TRISA	set	3986
   116  0000                     _OSCCON	set	4051
   117  0000                     _LATE	set	3981
   118  0000                     _PORTBbits	set	3969
   119  0000                     _LATAbits	set	3977
   120  0000                     _LATEbits	set	3981
   121  0000                     _LATA	set	3977
   122  0000                     _ACKEN	set	32300
   123  0000                     _ACKDT	set	32301
   124  0000                     _RCEN	set	32299
   125  0000                     _PEN	set	32298
   126  0000                     _RSEN	set	32297
   127  0000                     _SEN	set	32296
   128  0000                     _TRISC4	set	31908
   129  0000                     _TRISC3	set	31907
   130  00FEC7                     STR_20:
   131  00FEC7  25                 	db	37
   132  00FEC8  30                 	db	48	;'0'
   133  00FEC9  32                 	db	50	;'2'
   134  00FECA  78                 	db	120	;'x'
   135  00FECB  20                 	db	32
   136  00FECC  6D                 	db	109	;'m'
   137  00FECD  69                 	db	105	;'i'
   138  00FECE  6E                 	db	110	;'n'
   139  00FECF  2E                 	db	46
   140  00FED0  20                 	db	32
   141  00FED1  25                 	db	37
   142  00FED2  30                 	db	48	;'0'
   143  00FED3  32                 	db	50	;'2'
   144  00FED4  78                 	db	120	;'x'
   145  00FED5  20                 	db	32
   146  00FED6  73                 	db	115	;'s'
   147  00FED7  65                 	db	101	;'e'
   148  00FED8  63                 	db	99	;'c'
   149  00FED9  2E                 	db	46
   150  00FEDA  00                 	db	0
   151  00FEDB                     STR_19:
   152  00FEDB  54                 	db	84	;'T'
   153  00FEDC  6F                 	db	111	;'o'
   154  00FEDD  74                 	db	116	;'t'
   155  00FEDE  61                 	db	97	;'a'
   156  00FEDF  6C                 	db	108	;'l'
   157  00FEE0  20                 	db	32
   158  00FEE1  74                 	db	116	;'t'
   159  00FEE2  69                 	db	105	;'i'
   160  00FEE3  6D                 	db	109	;'m'
   161  00FEE4  65                 	db	101	;'e'
   162  00FEE5  20                 	db	32
   163  00FEE6  74                 	db	116	;'t'
   164  00FEE7  61                 	db	97	;'a'
   165  00FEE8  6B                 	db	107	;'k'
   166  00FEE9  65                 	db	101	;'e'
   167  00FEEA  6E                 	db	110	;'n'
   168  00FEEB  3A                 	db	58	;':'
   169  00FEEC  20                 	db	32
   170  00FEED  00                 	db	0
   171  00FEEE                     STR_17:
   172  00FEEE  54                 	db	84	;'T'
   173  00FEEF  6F                 	db	111	;'o'
   174  00FEF0  74                 	db	116	;'t'
   175  00FEF1  61                 	db	97	;'a'
   176  00FEF2  6C                 	db	108	;'l'
   177  00FEF3  20                 	db	32
   178  00FEF4  6E                 	db	110	;'n'
   179  00FEF5  75                 	db	117	;'u'
   180  00FEF6  6D                 	db	109	;'m'
   181  00FEF7  62                 	db	98	;'b'
   182  00FEF8  65                 	db	101	;'e'
   183  00FEF9  72                 	db	114	;'r'
   184  00FEFA  20                 	db	32
   185  00FEFB  6F                 	db	111	;'o'
   186  00FEFC  66                 	db	102	;'f'
   187  00FEFD  20                 	db	32
   188  00FEFE  20                 	db	32
   189  00FEFF  00                 	db	0
   190  00FF00                     STR_21:
   191  00FF00  30                 	db	48	;'0'
   192  00FF01  31                 	db	49	;'1'
   193  00FF02  32                 	db	50	;'2'
   194  00FF03  33                 	db	51	;'3'
   195  00FF04  34                 	db	52	;'4'
   196  00FF05  35                 	db	53	;'5'
   197  00FF06  36                 	db	54	;'6'
   198  00FF07  37                 	db	55	;'7'
   199  00FF08  38                 	db	56	;'8'
   200  00FF09  39                 	db	57	;'9'
   201  00FF0A  61                 	db	97	;'a'
   202  00FF0B  62                 	db	98	;'b'
   203  00FF0C  63                 	db	99	;'c'
   204  00FF0D  64                 	db	100	;'d'
   205  00FF0E  65                 	db	101	;'e'
   206  00FF0F  66                 	db	102	;'f'
   207  00FF10  00                 	db	0
   208  00FF11                     STR_4:
   209  00FF11  50                 	db	80	;'P'
   210  00FF12  72                 	db	114	;'r'
   211  00FF13  65                 	db	101	;'e'
   212  00FF14  73                 	db	115	;'s'
   213  00FF15  73                 	db	115	;'s'
   214  00FF16  20                 	db	32
   215  00FF17  42                 	db	66	;'B'
   216  00FF18  20                 	db	32
   217  00FF19  74                 	db	116	;'t'
   218  00FF1A  6F                 	db	111	;'o'
   219  00FF1B  20                 	db	32
   220  00FF1C  73                 	db	115	;'s'
   221  00FF1D  74                 	db	116	;'t'
   222  00FF1E  6F                 	db	111	;'o'
   223  00FF1F  70                 	db	112	;'p'
   224  00FF20  2E                 	db	46
   225  00FF21  00                 	db	0
   226  00FF22                     STR_7:
   227  00FF22  50                 	db	80	;'P'
   228  00FF23  75                 	db	117	;'u'
   229  00FF24  73                 	db	115	;'s'
   230  00FF25  68                 	db	104	;'h'
   231  00FF26  20                 	db	32
   232  00FF27  32                 	db	50	;'2'
   233  00FF28  2C                 	db	44
   234  00FF29  33                 	db	51	;'3'
   235  00FF2A  2C                 	db	44
   236  00FF2B  35                 	db	53	;'5'
   237  00FF2C  2C                 	db	44
   238  00FF2D  36                 	db	54	;'6'
   239  00FF2E  2C                 	db	44
   240  00FF2F  38                 	db	56	;'8'
   241  00FF30  2C                 	db	44
   242  00FF31  39                 	db	57	;'9'
   243  00FF32  00                 	db	0
   244  00FF33                     STR_15:
   245  00FF33  45                 	db	69	;'E'
   246  00FF34  53                 	db	83	;'S'
   247  00FF35  4B                 	db	75	;'K'
   248  00FF36  41                 	db	65	;'A'
   249  00FF37  20                 	db	32
   250  00FF38  77                 	db	119	;'w'
   251  00FF39  69                 	db	105	;'i'
   252  00FF3A  74                 	db	116	;'t'
   253  00FF3B  68                 	db	104	;'h'
   254  00FF3C  6F                 	db	111	;'o'
   255  00FF3D  75                 	db	117	;'u'
   256  00FF3E  74                 	db	116	;'t'
   257  00FF3F  20                 	db	32
   258  00FF40  63                 	db	99	;'c'
   259  00FF41  61                 	db	97	;'a'
   260  00FF42  70                 	db	112	;'p'
   261  00FF43  00                 	db	0
   262  00FF44                     STR_11:
   263  00FF44  59                 	db	89	;'Y'
   264  00FF45  4F                 	db	79	;'O'
   265  00FF46  50                 	db	80	;'P'
   266  00FF47  20                 	db	32
   267  00FF48  77                 	db	119	;'w'
   268  00FF49  69                 	db	105	;'i'
   269  00FF4A  74                 	db	116	;'t'
   270  00FF4B  68                 	db	104	;'h'
   271  00FF4C  6F                 	db	111	;'o'
   272  00FF4D  75                 	db	117	;'u'
   273  00FF4E  74                 	db	116	;'t'
   274  00FF4F  20                 	db	32
   275  00FF50  63                 	db	99	;'c'
   276  00FF51  61                 	db	97	;'a'
   277  00FF52  70                 	db	112	;'p'
   278  00FF53  00                 	db	0
   279  00FF54                     STR_1:
   280  00FF54  28                 	db	40
   281  00FF55  53                 	db	83	;'S'
   282  00FF56  74                 	db	116	;'t'
   283  00FF57  61                 	db	97	;'a'
   284  00FF58  72                 	db	114	;'r'
   285  00FF59  74                 	db	116	;'t'
   286  00FF5A  75                 	db	117	;'u'
   287  00FF5B  70                 	db	112	;'p'
   288  00FF5C  29                 	db	41
   289  00FF5D  20                 	db	32
   290  00FF5E  50                 	db	80	;'P'
   291  00FF5F  72                 	db	114	;'r'
   292  00FF60  65                 	db	101	;'e'
   293  00FF61  73                 	db	115	;'s'
   294  00FF62  73                 	db	115	;'s'
   295  00FF63  00                 	db	0
   296  00FF64                     STR_10:
   297  00FF64  28                 	db	40
   298  00FF65  62                 	db	98	;'b'
   299  00FF66  69                 	db	105	;'i'
   300  00FF67  6E                 	db	110	;'n'
   301  00FF68  20                 	db	32
   302  00FF69  23                 	db	35
   303  00FF6A  31                 	db	49	;'1'
   304  00FF6B  29                 	db	41
   305  00FF6C  3A                 	db	58	;':'
   306  00FF6D  20                 	db	32
   307  00FF6E  25                 	db	37
   308  00FF6F  30                 	db	48	;'0'
   309  00FF70  32                 	db	50	;'2'
   310  00FF71  78                 	db	120	;'x'
   311  00FF72  00                 	db	0
   312  00FF73                     STR_5:
   313  00FF73  43                 	db	67	;'C'
   314  00FF74  31                 	db	49	;'1'
   315  00FF75  3A                 	db	58	;':'
   316  00FF76  25                 	db	37
   317  00FF77  30                 	db	48	;'0'
   318  00FF78  32                 	db	50	;'2'
   319  00FF79  78                 	db	120	;'x'
   320  00FF7A  20                 	db	32
   321  00FF7B  25                 	db	37
   322  00FF7C  30                 	db	48	;'0'
   323  00FF7D  32                 	db	50	;'2'
   324  00FF7E  78                 	db	120	;'x'
   325  00FF7F  20                 	db	32
   326  00FF80  00                 	db	0
   327  00FF81                     STR_6:
   328  00FF81  43                 	db	67	;'C'
   329  00FF82  33                 	db	51	;'3'
   330  00FF83  3A                 	db	58	;':'
   331  00FF84  25                 	db	37
   332  00FF85  30                 	db	48	;'0'
   333  00FF86  32                 	db	50	;'2'
   334  00FF87  78                 	db	120	;'x'
   335  00FF88  20                 	db	32
   336  00FF89  25                 	db	37
   337  00FF8A  30                 	db	48	;'0'
   338  00FF8B  32                 	db	50	;'2'
   339  00FF8C  78                 	db	120	;'x'
   340  00FF8D  20                 	db	32
   341  00FF8E  00                 	db	0
   342  00FF8F                     STR_13:
   343  00FF8F  45                 	db	69	;'E'
   344  00FF90  53                 	db	83	;'S'
   345  00FF91  4B                 	db	75	;'K'
   346  00FF92  41                 	db	65	;'A'
   347  00FF93  20                 	db	32
   348  00FF94  77                 	db	119	;'w'
   349  00FF95  69                 	db	105	;'i'
   350  00FF96  74                 	db	116	;'t'
   351  00FF97  68                 	db	104	;'h'
   352  00FF98  20                 	db	32
   353  00FF99  63                 	db	99	;'c'
   354  00FF9A  61                 	db	97	;'a'
   355  00FF9B  70                 	db	112	;'p'
   356  00FF9C  00                 	db	0
   357  00FF9D                     STR_12:
   358  00FF9D  28                 	db	40
   359  00FF9E  62                 	db	98	;'b'
   360  00FF9F  69                 	db	105	;'i'
   361  00FFA0  6E                 	db	110	;'n'
   362  00FFA1  20                 	db	32
   363  00FFA2  23                 	db	35
   364  00FFA3  32                 	db	50	;'2'
   365  00FFA4  29                 	db	41
   366  00FFA5  3A                 	db	58	;':'
   367  00FFA6  20                 	db	32
   368  00FFA7  25                 	db	37
   369  00FFA8  64                 	db	100	;'d'
   370  00FFA9  00                 	db	0
   371  00FFAA                     STR_14:
   372  00FFAA  28                 	db	40
   373  00FFAB  62                 	db	98	;'b'
   374  00FFAC  69                 	db	105	;'i'
   375  00FFAD  6E                 	db	110	;'n'
   376  00FFAE  20                 	db	32
   377  00FFAF  23                 	db	35
   378  00FFB0  33                 	db	51	;'3'
   379  00FFB1  29                 	db	41
   380  00FFB2  3A                 	db	58	;':'
   381  00FFB3  20                 	db	32
   382  00FFB4  25                 	db	37
   383  00FFB5  64                 	db	100	;'d'
   384  00FFB6  00                 	db	0
   385  00FFB7                     STR_16:
   386  00FFB7  28                 	db	40
   387  00FFB8  62                 	db	98	;'b'
   388  00FFB9  69                 	db	105	;'i'
   389  00FFBA  6E                 	db	110	;'n'
   390  00FFBB  20                 	db	32
   391  00FFBC  23                 	db	35
   392  00FFBD  34                 	db	52	;'4'
   393  00FFBE  29                 	db	41
   394  00FFBF  3A                 	db	58	;':'
   395  00FFC0  20                 	db	32
   396  00FFC1  25                 	db	37
   397  00FFC2  64                 	db	100	;'d'
   398  00FFC3  00                 	db	0
   399  00FFC4                     STR_9:
   400  00FFC4  59                 	db	89	;'Y'
   401  00FFC5  4F                 	db	79	;'O'
   402  00FFC6  50                 	db	80	;'P'
   403  00FFC7  20                 	db	32
   404  00FFC8  77                 	db	119	;'w'
   405  00FFC9  69                 	db	105	;'i'
   406  00FFCA  74                 	db	116	;'t'
   407  00FFCB  68                 	db	104	;'h'
   408  00FFCC  20                 	db	32
   409  00FFCD  63                 	db	99	;'c'
   410  00FFCE  61                 	db	97	;'a'
   411  00FFCF  70                 	db	112	;'p'
   412  00FFD0  00                 	db	0
   413  00FFD1                     STR_2:
   414  00FFD1  41                 	db	65	;'A'
   415  00FFD2  20                 	db	32
   416  00FFD3  74                 	db	116	;'t'
   417  00FFD4  6F                 	db	111	;'o'
   418  00FFD5  20                 	db	32
   419  00FFD6  62                 	db	98	;'b'
   420  00FFD7  65                 	db	101	;'e'
   421  00FFD8  67                 	db	103	;'g'
   422  00FFD9  69                 	db	105	;'i'
   423  00FFDA  6E                 	db	110	;'n'
   424  00FFDB  2E                 	db	46
   425  00FFDC  00                 	db	0
   426  00FFDD                     STR_18:
   427  00FFDD  62                 	db	98	;'b'
   428  00FFDE  6F                 	db	111	;'o'
   429  00FFDF  74                 	db	116	;'t'
   430  00FFE0  74                 	db	116	;'t'
   431  00FFE1  6C                 	db	108	;'l'
   432  00FFE2  65                 	db	101	;'e'
   433  00FFE3  73                 	db	115	;'s'
   434  00FFE4  3A                 	db	58	;':'
   435  00FFE5  20                 	db	32
   436  00FFE6  25                 	db	37
   437  00FFE7  64                 	db	100	;'d'
   438  00FFE8  00                 	db	0
   439  00FFE9                     STR_8:
   440  00FFE9  74                 	db	116	;'t'
   441  00FFEA  6F                 	db	111	;'o'
   442  00FFEB  20                 	db	32
   443  00FFEC  76                 	db	118	;'v'
   444  00FFED  69                 	db	105	;'i'
   445  00FFEE  65                 	db	101	;'e'
   446  00FFEF  77                 	db	119	;'w'
   447  00FFF0  20                 	db	32
   448  00FFF1  6C                 	db	108	;'l'
   449  00FFF2  6F                 	db	111	;'o'
   450  00FFF3  67                 	db	103	;'g'
   451  00FFF4  00                 	db	0
   452  00FFF5                     STR_3:
   453  00FFF5  53                 	db	83	;'S'
   454  00FFF6  6F                 	db	111	;'o'
   455  00FFF7  72                 	db	114	;'r'
   456  00FFF8  74                 	db	116	;'t'
   457  00FFF9  69                 	db	105	;'i'
   458  00FFFA  6E                 	db	110	;'n'
   459  00FFFB  67                 	db	103	;'g'
   460  00FFFC  2E                 	db	46
   461  00FFFD  00                 	db	0
   462                           
   463                           ; #config settings
   464  00FFFE  00                 	db	0	; dummy byte at the end
   465  0000                     
   466                           	psect	cinit
   467  00EC48                     __pcinit:
   468                           	opt stack 0
   469  00EC48                     start_initialization:
   470                           	opt stack 0
   471  00EC48                     __initialization:
   472                           	opt stack 0
   473                           
   474                           ; Clear objects allocated to COMRAM (8 bytes)
   475  00EC48  EE00  F06B         	lfsr	0,__pbssCOMRAM
   476  00EC4C  0E08               	movlw	8
   477  00EC4E                     clear_0:
   478  00EC4E  6AEE               	clrf	postinc0,c
   479  00EC50  06E8               	decf	wreg,f,c
   480  00EC52  E1FD               	bnz	clear_0
   481  00EC54                     end_of_initialization:
   482                           	opt stack 0
   483  00EC54                     __end_of__initialization:
   484                           	opt stack 0
   485  00EC54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   486  00EC56  6EF8               	movwf	tblptru,c
   487  00EC58  0100               	movlb	0
   488  00EC5A  EF47  F07B         	goto	_main	;jump to C main() function
   489                           tblptru	equ	0xFF8
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           
   493                           	psect	bssCOMRAM
   494  00006B                     __pbssCOMRAM:
   495                           	opt stack 0
   496  00006B                     main@F3227:
   497                           	opt stack 0
   498  00006B                     	ds	8
   499                           tblptru	equ	0xFF8
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           
   503                           	psect	cstackCOMRAM
   504  000001                     __pcstackCOMRAM:
   505                           	opt stack 0
   506  000001                     ??_isdigit:
   507  000001                     ??_activate_stepper:
   508  000001                     ??_return_motors:
   509  000001                     ??_I2C_Master_Wait:
   510  000001                     ?___wmul:
   511                           	opt stack 0
   512  000001                     ?___lwdiv:
   513                           	opt stack 0
   514  000001                     ?___ftpack:
   515                           	opt stack 0
   516  000001                     ?___lldiv:
   517                           	opt stack 0
   518  000001                     agitator_move@b:
   519                           	opt stack 0
   520  000001                     lcdNibble@temp:
   521                           	opt stack 0
   522  000001                     ___wmul@multiplier:
   523                           	opt stack 0
   524  000001                     ___lwdiv@dividend:
   525                           	opt stack 0
   526  000001                     ___ftpack@arg:
   527                           	opt stack 0
   528  000001                     ___lldiv@dividend:
   529                           	opt stack 0
   530                           
   531                           ; 4 bytes @ 0x0
   532  000001                     	ds	1
   533  000002                     agitator_move@a:
   534                           	opt stack 0
   535  000002                     lcdNibble@data:
   536                           	opt stack 0
   537  000002                     I2C_Master_Read@a:
   538                           	opt stack 0
   539  000002                     _isdigit$716:
   540                           	opt stack 0
   541  000002                     I2C_Master_Write@d:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x1
   545  000002                     	ds	1
   546  000003                     activate_stepper@motor:
   547                           	opt stack 0
   548  000003                     return_motors@motor:
   549                           	opt stack 0
   550  000003                     lcdInst@data:
   551                           	opt stack 0
   552  000003                     putch@data:
   553                           	opt stack 0
   554  000003                     I2C_Master_Read@temp:
   555                           	opt stack 0
   556  000003                     isdigit@c:
   557                           	opt stack 0
   558  000003                     ___wmul@multiplicand:
   559                           	opt stack 0
   560  000003                     ___lwdiv@divisor:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x2
   564  000003                     	ds	1
   565  000004                     ??_initLCD:
   566  000004                     ??_tca_select:
   567  000004                     set_time@i:
   568                           	opt stack 0
   569  000004                     activate_stepper@i:
   570                           	opt stack 0
   571  000004                     return_motors@i:
   572                           	opt stack 0
   573  000004                     ___ftpack@exp:
   574                           	opt stack 0
   575  000004                     read_sensor@r:
   576                           	opt stack 0
   577  000004                     timer_done@time:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x3
   581  000004                     	ds	1
   582  000005                     ___ftpack@sign:
   583                           	opt stack 0
   584  000005                     ___wmul@product:
   585                           	opt stack 0
   586  000005                     ___lwdiv@quotient:
   587                           	opt stack 0
   588  000005                     ___lldiv@divisor:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x4
   592  000005                     	ds	1
   593  000006                     ??___ftpack:
   594  000006                     read_sensor@g:
   595                           	opt stack 0
   596  000006                     check_B_press@time:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x5
   600  000006                     	ds	1
   601  000007                     tca_select@i:
   602                           	opt stack 0
   603  000007                     ___lwdiv@counter:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x6
   607  000007                     	ds	1
   608  000008                     ?___lwmod:
   609                           	opt stack 0
   610  000008                     read_sensor@b:
   611                           	opt stack 0
   612  000008                     ___lwmod@dividend:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x7
   616  000008                     	ds	1
   617  000009                     ?___lwtoft:
   618                           	opt stack 0
   619  000009                     check_B_press@key:
   620                           	opt stack 0
   621  000009                     ___lwtoft@c:
   622                           	opt stack 0
   623  000009                     ___lldiv@quotient:
   624                           	opt stack 0
   625                           
   626                           ; 4 bytes @ 0x8
   627  000009                     	ds	1
   628  00000A                     read_sensor@c:
   629                           	opt stack 0
   630  00000A                     ___lwmod@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x9
   634  00000A                     	ds	2
   635  00000C                     ___lwmod@counter:
   636                           	opt stack 0
   637  00000C                     ___ftge@ff1:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0xB
   641  00000C                     	ds	1
   642  00000D                     ?_printf:
   643                           	opt stack 0
   644  00000D                     ___lldiv@counter:
   645                           	opt stack 0
   646  00000D                     printf@f:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0xC
   650  00000D                     	ds	1
   651  00000E                     I2C_Master_Init@c:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xD
   655  00000E                     	ds	1
   656  00000F                     ___ftge@ff2:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0xE
   660  00000F                     	ds	3
   661  000012                     ??_I2C_Master_Init:
   662  000012                     ??___ftge:
   663                           
   664                           ; 1 bytes @ 0x11
   665  000012                     	ds	1
   666  000013                     ??_printf:
   667                           
   668                           ; 1 bytes @ 0x12
   669  000013                     	ds	4
   670  000017                     printf@idx:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x16
   674  000017                     	ds	1
   675  000018                     printf@ap:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x17
   679  000018                     	ds	2
   680  00001A                     printf@prec:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x19
   684  00001A                     	ds	1
   685  00001B                     printf@val:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x1A
   689  00001B                     	ds	2
   690  00001D                     printf@flag:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x1C
   694  00001D                     	ds	1
   695  00001E                     printf@width:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x1D
   699  00001E                     	ds	2
   700  000020                     printf@c:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x1F
   704  000020                     	ds	1
   705  000021                     ??_main:
   706                           
   707                           ; 1 bytes @ 0x20
   708  000021                     	ds	2
   709  000023                     main@tot3:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x22
   713  000023                     	ds	2
   714  000025                     main@G1:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x24
   718  000025                     	ds	2
   719  000027                     main@G2:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x26
   723  000027                     	ds	2
   724  000029                     main@G3:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x28
   728  000029                     	ds	2
   729  00002B                     main@c2:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x2A
   733  00002B                     	ds	2
   734  00002D                     main@rcap1:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x2C
   738  00002D                     	ds	2
   739  00002F                     main@rcap2:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x2E
   743  00002F                     	ds	2
   744  000031                     main@bcap1:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x30
   748  000031                     	ds	2
   749  000033                     main@bcap3:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x32
   753  000033                     	ds	2
   754  000035                     main@totalCount:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x34
   758  000035                     	ds	2
   759  000037                     main@keypress:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x36
   763  000037                     	ds	1
   764  000038                     main@keypress_364:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x37
   768  000038                     	ds	1
   769  000039                     main@R1:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x38
   773  000039                     	ds	2
   774  00003B                     main@B1:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x3A
   778  00003B                     	ds	2
   779  00003D                     main@C2:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x3C
   783  00003D                     	ds	2
   784  00003F                     main@R2:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x3E
   788  00003F                     	ds	2
   789  000041                     main@B2:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x40
   793  000041                     	ds	2
   794  000043                     main@R3:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x42
   798  000043                     	ds	2
   799  000045                     main@B3:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x44
   803  000045                     	ds	2
   804  000047                     main@c1:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x46
   808  000047                     	ds	2
   809  000049                     main@r2:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x48
   813  000049                     	ds	2
   814  00004B                     main@b2:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x4A
   818  00004B                     	ds	2
   819  00004D                     main@r3:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x4C
   823  00004D                     	ds	2
   824  00004F                     main@b3:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x4E
   828  00004F                     	ds	2
   829  000051                     main@c3:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x50
   833  000051                     	ds	2
   834  000053                     main@tot2:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x52
   838  000053                     	ds	2
   839  000055                     main@C1:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x54
   843  000055                     	ds	2
   844  000057                     main@C3:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x56
   848  000057                     	ds	2
   849  000059                     main@r1:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x58
   853  000059                     	ds	2
   854  00005B                     main@b1:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x5A
   858  00005B                     	ds	2
   859  00005D                     main@tot1:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x5C
   863  00005D                     	ds	2
   864  00005F                     main@finalTime:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x5E
   868  00005F                     	ds	2
   869  000061                     main@keypress_348:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x60
   873  000061                     	ds	1
   874  000062                     main@binsCount:
   875                           	opt stack 0
   876                           
   877                           ; 8 bytes @ 0x61
   878  000062                     	ds	8
   879  00006A                     main@currentMotor:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x69
   883  00006A                     	ds	1
   884                           tblptru	equ	0xFF8
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           
   888 ;;
   889 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   890 ;;
   891 ;; *************** function _main *****************
   892 ;; Defined at:
   893 ;;		line 256 in file "main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  keypress        1   55[COMRAM] unsigned char 
   898 ;;  currentMotor    1  105[COMRAM] unsigned char 
   899 ;;  keypress        1   96[COMRAM] unsigned char 
   900 ;;  keypress        1   54[COMRAM] unsigned char 
   901 ;;  binsCount       8   97[COMRAM] unsigned int [4]
   902 ;;  finalTime       2   94[COMRAM] unsigned char [2]
   903 ;;  C3              2   86[COMRAM] unsigned char [2]
   904 ;;  C1              2   84[COMRAM] unsigned char [2]
   905 ;;  B3              2   68[COMRAM] unsigned char [2]
   906 ;;  R3              2   66[COMRAM] unsigned char [2]
   907 ;;  B2              2   64[COMRAM] unsigned char [2]
   908 ;;  R2              2   62[COMRAM] unsigned char [2]
   909 ;;  C2              2   60[COMRAM] unsigned char [2]
   910 ;;  B1              2   58[COMRAM] unsigned char [2]
   911 ;;  R1              2   56[COMRAM] unsigned char [2]
   912 ;;  tot1            2   92[COMRAM] unsigned int 
   913 ;;  b1              2   90[COMRAM] unsigned int 
   914 ;;  r1              2   88[COMRAM] unsigned int 
   915 ;;  tot2            2   82[COMRAM] unsigned int 
   916 ;;  c3              2   80[COMRAM] unsigned int 
   917 ;;  b3              2   78[COMRAM] unsigned int 
   918 ;;  r3              2   76[COMRAM] unsigned int 
   919 ;;  b2              2   74[COMRAM] unsigned int 
   920 ;;  r2              2   72[COMRAM] unsigned int 
   921 ;;  c1              2   70[COMRAM] unsigned int 
   922 ;;  G3              2   40[COMRAM] unsigned char [2]
   923 ;;  G2              2   38[COMRAM] unsigned char [2]
   924 ;;  G1              2   36[COMRAM] unsigned char [2]
   925 ;;  totalCount      2   52[COMRAM] unsigned short 
   926 ;;  bcap3           2   50[COMRAM] unsigned int 
   927 ;;  bcap1           2   48[COMRAM] unsigned int 
   928 ;;  rcap2           2   46[COMRAM] unsigned int 
   929 ;;  rcap1           2   44[COMRAM] unsigned int 
   930 ;;  c2              2   42[COMRAM] unsigned int 
   931 ;;  tot3            2   34[COMRAM] unsigned int 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;      Locals:        72       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;      Totals:        74       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   945 ;;Total ram usage:       74 bytes
   946 ;; Hardware stack levels required when called:    4
   947 ;; This function calls:
   948 ;;		_I2C_Master_Init
   949 ;;		___ftge
   950 ;;		___lwdiv
   951 ;;		___lwtoft
   952 ;;		_activate_stepper
   953 ;;		_agitator_move
   954 ;;		_check_B_press
   955 ;;		_initLCD
   956 ;;		_lcdInst
   957 ;;		_poweroff_sensor
   958 ;;		_printf
   959 ;;		_read_sensor
   960 ;;		_return_motors
   961 ;;		_rotate
   962 ;;		_set_time
   963 ;;		_stop_rotate
   964 ;;		_tca_select
   965 ;; This function is called by:
   966 ;;		Startup code after reset
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text0
   971  00F68E                     __ptext0:
   972                           	opt stack 0
   973  00F68E                     _main:
   974                           	opt stack 27
   975                           
   976                           ;main.c: 259: OSCCON = 0xF0;
   977                           
   978                           ;incstack = 0
   979  00F68E  0EF0               	movlw	240
   980  00F690  6ED3               	movwf	4051,c	;volatile
   981                           
   982                           ;main.c: 262: TRISA = 0x00;
   983  00F692  0E00               	movlw	0
   984  00F694  6E92               	movwf	3986,c	;volatile
   985                           
   986                           ;main.c: 263: TRISB = 0xFF;
   987  00F696  6893               	setf	3987,c	;volatile
   988                           
   989                           ;main.c: 264: TRISC = 0xFF;
   990  00F698  6894               	setf	3988,c	;volatile
   991                           
   992                           ;main.c: 265: TRISD = 0x00;
   993  00F69A  0E00               	movlw	0
   994  00F69C  6E95               	movwf	3989,c	;volatile
   995                           
   996                           ;main.c: 266: TRISE = 0x00;
   997  00F69E  0E00               	movlw	0
   998  00F6A0  6E96               	movwf	3990,c	;volatile
   999                           
  1000                           ;main.c: 268: LATB = 0x00;
  1001  00F6A2  0E00               	movlw	0
  1002  00F6A4  6E8A               	movwf	3978,c	;volatile
  1003                           
  1004                           ;main.c: 269: LATA = 0xFF;
  1005  00F6A6  6889               	setf	3977,c	;volatile
  1006                           
  1007                           ;main.c: 270: LATE = 0xFF;
  1008  00F6A8  688D               	setf	3981,c	;volatile
  1009                           
  1010                           ;main.c: 272: ADCON0 = 0x00;
  1011  00F6AA  0E00               	movlw	0
  1012  00F6AC  6EC2               	movwf	4034,c	;volatile
  1013                           
  1014                           ;main.c: 273: ADCON1 = 0xFE;
  1015  00F6AE  0EFE               	movlw	254
  1016  00F6B0  6EC1               	movwf	4033,c	;volatile
  1017                           
  1018                           ;main.c: 277: initLCD();
  1019  00F6B2  ECF2  F076         	call	_initLCD	;wreg free
  1020                           
  1021                           ;main.c: 279: unsigned int binsCount[4] = {0,0,0,0};
  1022  00F6B6  EE20  F06B         	lfsr	2,main@F3227
  1023  00F6BA  EE10  F062         	lfsr	1,main@binsCount
  1024  00F6BE  0E07               	movlw	7
  1025  00F6C0                     u1481:
  1026  00F6C0  CFDB FFE3          	movff	plusw2,plusw1
  1027  00F6C4  06E8               	decf	wreg,f,c
  1028  00F6C6  E2FC               	bc	u1481
  1029                           
  1030                           ;main.c: 280: unsigned char finalTime[2];
  1031                           ;main.c: 285: unsigned char C1 [2];
  1032                           ;main.c: 286: unsigned char R1 [2];
  1033                           ;main.c: 287: unsigned char G1 [2];
  1034                           ;main.c: 288: unsigned char B1 [2];
  1035                           ;main.c: 290: unsigned char C2 [2];
  1036                           ;main.c: 291: unsigned char R2 [2];
  1037                           ;main.c: 292: unsigned char G2 [2];
  1038                           ;main.c: 293: unsigned char B2 [2];
  1039                           ;main.c: 295: unsigned char C3 [2];
  1040                           ;main.c: 296: unsigned char R3 [2];
  1041                           ;main.c: 297: unsigned char G3 [2];
  1042                           ;main.c: 298: unsigned char B3 [2];
  1043                           ;main.c: 300: unsigned int r1;
  1044                           ;main.c: 301: unsigned int b1;
  1045  00F6C8  0E80               	movlw	128
  1046  00F6CA  EC0F  F076         	call	_lcdInst
  1047  00F6CE  0E21               	movlw	33
  1048  00F6D0  6E21               	movwf	??_main& (0+255),c
  1049  00F6D2  0E76               	movlw	118
  1050  00F6D4                     u1697:
  1051  00F6D4  2EE8               	decfsz	wreg,f,c
  1052  00F6D6  D7FE               	bra	u1697
  1053  00F6D8  2E21               	decfsz	??_main& (0+255),f,c
  1054  00F6DA  D7FC               	bra	u1697
  1055  00F6DC  D000               	nop2	
  1056                           
  1057                           ;main.c: 320: printf ("(Startup) Press");
  1058  00F6DE  0E54               	movlw	low STR_1
  1059  00F6E0  6E0D               	movwf	printf@f,c
  1060  00F6E2  0EFF               	movlw	high STR_1
  1061  00F6E4  6E0E               	movwf	printf@f+1,c
  1062  00F6E6  ECC1  F079         	call	_printf	;wreg free
  1063                           
  1064                           ;main.c: 321: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1065  00F6EA  0EC0               	movlw	192
  1066  00F6EC  EC0F  F076         	call	_lcdInst
  1067  00F6F0  0E21               	movlw	33
  1068  00F6F2  6E21               	movwf	??_main& (0+255),c
  1069  00F6F4  0E76               	movlw	118
  1070  00F6F6                     u1707:
  1071  00F6F6  2EE8               	decfsz	wreg,f,c
  1072  00F6F8  D7FE               	bra	u1707
  1073  00F6FA  2E21               	decfsz	??_main& (0+255),f,c
  1074  00F6FC  D7FC               	bra	u1707
  1075  00F6FE  D000               	nop2	
  1076                           
  1077                           ;main.c: 322: printf ("A to begin.");
  1078  00F700  0ED1               	movlw	low STR_2
  1079  00F702  6E0D               	movwf	printf@f,c
  1080  00F704  0EFF               	movlw	high STR_2
  1081  00F706  6E0E               	movwf	printf@f+1,c
  1082  00F708  ECC1  F079         	call	_printf	;wreg free
  1083  00F70C                     l2064:
  1084                           
  1085                           ;main.c: 325: unsigned char keypress = (PORTB & 0xF0)>>4;
  1086  00F70C  3881               	swapf	3969,w,c	;volatile
  1087  00F70E  0B0F               	andlw	15
  1088  00F710  0B0F               	andlw	15
  1089  00F712  6E37               	movwf	main@keypress,c
  1090                           
  1091                           ;main.c: 327: if (PORTBbits.RB1 == 1 && keypress == 0b0011){
  1092  00F714  A281               	btfss	3969,1,c	;volatile
  1093  00F716  D7FA               	goto	l2064
  1094  00F718  0E03               	movlw	3
  1095  00F71A  1837               	xorwf	main@keypress,w,c
  1096  00F71C  A4D8               	btfss	status,2,c
  1097  00F71E  D7F6               	goto	l2064
  1098  00F720                     l109:
  1099  00F720  B281               	btfsc	3969,1,c	;volatile
  1100  00F722  D7FE               	goto	l109
  1101                           
  1102                           ;main.c: 330: __nop();
  1103  00F724  F000               	nop	
  1104                           
  1105                           ;main.c: 331: __nop();
  1106  00F726  F000               	nop	
  1107                           
  1108                           ;main.c: 333: }
  1109                           ;main.c: 334: }
  1110                           ;main.c: 337: lcdInst(0x01); _delay((unsigned long)((10)*(10000000/4000.0)));;
  1111                           
  1112                           ;main.c: 332: break;
  1113  00F728  0E01               	movlw	1
  1114  00F72A  EC0F  F076         	call	_lcdInst
  1115  00F72E  0E21               	movlw	33
  1116  00F730  6E21               	movwf	??_main& (0+255),c
  1117  00F732  0E76               	movlw	118
  1118  00F734                     u1717:
  1119  00F734  2EE8               	decfsz	wreg,f,c
  1120  00F736  D7FE               	bra	u1717
  1121  00F738  2E21               	decfsz	??_main& (0+255),f,c
  1122  00F73A  D7FC               	bra	u1717
  1123  00F73C  D000               	nop2	
  1124                           
  1125                           ;main.c: 338: lcdInst(0b10000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1126  00F73E  0E80               	movlw	128
  1127  00F740  EC0F  F076         	call	_lcdInst
  1128  00F744  0E21               	movlw	33
  1129  00F746  6E21               	movwf	??_main& (0+255),c
  1130  00F748  0E76               	movlw	118
  1131  00F74A                     u1727:
  1132  00F74A  2EE8               	decfsz	wreg,f,c
  1133  00F74C  D7FE               	bra	u1727
  1134  00F74E  2E21               	decfsz	??_main& (0+255),f,c
  1135  00F750  D7FC               	bra	u1727
  1136  00F752  D000               	nop2	
  1137                           
  1138                           ;main.c: 339: printf("Sorting.");
  1139  00F754  0EF5               	movlw	low STR_3
  1140  00F756  6E0D               	movwf	printf@f,c
  1141  00F758  0EFF               	movlw	high STR_3
  1142  00F75A  6E0E               	movwf	printf@f+1,c
  1143  00F75C  ECC1  F079         	call	_printf	;wreg free
  1144                           
  1145                           ;main.c: 340: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1146  00F760  0EC0               	movlw	192
  1147  00F762  EC0F  F076         	call	_lcdInst
  1148  00F766  0E21               	movlw	33
  1149  00F768  6E21               	movwf	??_main& (0+255),c
  1150  00F76A  0E76               	movlw	118
  1151  00F76C                     u1737:
  1152  00F76C  2EE8               	decfsz	wreg,f,c
  1153  00F76E  D7FE               	bra	u1737
  1154  00F770  2E21               	decfsz	??_main& (0+255),f,c
  1155  00F772  D7FC               	bra	u1737
  1156  00F774  D000               	nop2	
  1157                           
  1158                           ;main.c: 341: printf("Press B to stop.");
  1159  00F776  0E11               	movlw	low STR_4
  1160  00F778  6E0D               	movwf	printf@f,c
  1161  00F77A  0EFF               	movlw	high STR_4
  1162  00F77C  6E0E               	movwf	printf@f+1,c
  1163  00F77E  ECC1  F079         	call	_printf	;wreg free
  1164                           
  1165                           ;main.c: 344: I2C_Master_Init(10000);
  1166  00F782  0E10               	movlw	16
  1167  00F784  6E0E               	movwf	I2C_Master_Init@c,c
  1168  00F786  0E27               	movlw	39
  1169  00F788  6E0F               	movwf	I2C_Master_Init@c+1,c
  1170  00F78A  0E00               	movlw	0
  1171  00F78C  6E10               	movwf	I2C_Master_Init@c+2,c
  1172  00F78E  0E00               	movlw	0
  1173  00F790  6E11               	movwf	I2C_Master_Init@c+3,c
  1174  00F792  EC92  F077         	call	_I2C_Master_Init	;wreg free
  1175                           
  1176                           ;main.c: 345: (INTCONbits.GIE = 0);
  1177  00F796  9EF2               	bcf	intcon,7,c	;volatile
  1178                           
  1179                           ;main.c: 346: set_time();
  1180  00F798  EC93  F076         	call	_set_time	;wreg free
  1181  00F79C                     l2088:
  1182                           
  1183                           ;main.c: 355: unsigned char keypress = (PORTB & 0xF0)>>4;
  1184  00F79C  3881               	swapf	3969,w,c	;volatile
  1185  00F79E  0B0F               	andlw	15
  1186  00F7A0  0B0F               	andlw	15
  1187  00F7A2  6E61               	movwf	main@keypress_348,c
  1188                           
  1189                           ;main.c: 356: unsigned char currentMotor = 4;
  1190  00F7A4  0E04               	movlw	4
  1191  00F7A6  6E6A               	movwf	main@currentMotor,c
  1192                           
  1193                           ;main.c: 358: tca_select(1);
  1194  00F7A8  0E01               	movlw	1
  1195  00F7AA  ECB2  F076         	call	_tca_select
  1196                           
  1197                           ;main.c: 359: read_sensor(R1, G1, B1, C1);
  1198  00F7AE  0E39               	movlw	low main@R1
  1199  00F7B0  6E04               	movwf	read_sensor@r,c
  1200  00F7B2  0E00               	movlw	high main@R1
  1201  00F7B4  6E05               	movwf	read_sensor@r+1,c
  1202  00F7B6  0E25               	movlw	low main@G1
  1203  00F7B8  6E06               	movwf	read_sensor@g,c
  1204  00F7BA  0E00               	movlw	high main@G1
  1205  00F7BC  6E07               	movwf	read_sensor@g+1,c
  1206  00F7BE  0E3B               	movlw	low main@B1
  1207  00F7C0  6E08               	movwf	read_sensor@b,c
  1208  00F7C2  0E00               	movlw	high main@B1
  1209  00F7C4  6E09               	movwf	read_sensor@b+1,c
  1210  00F7C6  0E55               	movlw	low main@C1
  1211  00F7C8  6E0A               	movwf	read_sensor@c,c
  1212  00F7CA  0E00               	movlw	high main@C1
  1213  00F7CC  6E0B               	movwf	read_sensor@c+1,c
  1214  00F7CE  EC4A  F079         	call	_read_sensor	;wreg free
  1215                           
  1216                           ;main.c: 360: tca_select(2);
  1217  00F7D2  0E02               	movlw	2
  1218  00F7D4  ECB2  F076         	call	_tca_select
  1219                           
  1220                           ;main.c: 361: read_sensor(R2, G2, B2, C2);
  1221  00F7D8  0E3F               	movlw	low main@R2
  1222  00F7DA  6E04               	movwf	read_sensor@r,c
  1223  00F7DC  0E00               	movlw	high main@R2
  1224  00F7DE  6E05               	movwf	read_sensor@r+1,c
  1225  00F7E0  0E27               	movlw	low main@G2
  1226  00F7E2  6E06               	movwf	read_sensor@g,c
  1227  00F7E4  0E00               	movlw	high main@G2
  1228  00F7E6  6E07               	movwf	read_sensor@g+1,c
  1229  00F7E8  0E41               	movlw	low main@B2
  1230  00F7EA  6E08               	movwf	read_sensor@b,c
  1231  00F7EC  0E00               	movlw	high main@B2
  1232  00F7EE  6E09               	movwf	read_sensor@b+1,c
  1233  00F7F0  0E3D               	movlw	low main@C2
  1234  00F7F2  6E0A               	movwf	read_sensor@c,c
  1235  00F7F4  0E00               	movlw	high main@C2
  1236  00F7F6  6E0B               	movwf	read_sensor@c+1,c
  1237  00F7F8  EC4A  F079         	call	_read_sensor	;wreg free
  1238                           
  1239                           ;main.c: 362: tca_select(3);
  1240  00F7FC  0E03               	movlw	3
  1241  00F7FE  ECB2  F076         	call	_tca_select
  1242                           
  1243                           ;main.c: 363: read_sensor(R3, G3, B3, C3);
  1244  00F802  0E43               	movlw	low main@R3
  1245  00F804  6E04               	movwf	read_sensor@r,c
  1246  00F806  0E00               	movlw	high main@R3
  1247  00F808  6E05               	movwf	read_sensor@r+1,c
  1248  00F80A  0E29               	movlw	low main@G3
  1249  00F80C  6E06               	movwf	read_sensor@g,c
  1250  00F80E  0E00               	movlw	high main@G3
  1251  00F810  6E07               	movwf	read_sensor@g+1,c
  1252  00F812  0E45               	movlw	low main@B3
  1253  00F814  6E08               	movwf	read_sensor@b,c
  1254  00F816  0E00               	movlw	high main@B3
  1255  00F818  6E09               	movwf	read_sensor@b+1,c
  1256  00F81A  0E57               	movlw	low main@C3
  1257  00F81C  6E0A               	movwf	read_sensor@c,c
  1258  00F81E  0E00               	movlw	high main@C3
  1259  00F820  6E0B               	movwf	read_sensor@c+1,c
  1260  00F822  EC4A  F079         	call	_read_sensor	;wreg free
  1261                           
  1262                           ;main.c: 366: lcdInst(0x01); _delay((unsigned long)((10)*(10000000/4000.0)));;
  1263  00F826  0E01               	movlw	1
  1264  00F828  EC0F  F076         	call	_lcdInst
  1265  00F82C  0E21               	movlw	33
  1266  00F82E  6E21               	movwf	??_main& (0+255),c
  1267  00F830  0E76               	movlw	118
  1268  00F832                     u1747:
  1269  00F832  2EE8               	decfsz	wreg,f,c
  1270  00F834  D7FE               	bra	u1747
  1271  00F836  2E21               	decfsz	??_main& (0+255),f,c
  1272  00F838  D7FC               	bra	u1747
  1273  00F83A  D000               	nop2	
  1274                           
  1275                           ;main.c: 367: lcdInst(0b10000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1276  00F83C  0E80               	movlw	128
  1277  00F83E  EC0F  F076         	call	_lcdInst
  1278  00F842  0E21               	movlw	33
  1279  00F844  6E21               	movwf	??_main& (0+255),c
  1280  00F846  0E76               	movlw	118
  1281  00F848                     u1757:
  1282  00F848  2EE8               	decfsz	wreg,f,c
  1283  00F84A  D7FE               	bra	u1757
  1284  00F84C  2E21               	decfsz	??_main& (0+255),f,c
  1285  00F84E  D7FC               	bra	u1757
  1286  00F850  D000               	nop2	
  1287                           
  1288                           ;main.c: 368: printf("C1:%02x %02x ", C1[1],C1[0]);
  1289  00F852  0E73               	movlw	low STR_5
  1290  00F854  6E0D               	movwf	printf@f,c
  1291  00F856  0EFF               	movlw	high STR_5
  1292  00F858  6E0E               	movwf	printf@f+1,c
  1293  00F85A  C056  F00F         	movff	main@C1+1,?_printf+2
  1294  00F85E  6A10               	clrf	?_printf+3,c
  1295  00F860  C055  F011         	movff	main@C1,?_printf+4
  1296  00F864  6A12               	clrf	?_printf+5,c
  1297  00F866  ECC1  F079         	call	_printf	;wreg free
  1298                           
  1299                           ;main.c: 369: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1300  00F86A  0EC0               	movlw	192
  1301  00F86C  EC0F  F076         	call	_lcdInst
  1302  00F870  0E21               	movlw	33
  1303  00F872  6E21               	movwf	??_main& (0+255),c
  1304  00F874  0E76               	movlw	118
  1305  00F876                     u1767:
  1306  00F876  2EE8               	decfsz	wreg,f,c
  1307  00F878  D7FE               	bra	u1767
  1308  00F87A  2E21               	decfsz	??_main& (0+255),f,c
  1309  00F87C  D7FC               	bra	u1767
  1310  00F87E  D000               	nop2	
  1311                           
  1312                           ;main.c: 370: printf("C3:%02x %02x ", C3[1],C3[0]);
  1313  00F880  0E81               	movlw	low STR_6
  1314  00F882  6E0D               	movwf	printf@f,c
  1315  00F884  0EFF               	movlw	high STR_6
  1316  00F886  6E0E               	movwf	printf@f+1,c
  1317  00F888  C058  F00F         	movff	main@C3+1,?_printf+2
  1318  00F88C  6A10               	clrf	?_printf+3,c
  1319  00F88E  C057  F011         	movff	main@C3,?_printf+4
  1320  00F892  6A12               	clrf	?_printf+5,c
  1321  00F894  ECC1  F079         	call	_printf	;wreg free
  1322                           
  1323                           ;main.c: 375: r1 = (R1[1] << 8) | R1[0];
  1324  00F898  5039               	movf	main@R1,w,c
  1325  00F89A  C03A  F021         	movff	main@R1+1,??_main
  1326  00F89E  6A22               	clrf	(??_main+1)& (0+255),c
  1327  00F8A0  C021  F022         	movff	??_main,??_main+1
  1328  00F8A4  6A21               	clrf	??_main,c
  1329  00F8A6  1021               	iorwf	??_main,w,c
  1330  00F8A8  6E59               	movwf	main@r1,c
  1331  00F8AA  5022               	movf	??_main+1,w,c
  1332  00F8AC  6E5A               	movwf	main@r1+1,c
  1333                           
  1334                           ;main.c: 376: b1 = (B1[1] << 8) | B1[0];
  1335  00F8AE  503B               	movf	main@B1,w,c
  1336  00F8B0  C03C  F021         	movff	main@B1+1,??_main
  1337  00F8B4  6A22               	clrf	(??_main+1)& (0+255),c
  1338  00F8B6  C021  F022         	movff	??_main,??_main+1
  1339  00F8BA  6A21               	clrf	??_main,c
  1340  00F8BC  1021               	iorwf	??_main,w,c
  1341  00F8BE  6E5B               	movwf	main@b1,c
  1342  00F8C0  5022               	movf	??_main+1,w,c
  1343  00F8C2  6E5C               	movwf	main@b1+1,c
  1344                           
  1345                           ;main.c: 377: c1 = (C1[1] << 8) | C1[0];
  1346  00F8C4  5055               	movf	main@C1,w,c
  1347  00F8C6  C056  F021         	movff	main@C1+1,??_main
  1348  00F8CA  6A22               	clrf	(??_main+1)& (0+255),c
  1349  00F8CC  C021  F022         	movff	??_main,??_main+1
  1350  00F8D0  6A21               	clrf	??_main,c
  1351  00F8D2  1021               	iorwf	??_main,w,c
  1352  00F8D4  6E47               	movwf	main@c1,c
  1353  00F8D6  5022               	movf	??_main+1,w,c
  1354  00F8D8  6E48               	movwf	main@c1+1,c
  1355                           
  1356                           ;main.c: 378: r2 = (R2[1] << 8) | R2[0];
  1357  00F8DA  503F               	movf	main@R2,w,c
  1358  00F8DC  C040  F021         	movff	main@R2+1,??_main
  1359  00F8E0  6A22               	clrf	(??_main+1)& (0+255),c
  1360  00F8E2  C021  F022         	movff	??_main,??_main+1
  1361  00F8E6  6A21               	clrf	??_main,c
  1362  00F8E8  1021               	iorwf	??_main,w,c
  1363  00F8EA  6E49               	movwf	main@r2,c
  1364  00F8EC  5022               	movf	??_main+1,w,c
  1365  00F8EE  6E4A               	movwf	main@r2+1,c
  1366                           
  1367                           ;main.c: 379: b2 = (B2[1] << 8) | B2[0];
  1368  00F8F0  5041               	movf	main@B2,w,c
  1369  00F8F2  C042  F021         	movff	main@B2+1,??_main
  1370  00F8F6  6A22               	clrf	(??_main+1)& (0+255),c
  1371  00F8F8  C021  F022         	movff	??_main,??_main+1
  1372  00F8FC  6A21               	clrf	??_main,c
  1373  00F8FE  1021               	iorwf	??_main,w,c
  1374  00F900  6E4B               	movwf	main@b2,c
  1375  00F902  5022               	movf	??_main+1,w,c
  1376  00F904  6E4C               	movwf	main@b2+1,c
  1377                           
  1378                           ;main.c: 380: c2 = (C2[1] << 8) | C2[0];
  1379  00F906  503D               	movf	main@C2,w,c
  1380  00F908  C03E  F021         	movff	main@C2+1,??_main
  1381  00F90C  6A22               	clrf	(??_main+1)& (0+255),c
  1382  00F90E  C021  F022         	movff	??_main,??_main+1
  1383  00F912  6A21               	clrf	??_main,c
  1384  00F914  1021               	iorwf	??_main,w,c
  1385  00F916  6E2B               	movwf	main@c2,c
  1386  00F918  5022               	movf	??_main+1,w,c
  1387  00F91A  6E2C               	movwf	main@c2+1,c
  1388                           
  1389                           ;main.c: 381: r3 = (R3[1] << 8) | R3[0];
  1390  00F91C  5043               	movf	main@R3,w,c
  1391  00F91E  C044  F021         	movff	main@R3+1,??_main
  1392  00F922  6A22               	clrf	(??_main+1)& (0+255),c
  1393  00F924  C021  F022         	movff	??_main,??_main+1
  1394  00F928  6A21               	clrf	??_main,c
  1395  00F92A  1021               	iorwf	??_main,w,c
  1396  00F92C  6E4D               	movwf	main@r3,c
  1397  00F92E  5022               	movf	??_main+1,w,c
  1398  00F930  6E4E               	movwf	main@r3+1,c
  1399                           
  1400                           ;main.c: 382: b3 = (B3[1] << 8) | B3[0];
  1401  00F932  5045               	movf	main@B3,w,c
  1402  00F934  C046  F021         	movff	main@B3+1,??_main
  1403  00F938  6A22               	clrf	(??_main+1)& (0+255),c
  1404  00F93A  C021  F022         	movff	??_main,??_main+1
  1405  00F93E  6A21               	clrf	??_main,c
  1406  00F940  1021               	iorwf	??_main,w,c
  1407  00F942  6E4F               	movwf	main@b3,c
  1408  00F944  5022               	movf	??_main+1,w,c
  1409  00F946  6E50               	movwf	main@b3+1,c
  1410                           
  1411                           ;main.c: 383: c3 = (C3[1] << 8) | C3[0];
  1412  00F948  5057               	movf	main@C3,w,c
  1413  00F94A  C058  F021         	movff	main@C3+1,??_main
  1414  00F94E  6A22               	clrf	(??_main+1)& (0+255),c
  1415  00F950  C021  F022         	movff	??_main,??_main+1
  1416  00F954  6A21               	clrf	??_main,c
  1417  00F956  1021               	iorwf	??_main,w,c
  1418  00F958  6E51               	movwf	main@c3,c
  1419  00F95A  5022               	movf	??_main+1,w,c
  1420  00F95C  6E52               	movwf	main@c3+1,c
  1421                           
  1422                           ;main.c: 384: rcap1 = r1/b1;
  1423  00F95E  C059  F001         	movff	main@r1,___lwdiv@dividend
  1424  00F962  C05A  F002         	movff	main@r1+1,___lwdiv@dividend+1
  1425  00F966  C05B  F003         	movff	main@b1,___lwdiv@divisor
  1426  00F96A  C05C  F004         	movff	main@b1+1,___lwdiv@divisor+1
  1427  00F96E  EC3E  F077         	call	___lwdiv	;wreg free
  1428  00F972  C001  F02D         	movff	?___lwdiv,main@rcap1
  1429  00F976  C002  F02E         	movff	?___lwdiv+1,main@rcap1+1
  1430                           
  1431                           ;main.c: 385: rcap2 = r2/b2;
  1432  00F97A  C049  F001         	movff	main@r2,___lwdiv@dividend
  1433  00F97E  C04A  F002         	movff	main@r2+1,___lwdiv@dividend+1
  1434  00F982  C04B  F003         	movff	main@b2,___lwdiv@divisor
  1435  00F986  C04C  F004         	movff	main@b2+1,___lwdiv@divisor+1
  1436  00F98A  EC3E  F077         	call	___lwdiv	;wreg free
  1437  00F98E  C001  F02F         	movff	?___lwdiv,main@rcap2
  1438  00F992  C002  F030         	movff	?___lwdiv+1,main@rcap2+1
  1439                           
  1440                           ;main.c: 386: tot1 = r1 + b1 + c1;
  1441  00F996  505B               	movf	main@b1,w,c
  1442  00F998  2459               	addwf	main@r1,w,c
  1443  00F99A  6E21               	movwf	??_main& (0+255),c
  1444  00F99C  505C               	movf	main@b1+1,w,c
  1445  00F99E  205A               	addwfc	main@r1+1,w,c
  1446  00F9A0  6E22               	movwf	(??_main+1)& (0+255),c
  1447  00F9A2  5047               	movf	main@c1,w,c
  1448  00F9A4  2421               	addwf	??_main,w,c
  1449  00F9A6  6E5D               	movwf	main@tot1,c
  1450  00F9A8  5048               	movf	main@c1+1,w,c
  1451  00F9AA  2022               	addwfc	??_main+1,w,c
  1452  00F9AC  6E5E               	movwf	main@tot1+1,c
  1453                           
  1454                           ;main.c: 387: tot2 = r2 + b2 + c2;
  1455  00F9AE  504B               	movf	main@b2,w,c
  1456  00F9B0  2449               	addwf	main@r2,w,c
  1457  00F9B2  6E21               	movwf	??_main& (0+255),c
  1458  00F9B4  504C               	movf	main@b2+1,w,c
  1459  00F9B6  204A               	addwfc	main@r2+1,w,c
  1460  00F9B8  6E22               	movwf	(??_main+1)& (0+255),c
  1461  00F9BA  502B               	movf	main@c2,w,c
  1462  00F9BC  2421               	addwf	??_main,w,c
  1463  00F9BE  6E53               	movwf	main@tot2,c
  1464  00F9C0  502C               	movf	main@c2+1,w,c
  1465  00F9C2  2022               	addwfc	??_main+1,w,c
  1466  00F9C4  6E54               	movwf	main@tot2+1,c
  1467                           
  1468                           ;main.c: 388: bcap1 = b1/r1;
  1469  00F9C6  C05B  F001         	movff	main@b1,___lwdiv@dividend
  1470  00F9CA  C05C  F002         	movff	main@b1+1,___lwdiv@dividend+1
  1471  00F9CE  C059  F003         	movff	main@r1,___lwdiv@divisor
  1472  00F9D2  C05A  F004         	movff	main@r1+1,___lwdiv@divisor+1
  1473  00F9D6  EC3E  F077         	call	___lwdiv	;wreg free
  1474  00F9DA  C001  F031         	movff	?___lwdiv,main@bcap1
  1475  00F9DE  C002  F032         	movff	?___lwdiv+1,main@bcap1+1
  1476                           
  1477                           ;main.c: 389: bcap3 = b3/r3;
  1478  00F9E2  C04F  F001         	movff	main@b3,___lwdiv@dividend
  1479  00F9E6  C050  F002         	movff	main@b3+1,___lwdiv@dividend+1
  1480  00F9EA  C04D  F003         	movff	main@r3,___lwdiv@divisor
  1481  00F9EE  C04E  F004         	movff	main@r3+1,___lwdiv@divisor+1
  1482  00F9F2  EC3E  F077         	call	___lwdiv	;wreg free
  1483  00F9F6  C001  F033         	movff	?___lwdiv,main@bcap3
  1484  00F9FA  C002  F034         	movff	?___lwdiv+1,main@bcap3+1
  1485                           
  1486                           ;main.c: 390: tot3 = r3 + b3 +c3;
  1487  00F9FE  504F               	movf	main@b3,w,c
  1488  00FA00  244D               	addwf	main@r3,w,c
  1489  00FA02  6E21               	movwf	??_main& (0+255),c
  1490  00FA04  5050               	movf	main@b3+1,w,c
  1491  00FA06  204E               	addwfc	main@r3+1,w,c
  1492  00FA08  6E22               	movwf	(??_main+1)& (0+255),c
  1493  00FA0A  5051               	movf	main@c3,w,c
  1494  00FA0C  2421               	addwf	??_main,w,c
  1495  00FA0E  6E23               	movwf	main@tot3,c
  1496  00FA10  5052               	movf	main@c3+1,w,c
  1497  00FA12  2022               	addwfc	??_main+1,w,c
  1498  00FA14  6E24               	movwf	main@tot3+1,c
  1499                           
  1500                           ;main.c: 396: if ((rcap1 > 1.8 && tot2 > 10000) || (rcap2 > 1.8 && tot1 > 10000)){
  1501  00FA16  0E66               	movlw	102
  1502  00FA18  6E0C               	movwf	___ftge@ff1,c
  1503  00FA1A  0EE6               	movlw	230
  1504  00FA1C  6E0D               	movwf	___ftge@ff1+1,c
  1505  00FA1E  0E3F               	movlw	63
  1506  00FA20  6E0E               	movwf	___ftge@ff1+2,c
  1507  00FA22  C02D  F009         	movff	main@rcap1,___lwtoft@c
  1508  00FA26  C02E  F00A         	movff	main@rcap1+1,___lwtoft@c+1
  1509  00FA2A  EC5B  F076         	call	___lwtoft	;wreg free
  1510  00FA2E  C009  F00F         	movff	?___lwtoft,___ftge@ff2
  1511  00FA32  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
  1512  00FA36  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
  1513  00FA3A  ECAB  F078         	call	___ftge	;wreg free
  1514  00FA3E  B0D8               	btfsc	status,0,c
  1515  00FA40  D006               	goto	l2156
  1516  00FA42  0E11               	movlw	17
  1517  00FA44  5C53               	subwf	main@tot2,w,c
  1518  00FA46  0E27               	movlw	39
  1519  00FA48  5854               	subwfb	main@tot2+1,w,c
  1520  00FA4A  B0D8               	btfsc	status,0,c
  1521  00FA4C  D01C               	goto	l2160
  1522  00FA4E                     l2156:
  1523  00FA4E  0E66               	movlw	102
  1524  00FA50  6E0C               	movwf	___ftge@ff1,c
  1525  00FA52  0EE6               	movlw	230
  1526  00FA54  6E0D               	movwf	___ftge@ff1+1,c
  1527  00FA56  0E3F               	movlw	63
  1528  00FA58  6E0E               	movwf	___ftge@ff1+2,c
  1529  00FA5A  C02F  F009         	movff	main@rcap2,___lwtoft@c
  1530  00FA5E  C030  F00A         	movff	main@rcap2+1,___lwtoft@c+1
  1531  00FA62  EC5B  F076         	call	___lwtoft	;wreg free
  1532  00FA66  C009  F00F         	movff	?___lwtoft,___ftge@ff2
  1533  00FA6A  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
  1534  00FA6E  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
  1535  00FA72  ECAB  F078         	call	___ftge	;wreg free
  1536  00FA76  B0D8               	btfsc	status,0,c
  1537  00FA78  D010               	goto	l2168
  1538  00FA7A  0E11               	movlw	17
  1539  00FA7C  5C5D               	subwf	main@tot1,w,c
  1540  00FA7E  0E27               	movlw	39
  1541  00FA80  585E               	subwfb	main@tot1+1,w,c
  1542  00FA82  A0D8               	btfss	status,0,c
  1543  00FA84  D00A               	goto	l2168
  1544  00FA86                     l2160:
  1545                           
  1546                           ;main.c: 398: currentMotor = 1;
  1547  00FA86  0E01               	movlw	1
  1548  00FA88  6E6A               	movwf	main@currentMotor,c
  1549                           
  1550                           ;main.c: 399: activate_stepper(currentMotor);
  1551  00FA8A  506A               	movf	main@currentMotor,w,c
  1552  00FA8C  ECEC  F077         	call	_activate_stepper
  1553                           
  1554                           ;main.c: 400: rotate();
  1555  00FA90  ECFE  F075         	call	_rotate	;wreg free
  1556                           
  1557                           ;main.c: 401: binsCount[0]++;
  1558  00FA94  4A62               	infsnz	main@binsCount,f,c
  1559  00FA96  2A63               	incf	main@binsCount+1,f,c
  1560                           
  1561                           ;main.c: 402: }
  1562  00FA98  D07B               	goto	l2204
  1563  00FA9A                     l2168:
  1564                           
  1565                           ;main.c: 404: else if (tot2 > 10000 || tot1 > 10000){
  1566  00FA9A  0E11               	movlw	17
  1567  00FA9C  5C53               	subwf	main@tot2,w,c
  1568  00FA9E  0E27               	movlw	39
  1569  00FAA0  5854               	subwfb	main@tot2+1,w,c
  1570  00FAA2  B0D8               	btfsc	status,0,c
  1571  00FAA4  D006               	goto	l2172
  1572  00FAA6  0E11               	movlw	17
  1573  00FAA8  5C5D               	subwf	main@tot1,w,c
  1574  00FAAA  0E27               	movlw	39
  1575  00FAAC  585E               	subwfb	main@tot1+1,w,c
  1576  00FAAE  A0D8               	btfss	status,0,c
  1577  00FAB0  D00A               	goto	l2180
  1578  00FAB2                     l2172:
  1579                           
  1580                           ;main.c: 406: currentMotor = 2;
  1581  00FAB2  0E02               	movlw	2
  1582  00FAB4  6E6A               	movwf	main@currentMotor,c
  1583                           
  1584                           ;main.c: 407: activate_stepper(currentMotor);
  1585  00FAB6  506A               	movf	main@currentMotor,w,c
  1586  00FAB8  ECEC  F077         	call	_activate_stepper
  1587                           
  1588                           ;main.c: 408: rotate();
  1589  00FABC  ECFE  F075         	call	_rotate	;wreg free
  1590                           
  1591                           ;main.c: 409: binsCount[1]++;
  1592  00FAC0  4A64               	infsnz	main@binsCount+2,f,c
  1593  00FAC2  2A65               	incf	main@binsCount+3,f,c
  1594                           
  1595                           ;main.c: 411: }
  1596  00FAC4  D065               	goto	l2204
  1597  00FAC6                     l2180:
  1598                           
  1599                           ;main.c: 413: else if (bcap1 > 0.9 || bcap3 > 0.9){
  1600  00FAC6  0E66               	movlw	102
  1601  00FAC8  6E0C               	movwf	___ftge@ff1,c
  1602  00FACA  0E66               	movlw	102
  1603  00FACC  6E0D               	movwf	___ftge@ff1+1,c
  1604  00FACE  0E3F               	movlw	63
  1605  00FAD0  6E0E               	movwf	___ftge@ff1+2,c
  1606  00FAD2  C031  F009         	movff	main@bcap1,___lwtoft@c
  1607  00FAD6  C032  F00A         	movff	main@bcap1+1,___lwtoft@c+1
  1608  00FADA  EC5B  F076         	call	___lwtoft	;wreg free
  1609  00FADE  C009  F00F         	movff	?___lwtoft,___ftge@ff2
  1610  00FAE2  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
  1611  00FAE6  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
  1612  00FAEA  ECAB  F078         	call	___ftge	;wreg free
  1613  00FAEE  A0D8               	btfss	status,0,c
  1614  00FAF0  D016               	goto	l2184
  1615  00FAF2  0E66               	movlw	102
  1616  00FAF4  6E0C               	movwf	___ftge@ff1,c
  1617  00FAF6  0E66               	movlw	102
  1618  00FAF8  6E0D               	movwf	___ftge@ff1+1,c
  1619  00FAFA  0E3F               	movlw	63
  1620  00FAFC  6E0E               	movwf	___ftge@ff1+2,c
  1621  00FAFE  C033  F009         	movff	main@bcap3,___lwtoft@c
  1622  00FB02  C034  F00A         	movff	main@bcap3+1,___lwtoft@c+1
  1623  00FB06  EC5B  F076         	call	___lwtoft	;wreg free
  1624  00FB0A  C009  F00F         	movff	?___lwtoft,___ftge@ff2
  1625  00FB0E  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
  1626  00FB12  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
  1627  00FB16  ECAB  F078         	call	___ftge	;wreg free
  1628  00FB1A  B0D8               	btfsc	status,0,c
  1629  00FB1C  D00A               	goto	l2192
  1630  00FB1E                     l2184:
  1631                           
  1632                           ;main.c: 416: currentMotor = 3;
  1633  00FB1E  0E03               	movlw	3
  1634  00FB20  6E6A               	movwf	main@currentMotor,c
  1635                           
  1636                           ;main.c: 417: activate_stepper(currentMotor);
  1637  00FB22  506A               	movf	main@currentMotor,w,c
  1638  00FB24  ECEC  F077         	call	_activate_stepper
  1639                           
  1640                           ;main.c: 418: rotate();
  1641  00FB28  ECFE  F075         	call	_rotate	;wreg free
  1642                           
  1643                           ;main.c: 419: binsCount[2]++;
  1644  00FB2C  4A66               	infsnz	main@binsCount+4,f,c
  1645  00FB2E  2A67               	incf	main@binsCount+5,f,c
  1646                           
  1647                           ;main.c: 420: }
  1648  00FB30  D02F               	goto	l2204
  1649  00FB32                     l2192:
  1650                           
  1651                           ;main.c: 428: else if ((tot1 > 2800 || c3/c1 > 1.0)){
  1652  00FB32  0EF1               	movlw	241
  1653  00FB34  5C5D               	subwf	main@tot1,w,c
  1654  00FB36  0E0A               	movlw	10
  1655  00FB38  585E               	subwfb	main@tot1+1,w,c
  1656  00FB3A  B0D8               	btfsc	status,0,c
  1657  00FB3C  D020               	goto	l2196
  1658  00FB3E  0E00               	movlw	0
  1659  00FB40  6E0C               	movwf	___ftge@ff1,c
  1660  00FB42  0E80               	movlw	128
  1661  00FB44  6E0D               	movwf	___ftge@ff1+1,c
  1662  00FB46  0E3F               	movlw	63
  1663  00FB48  6E0E               	movwf	___ftge@ff1+2,c
  1664  00FB4A  C047  F003         	movff	main@c1,___lwdiv@divisor
  1665  00FB4E  C048  F004         	movff	main@c1+1,___lwdiv@divisor+1
  1666  00FB52  C051  F001         	movff	main@c3,___lwdiv@dividend
  1667  00FB56  C052  F002         	movff	main@c3+1,___lwdiv@dividend+1
  1668  00FB5A  EC3E  F077         	call	___lwdiv	;wreg free
  1669  00FB5E  C001  F009         	movff	?___lwdiv,___lwtoft@c
  1670  00FB62  C002  F00A         	movff	?___lwdiv+1,___lwtoft@c+1
  1671  00FB66  EC5B  F076         	call	___lwtoft	;wreg free
  1672  00FB6A  C009  F00F         	movff	?___lwtoft,___ftge@ff2
  1673  00FB6E  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
  1674  00FB72  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
  1675  00FB76  ECAB  F078         	call	___ftge	;wreg free
  1676  00FB7A  B0D8               	btfsc	status,0,c
  1677  00FB7C  D009               	goto	l2204
  1678  00FB7E                     l2196:
  1679                           
  1680                           ;main.c: 431: currentMotor = 4;
  1681  00FB7E  0E04               	movlw	4
  1682  00FB80  6E6A               	movwf	main@currentMotor,c
  1683                           
  1684                           ;main.c: 432: activate_stepper(currentMotor);
  1685  00FB82  506A               	movf	main@currentMotor,w,c
  1686  00FB84  ECEC  F077         	call	_activate_stepper
  1687                           
  1688                           ;main.c: 433: rotate();
  1689  00FB88  ECFE  F075         	call	_rotate	;wreg free
  1690                           
  1691                           ;main.c: 434: binsCount[3]++;
  1692  00FB8C  4A68               	infsnz	main@binsCount+6,f,c
  1693  00FB8E  2A69               	incf	main@binsCount+7,f,c
  1694  00FB90                     l2204:
  1695                           
  1696                           ;main.c: 435: }
  1697                           ;main.c: 437: if (check_B_press(keypress, finalTime)==1)
  1698  00FB90  0E5F               	movlw	low main@finalTime
  1699  00FB92  6E06               	movwf	check_B_press@time,c
  1700  00FB94  0E00               	movlw	high main@finalTime
  1701  00FB96  6E07               	movwf	check_B_press@time+1,c
  1702  00FB98  5061               	movf	main@keypress_348,w,c
  1703  00FB9A  EC15  F077         	call	_check_B_press
  1704  00FB9E  06E8               	decf	wreg,f,c
  1705  00FBA0  B4D8               	btfsc	status,2,c
  1706  00FBA2  D065               	goto	l2238
  1707                           
  1708                           ;main.c: 441: agitator_move(0,1);
  1709                           
  1710                           ;main.c: 438: break;
  1711  00FBA4  0E01               	movlw	1
  1712  00FBA6  6E01               	movwf	agitator_move@b,c
  1713  00FBA8  0E00               	movlw	0
  1714  00FBAA  EC2F  F076         	call	_agitator_move
  1715                           
  1716                           ;main.c: 443: _delay((unsigned long)((1128)*(10000000/4000.0)));
  1717  00FBAE  0E0F               	movlw	15
  1718  00FBB0  6E22               	movwf	(??_main+1)& (0+255),c
  1719  00FBB2  0E4F               	movlw	79
  1720  00FBB4  6E21               	movwf	??_main& (0+255),c
  1721  00FBB6  0E4A               	movlw	74
  1722  00FBB8                     u1777:
  1723  00FBB8  2EE8               	decfsz	wreg,f,c
  1724  00FBBA  D7FE               	bra	u1777
  1725  00FBBC  2E21               	decfsz	??_main& (0+255),f,c
  1726  00FBBE  D7FC               	bra	u1777
  1727  00FBC0  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1728  00FBC2  D7FA               	bra	u1777
  1729  00FBC4  D000               	nop2	
  1730                           
  1731                           ;main.c: 445: stop_rotate();
  1732  00FBC6  EC00  F076         	call	_stop_rotate	;wreg free
  1733                           
  1734                           ;main.c: 447: if (check_B_press(keypress, finalTime)==1)
  1735  00FBCA  0E5F               	movlw	low main@finalTime
  1736  00FBCC  6E06               	movwf	check_B_press@time,c
  1737  00FBCE  0E00               	movlw	high main@finalTime
  1738  00FBD0  6E07               	movwf	check_B_press@time+1,c
  1739  00FBD2  5061               	movf	main@keypress_348,w,c
  1740  00FBD4  EC15  F077         	call	_check_B_press
  1741  00FBD8  06E8               	decf	wreg,f,c
  1742  00FBDA  B4D8               	btfsc	status,2,c
  1743  00FBDC  D048               	goto	l2238
  1744                           
  1745                           ;main.c: 450: LATA = 0xFF;
  1746                           
  1747                           ;main.c: 448: break;
  1748  00FBDE  6889               	setf	3977,c	;volatile
  1749                           
  1750                           ;main.c: 451: _delay((unsigned long)((800)*(10000000/4000.0)));
  1751  00FBE0  0E0B               	movlw	11
  1752  00FBE2  6E22               	movwf	(??_main+1)& (0+255),c
  1753  00FBE4  0E26               	movlw	38
  1754  00FBE6  6E21               	movwf	??_main& (0+255),c
  1755  00FBE8  0E5E               	movlw	94
  1756  00FBEA                     u1787:
  1757  00FBEA  2EE8               	decfsz	wreg,f,c
  1758  00FBEC  D7FE               	bra	u1787
  1759  00FBEE  2E21               	decfsz	??_main& (0+255),f,c
  1760  00FBF0  D7FC               	bra	u1787
  1761  00FBF2  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1762  00FBF4  D7FA               	bra	u1787
  1763                           
  1764                           ;main.c: 453: _delay((unsigned long)((400)*(10000000/4000.0)));
  1765  00FBF6  0E06               	movlw	6
  1766  00FBF8  6E22               	movwf	(??_main+1)& (0+255),c
  1767  00FBFA  0E13               	movlw	19
  1768  00FBFC  6E21               	movwf	??_main& (0+255),c
  1769  00FBFE  0EAE               	movlw	174
  1770  00FC00                     u1797:
  1771  00FC00  2EE8               	decfsz	wreg,f,c
  1772  00FC02  D7FE               	bra	u1797
  1773  00FC04  2E21               	decfsz	??_main& (0+255),f,c
  1774  00FC06  D7FC               	bra	u1797
  1775  00FC08  2E22               	decfsz	(??_main+1)& (0+255),f,c
  1776  00FC0A  D7FA               	bra	u1797
  1777                           
  1778                           ;main.c: 454: agitator_move(1,0);
  1779  00FC0C  0E00               	movlw	0
  1780  00FC0E  6E01               	movwf	agitator_move@b,c
  1781  00FC10  0E01               	movlw	1
  1782  00FC12  EC2F  F076         	call	_agitator_move
  1783                           
  1784                           ;main.c: 461: if (check_B_press(keypress, finalTime)==1)
  1785  00FC16  0E5F               	movlw	low main@finalTime
  1786  00FC18  6E06               	movwf	check_B_press@time,c
  1787  00FC1A  0E00               	movlw	high main@finalTime
  1788  00FC1C  6E07               	movwf	check_B_press@time+1,c
  1789  00FC1E  5061               	movf	main@keypress_348,w,c
  1790  00FC20  EC15  F077         	call	_check_B_press
  1791  00FC24  06E8               	decf	wreg,f,c
  1792  00FC26  B4D8               	btfsc	status,2,c
  1793  00FC28  D022               	goto	l2238
  1794                           
  1795                           ;main.c: 465: return_motors(currentMotor);
  1796                           
  1797                           ;main.c: 462: break;
  1798  00FC2A  506A               	movf	main@currentMotor,w,c
  1799  00FC2C  EC2A  F078         	call	_return_motors
  1800                           
  1801                           ;main.c: 470: LATA = 0xFF;
  1802  00FC30  6889               	setf	3977,c	;volatile
  1803                           
  1804                           ;main.c: 472: if (check_B_press(keypress, finalTime)==1)
  1805  00FC32  0E5F               	movlw	low main@finalTime
  1806  00FC34  6E06               	movwf	check_B_press@time,c
  1807  00FC36  0E00               	movlw	high main@finalTime
  1808  00FC38  6E07               	movwf	check_B_press@time+1,c
  1809  00FC3A  5061               	movf	main@keypress_348,w,c
  1810  00FC3C  EC15  F077         	call	_check_B_press
  1811  00FC40  06E8               	decf	wreg,f,c
  1812  00FC42  B4D8               	btfsc	status,2,c
  1813  00FC44  D014               	goto	l2238
  1814                           
  1815                           ;main.c: 475: if (binsCount[0]+binsCount[1]+binsCount[2]+binsCount[3] >= 10)
  1816                           
  1817                           ;main.c: 473: break;
  1818  00FC46  5066               	movf	main@binsCount+4,w,c
  1819  00FC48  2464               	addwf	main@binsCount+2,w,c
  1820  00FC4A  6E21               	movwf	??_main& (0+255),c
  1821  00FC4C  5067               	movf	main@binsCount+5,w,c
  1822  00FC4E  2065               	addwfc	main@binsCount+3,w,c
  1823  00FC50  6E22               	movwf	(??_main+1)& (0+255),c
  1824  00FC52  5068               	movf	main@binsCount+6,w,c
  1825  00FC54  2621               	addwf	??_main,f,c
  1826  00FC56  5069               	movf	main@binsCount+7,w,c
  1827  00FC58  2222               	addwfc	??_main+1,f,c
  1828  00FC5A  5062               	movf	main@binsCount,w,c
  1829  00FC5C  2621               	addwf	??_main,f,c
  1830  00FC5E  5063               	movf	main@binsCount+1,w,c
  1831  00FC60  2222               	addwfc	??_main+1,f,c
  1832  00FC62  5022               	movf	??_main+1,w,c
  1833  00FC64  E104               	bnz	l2238
  1834  00FC66  0E0A               	movlw	10
  1835  00FC68  5C21               	subwf	??_main,w,c
  1836  00FC6A  A0D8               	btfss	status,0,c
  1837  00FC6C  D597               	goto	l2088
  1838  00FC6E                     l2238:
  1839                           
  1840                           ;main.c: 478: }
  1841                           ;main.c: 480: tca_select(1);
  1842  00FC6E  0E01               	movlw	1
  1843  00FC70  ECB2  F076         	call	_tca_select
  1844                           
  1845                           ;main.c: 481: poweroff_sensor();
  1846  00FC74  EC4A  F076         	call	_poweroff_sensor	;wreg free
  1847                           
  1848                           ;main.c: 482: tca_select(2);
  1849  00FC78  0E02               	movlw	2
  1850  00FC7A  ECB2  F076         	call	_tca_select
  1851                           
  1852                           ;main.c: 483: poweroff_sensor();
  1853  00FC7E  EC4A  F076         	call	_poweroff_sensor	;wreg free
  1854                           
  1855                           ;main.c: 484: tca_select(3);
  1856  00FC82  0E03               	movlw	3
  1857  00FC84  ECB2  F076         	call	_tca_select
  1858                           
  1859                           ;main.c: 485: poweroff_sensor();
  1860  00FC88  EC4A  F076         	call	_poweroff_sensor	;wreg free
  1861                           
  1862                           ;main.c: 486: agitator_move(0,0);
  1863  00FC8C  0E00               	movlw	0
  1864  00FC8E  6E01               	movwf	agitator_move@b,c
  1865  00FC90  0E00               	movlw	0
  1866  00FC92  EC2F  F076         	call	_agitator_move
  1867                           
  1868                           ;main.c: 493: lcdInst(0x01); _delay((unsigned long)((10)*(10000000/4000.0)));;
  1869  00FC96  0E01               	movlw	1
  1870  00FC98  EC0F  F076         	call	_lcdInst
  1871  00FC9C  0E21               	movlw	33
  1872  00FC9E  6E21               	movwf	??_main& (0+255),c
  1873  00FCA0  0E76               	movlw	118
  1874  00FCA2                     u1807:
  1875  00FCA2  2EE8               	decfsz	wreg,f,c
  1876  00FCA4  D7FE               	bra	u1807
  1877  00FCA6  2E21               	decfsz	??_main& (0+255),f,c
  1878  00FCA8  D7FC               	bra	u1807
  1879  00FCAA  D000               	nop2	
  1880                           
  1881                           ;main.c: 494: printf("Push 2,3,5,6,8,9");
  1882  00FCAC  0E22               	movlw	low STR_7
  1883  00FCAE  6E0D               	movwf	printf@f,c
  1884  00FCB0  0EFF               	movlw	high STR_7
  1885  00FCB2  6E0E               	movwf	printf@f+1,c
  1886  00FCB4  ECC1  F079         	call	_printf	;wreg free
  1887                           
  1888                           ;main.c: 495: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1889  00FCB8  0EC0               	movlw	192
  1890  00FCBA  EC0F  F076         	call	_lcdInst
  1891  00FCBE  0E21               	movlw	33
  1892  00FCC0  6E21               	movwf	??_main& (0+255),c
  1893  00FCC2  0E76               	movlw	118
  1894  00FCC4                     u1817:
  1895  00FCC4  2EE8               	decfsz	wreg,f,c
  1896  00FCC6  D7FE               	bra	u1817
  1897  00FCC8  2E21               	decfsz	??_main& (0+255),f,c
  1898  00FCCA  D7FC               	bra	u1817
  1899  00FCCC  D000               	nop2	
  1900                           
  1901                           ;main.c: 496: printf("to view log");
  1902  00FCCE  0EE9               	movlw	low STR_8
  1903  00FCD0  6E0D               	movwf	printf@f,c
  1904  00FCD2  0EFF               	movlw	high STR_8
  1905  00FCD4  6E0E               	movwf	printf@f+1,c
  1906  00FCD6  ECC1  F079         	call	_printf	;wreg free
  1907                           
  1908                           ;main.c: 498: unsigned short totalCount = binsCount[0]+binsCount[1]+binsCount[2]+binsCou
      +                          nt[3];
  1909  00FCDA  5066               	movf	main@binsCount+4,w,c
  1910  00FCDC  2464               	addwf	main@binsCount+2,w,c
  1911  00FCDE  6E21               	movwf	??_main& (0+255),c
  1912  00FCE0  5067               	movf	main@binsCount+5,w,c
  1913  00FCE2  2065               	addwfc	main@binsCount+3,w,c
  1914  00FCE4  6E22               	movwf	(??_main+1)& (0+255),c
  1915  00FCE6  5068               	movf	main@binsCount+6,w,c
  1916  00FCE8  2621               	addwf	??_main,f,c
  1917  00FCEA  5069               	movf	main@binsCount+7,w,c
  1918  00FCEC  2222               	addwfc	??_main+1,f,c
  1919  00FCEE  5062               	movf	main@binsCount,w,c
  1920  00FCF0  2421               	addwf	??_main,w,c
  1921  00FCF2  6E35               	movwf	main@totalCount,c
  1922  00FCF4  5063               	movf	main@binsCount+1,w,c
  1923  00FCF6  2022               	addwfc	??_main+1,w,c
  1924  00FCF8  6E36               	movwf	main@totalCount+1,c
  1925  00FCFA                     l2256:
  1926                           
  1927                           ;main.c: 501: unsigned char keypress = (PORTB & 0xF0)>>4;
  1928  00FCFA  3881               	swapf	3969,w,c	;volatile
  1929  00FCFC  0B0F               	andlw	15
  1930  00FCFE  0B0F               	andlw	15
  1931  00FD00  6E38               	movwf	main@keypress_364,c
  1932                           
  1933                           ;main.c: 503: if (PORTBbits.RB1 == 1){
  1934  00FD02  A281               	btfss	3969,1,c	;volatile
  1935  00FD04  D7FA               	goto	l2256
  1936  00FD06                     l141:
  1937  00FD06  B281               	btfsc	3969,1,c	;volatile
  1938  00FD08  D7FE               	goto	l141
  1939                           
  1940                           ;main.c: 505: lcdInst(0x01); _delay((unsigned long)((10)*(10000000/4000.0)));;
  1941  00FD0A  0E01               	movlw	1
  1942  00FD0C  EC0F  F076         	call	_lcdInst
  1943  00FD10  0E21               	movlw	33
  1944  00FD12  6E21               	movwf	??_main& (0+255),c
  1945  00FD14  0E76               	movlw	118
  1946  00FD16                     u1827:
  1947  00FD16  2EE8               	decfsz	wreg,f,c
  1948  00FD18  D7FE               	bra	u1827
  1949  00FD1A  2E21               	decfsz	??_main& (0+255),f,c
  1950  00FD1C  D7FC               	bra	u1827
  1951  00FD1E  D000               	nop2	
  1952                           
  1953                           ;main.c: 506: lcdInst(0b10000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1954  00FD20  0E80               	movlw	128
  1955  00FD22  EC0F  F076         	call	_lcdInst
  1956  00FD26  0E21               	movlw	33
  1957  00FD28  6E21               	movwf	??_main& (0+255),c
  1958  00FD2A  0E76               	movlw	118
  1959  00FD2C                     u1837:
  1960  00FD2C  2EE8               	decfsz	wreg,f,c
  1961  00FD2E  D7FE               	bra	u1837
  1962  00FD30  2E21               	decfsz	??_main& (0+255),f,c
  1963  00FD32  D7FC               	bra	u1837
  1964  00FD34  D000               	nop2	
  1965                           
  1966                           ;main.c: 508: switch (keypress){
  1967  00FD36  D0AA               	goto	l2318
  1968  00FD38                     l2268:
  1969                           
  1970                           ;main.c: 511: printf("YOP with cap");
  1971  00FD38  0EC4               	movlw	low STR_9
  1972  00FD3A  6E0D               	movwf	printf@f,c
  1973  00FD3C  0EFF               	movlw	high STR_9
  1974  00FD3E  6E0E               	movwf	printf@f+1,c
  1975  00FD40  ECC1  F079         	call	_printf	;wreg free
  1976                           
  1977                           ;main.c: 512: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  1978  00FD44  0EC0               	movlw	192
  1979  00FD46  EC0F  F076         	call	_lcdInst
  1980  00FD4A  0E21               	movlw	33
  1981  00FD4C  6E21               	movwf	??_main& (0+255),c
  1982  00FD4E  0E76               	movlw	118
  1983  00FD50                     u1847:
  1984  00FD50  2EE8               	decfsz	wreg,f,c
  1985  00FD52  D7FE               	bra	u1847
  1986  00FD54  2E21               	decfsz	??_main& (0+255),f,c
  1987  00FD56  D7FC               	bra	u1847
  1988  00FD58  D000               	nop2	
  1989                           
  1990                           ;main.c: 513: printf("(bin #1): %02x", binsCount[0]);
  1991  00FD5A  0E64               	movlw	low STR_10
  1992  00FD5C  6E0D               	movwf	printf@f,c
  1993  00FD5E  0EFF               	movlw	high STR_10
  1994  00FD60  6E0E               	movwf	printf@f+1,c
  1995  00FD62  C062  F00F         	movff	main@binsCount,?_printf+2
  1996  00FD66  C063  F010         	movff	main@binsCount+1,?_printf+3
  1997  00FD6A  ECC1  F079         	call	_printf	;wreg free
  1998                           
  1999                           ;main.c: 514: break;
  2000  00FD6E  D7C5               	goto	l2256
  2001  00FD70                     l2276:
  2002                           
  2003                           ;main.c: 517: printf("YOP without cap");
  2004  00FD70  0E44               	movlw	low STR_11
  2005  00FD72  6E0D               	movwf	printf@f,c
  2006  00FD74  0EFF               	movlw	high STR_11
  2007  00FD76  6E0E               	movwf	printf@f+1,c
  2008  00FD78  ECC1  F079         	call	_printf	;wreg free
  2009                           
  2010                           ;main.c: 518: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2011  00FD7C  0EC0               	movlw	192
  2012  00FD7E  EC0F  F076         	call	_lcdInst
  2013  00FD82  0E21               	movlw	33
  2014  00FD84  6E21               	movwf	??_main& (0+255),c
  2015  00FD86  0E76               	movlw	118
  2016  00FD88                     u1857:
  2017  00FD88  2EE8               	decfsz	wreg,f,c
  2018  00FD8A  D7FE               	bra	u1857
  2019  00FD8C  2E21               	decfsz	??_main& (0+255),f,c
  2020  00FD8E  D7FC               	bra	u1857
  2021  00FD90  D000               	nop2	
  2022                           
  2023                           ;main.c: 519: printf("(bin #2): %d", binsCount[1]);
  2024  00FD92  0E9D               	movlw	low STR_12
  2025  00FD94  6E0D               	movwf	printf@f,c
  2026  00FD96  0EFF               	movlw	high STR_12
  2027  00FD98  6E0E               	movwf	printf@f+1,c
  2028  00FD9A  C064  F00F         	movff	main@binsCount+2,?_printf+2
  2029  00FD9E  C065  F010         	movff	main@binsCount+3,?_printf+3
  2030  00FDA2  ECC1  F079         	call	_printf	;wreg free
  2031                           
  2032                           ;main.c: 520: break;
  2033  00FDA6  D7A9               	goto	l2256
  2034  00FDA8                     l2284:
  2035                           
  2036                           ;main.c: 523: printf("ESKA with cap");
  2037  00FDA8  0E8F               	movlw	low STR_13
  2038  00FDAA  6E0D               	movwf	printf@f,c
  2039  00FDAC  0EFF               	movlw	high STR_13
  2040  00FDAE  6E0E               	movwf	printf@f+1,c
  2041  00FDB0  ECC1  F079         	call	_printf	;wreg free
  2042                           
  2043                           ;main.c: 524: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2044  00FDB4  0EC0               	movlw	192
  2045  00FDB6  EC0F  F076         	call	_lcdInst
  2046  00FDBA  0E21               	movlw	33
  2047  00FDBC  6E21               	movwf	??_main& (0+255),c
  2048  00FDBE  0E76               	movlw	118
  2049  00FDC0                     u1867:
  2050  00FDC0  2EE8               	decfsz	wreg,f,c
  2051  00FDC2  D7FE               	bra	u1867
  2052  00FDC4  2E21               	decfsz	??_main& (0+255),f,c
  2053  00FDC6  D7FC               	bra	u1867
  2054  00FDC8  D000               	nop2	
  2055                           
  2056                           ;main.c: 525: printf("(bin #3): %d", binsCount[2]);
  2057  00FDCA  0EAA               	movlw	low STR_14
  2058  00FDCC  6E0D               	movwf	printf@f,c
  2059  00FDCE  0EFF               	movlw	high STR_14
  2060  00FDD0  6E0E               	movwf	printf@f+1,c
  2061  00FDD2  C066  F00F         	movff	main@binsCount+4,?_printf+2
  2062  00FDD6  C067  F010         	movff	main@binsCount+5,?_printf+3
  2063  00FDDA  ECC1  F079         	call	_printf	;wreg free
  2064                           
  2065                           ;main.c: 526: break;
  2066  00FDDE  D78D               	goto	l2256
  2067  00FDE0                     l2292:
  2068                           
  2069                           ;main.c: 529: printf("ESKA without cap");
  2070  00FDE0  0E33               	movlw	low STR_15
  2071  00FDE2  6E0D               	movwf	printf@f,c
  2072  00FDE4  0EFF               	movlw	high STR_15
  2073  00FDE6  6E0E               	movwf	printf@f+1,c
  2074  00FDE8  ECC1  F079         	call	_printf	;wreg free
  2075                           
  2076                           ;main.c: 530: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2077  00FDEC  0EC0               	movlw	192
  2078  00FDEE  EC0F  F076         	call	_lcdInst
  2079  00FDF2  0E21               	movlw	33
  2080  00FDF4  6E21               	movwf	??_main& (0+255),c
  2081  00FDF6  0E76               	movlw	118
  2082  00FDF8                     u1877:
  2083  00FDF8  2EE8               	decfsz	wreg,f,c
  2084  00FDFA  D7FE               	bra	u1877
  2085  00FDFC  2E21               	decfsz	??_main& (0+255),f,c
  2086  00FDFE  D7FC               	bra	u1877
  2087  00FE00  D000               	nop2	
  2088                           
  2089                           ;main.c: 531: printf("(bin #4): %d", binsCount[3]);
  2090  00FE02  0EB7               	movlw	low STR_16
  2091  00FE04  6E0D               	movwf	printf@f,c
  2092  00FE06  0EFF               	movlw	high STR_16
  2093  00FE08  6E0E               	movwf	printf@f+1,c
  2094  00FE0A  C068  F00F         	movff	main@binsCount+6,?_printf+2
  2095  00FE0E  C069  F010         	movff	main@binsCount+7,?_printf+3
  2096  00FE12  ECC1  F079         	call	_printf	;wreg free
  2097                           
  2098                           ;main.c: 532: break;
  2099  00FE16  D771               	goto	l2256
  2100  00FE18                     l2300:
  2101                           
  2102                           ;main.c: 535: printf("Total number of  ");
  2103  00FE18  0EEE               	movlw	low STR_17
  2104  00FE1A  6E0D               	movwf	printf@f,c
  2105  00FE1C  0EFE               	movlw	high STR_17
  2106  00FE1E  6E0E               	movwf	printf@f+1,c
  2107  00FE20  ECC1  F079         	call	_printf	;wreg free
  2108                           
  2109                           ;main.c: 536: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2110  00FE24  0EC0               	movlw	192
  2111  00FE26  EC0F  F076         	call	_lcdInst
  2112  00FE2A  0E21               	movlw	33
  2113  00FE2C  6E21               	movwf	??_main& (0+255),c
  2114  00FE2E  0E76               	movlw	118
  2115  00FE30                     u1887:
  2116  00FE30  2EE8               	decfsz	wreg,f,c
  2117  00FE32  D7FE               	bra	u1887
  2118  00FE34  2E21               	decfsz	??_main& (0+255),f,c
  2119  00FE36  D7FC               	bra	u1887
  2120  00FE38  D000               	nop2	
  2121                           
  2122                           ;main.c: 537: printf("bottles: %d", totalCount);
  2123  00FE3A  0EDD               	movlw	low STR_18
  2124  00FE3C  6E0D               	movwf	printf@f,c
  2125  00FE3E  0EFF               	movlw	high STR_18
  2126  00FE40  6E0E               	movwf	printf@f+1,c
  2127  00FE42  C035  F00F         	movff	main@totalCount,?_printf+2
  2128  00FE46  C036  F010         	movff	main@totalCount+1,?_printf+3
  2129  00FE4A  ECC1  F079         	call	_printf	;wreg free
  2130                           
  2131                           ;main.c: 538: break;
  2132  00FE4E  D755               	goto	l2256
  2133  00FE50                     l2308:
  2134                           
  2135                           ;main.c: 541: printf("Total time taken: ");
  2136  00FE50  0EDB               	movlw	low STR_19
  2137  00FE52  6E0D               	movwf	printf@f,c
  2138  00FE54  0EFE               	movlw	high STR_19
  2139  00FE56  6E0E               	movwf	printf@f+1,c
  2140  00FE58  ECC1  F079         	call	_printf	;wreg free
  2141                           
  2142                           ;main.c: 542: lcdInst(0b11000000);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2143  00FE5C  0EC0               	movlw	192
  2144  00FE5E  EC0F  F076         	call	_lcdInst
  2145  00FE62  0E21               	movlw	33
  2146  00FE64  6E21               	movwf	??_main& (0+255),c
  2147  00FE66  0E76               	movlw	118
  2148  00FE68                     u1897:
  2149  00FE68  2EE8               	decfsz	wreg,f,c
  2150  00FE6A  D7FE               	bra	u1897
  2151  00FE6C  2E21               	decfsz	??_main& (0+255),f,c
  2152  00FE6E  D7FC               	bra	u1897
  2153  00FE70  D000               	nop2	
  2154                           
  2155                           ;main.c: 543: printf("%02x min. %02x sec.", finalTime[1], finalTime[0]);
  2156  00FE72  0EC7               	movlw	low STR_20
  2157  00FE74  6E0D               	movwf	printf@f,c
  2158  00FE76  0EFE               	movlw	high STR_20
  2159  00FE78  6E0E               	movwf	printf@f+1,c
  2160  00FE7A  C060  F00F         	movff	main@finalTime+1,?_printf+2
  2161  00FE7E  6A10               	clrf	?_printf+3,c
  2162  00FE80  C05F  F011         	movff	main@finalTime,?_printf+4
  2163  00FE84  6A12               	clrf	?_printf+5,c
  2164  00FE86  ECC1  F079         	call	_printf	;wreg free
  2165                           
  2166                           ;main.c: 545: }
  2167                           
  2168                           ;main.c: 544: break;
  2169  00FE8A  D737               	goto	l2256
  2170  00FE8C                     l2318:
  2171  00FE8C  5038               	movf	main@keypress_364,w,c
  2172                           
  2173                           ; Switch size 1, requested type "space"
  2174                           ; Number of cases is 6, Range of values is 1 to 10
  2175                           ; switch strategies available:
  2176                           ; Name         Instructions Cycles
  2177                           ; simple_byte           19    10 (average)
  2178                           ;	Chosen strategy is simple_byte
  2179  00FE8E  0A01               	xorlw	1	; case 1
  2180  00FE90  B4D8               	btfsc	status,2,c
  2181  00FE92  D752               	goto	l2268
  2182  00FE94  0A03               	xorlw	3	; case 2
  2183  00FE96  B4D8               	btfsc	status,2,c
  2184  00FE98  D76B               	goto	l2276
  2185  00FE9A  0A07               	xorlw	7	; case 5
  2186  00FE9C  B4D8               	btfsc	status,2,c
  2187  00FE9E  D784               	goto	l2284
  2188  00FEA0  0A03               	xorlw	3	; case 6
  2189  00FEA2  B4D8               	btfsc	status,2,c
  2190  00FEA4  D79D               	goto	l2292
  2191  00FEA6  0A0F               	xorlw	15	; case 9
  2192  00FEA8  B4D8               	btfsc	status,2,c
  2193  00FEAA  D7B6               	goto	l2300
  2194  00FEAC  0A03               	xorlw	3	; case 10
  2195  00FEAE  B4D8               	btfsc	status,2,c
  2196  00FEB0  D7CF               	goto	l2308
  2197  00FEB2  D723               	goto	l2256
  2198  00FEB4                     __end_of_main:
  2199                           	opt stack 0
  2200                           tblptru	equ	0xFF8
  2201                           intcon	equ	0xFF2
  2202                           postinc0	equ	0xFEE
  2203                           wreg	equ	0xFE8
  2204                           plusw1	equ	0xFE3
  2205                           plusw2	equ	0xFDB
  2206                           status	equ	0xFD8
  2207                           
  2208 ;; *************** function _tca_select *****************
  2209 ;; Defined at:
  2210 ;;		line 140 in file "main.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  i               1    wreg     unsigned char 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  i               1    6[COMRAM] unsigned char 
  2215 ;; Return value:  Size  Location     Type
  2216 ;;                  1    wreg      void 
  2217 ;; Registers used:
  2218 ;;		wreg, status,2, status,0, cstack
  2219 ;; Tracked objects:
  2220 ;;		On entry : 0/0
  2221 ;;		On exit  : 0/0
  2222 ;;		Unchanged: 0/0
  2223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;Total ram usage:        4 bytes
  2229 ;; Hardware stack levels used:    1
  2230 ;; Hardware stack levels required when called:    2
  2231 ;; This function calls:
  2232 ;;		_I2C_Master_Start
  2233 ;;		_I2C_Master_Stop
  2234 ;;		_I2C_Master_Write
  2235 ;; This function is called by:
  2236 ;;		_main
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text1
  2241  00ED64                     __ptext1:
  2242                           	opt stack 0
  2243  00ED64                     _tca_select:
  2244                           	opt stack 28
  2245                           
  2246                           ;incstack = 0
  2247                           ;tca_select@i stored from wreg
  2248  00ED64  6E07               	movwf	tca_select@i,c
  2249                           
  2250                           ;main.c: 141: I2C_Master_Start();
  2251  00ED66  EC02  F076         	call	_I2C_Master_Start	;wreg free
  2252                           
  2253                           ;main.c: 142: I2C_Master_Write(0b11100000);
  2254  00ED6A  0E00               	movlw	0
  2255  00ED6C  6E03               	movwf	I2C_Master_Write@d+1,c
  2256  00ED6E  0EE0               	movlw	224
  2257  00ED70  6E02               	movwf	I2C_Master_Write@d,c
  2258  00ED72  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2259                           
  2260                           ;main.c: 143: I2C_Master_Write(1 << i);
  2261  00ED76  C007  F004         	movff	tca_select@i,??_tca_select
  2262  00ED7A  0E01               	movlw	1
  2263  00ED7C  6E05               	movwf	(??_tca_select+1)& (0+255),c
  2264  00ED7E  0E00               	movlw	0
  2265  00ED80  6E06               	movwf	(??_tca_select+2)& (0+255),c
  2266  00ED82  2A04               	incf	??_tca_select,f,c
  2267  00ED84  D003               	goto	u1154
  2268  00ED86                     u1155:
  2269  00ED86  90D8               	bcf	status,0,c
  2270  00ED88  3605               	rlcf	??_tca_select+1,f,c
  2271  00ED8A  3606               	rlcf	??_tca_select+2,f,c
  2272  00ED8C                     u1154:
  2273  00ED8C  2E04               	decfsz	??_tca_select,f,c
  2274  00ED8E  D7FB               	goto	u1155
  2275  00ED90  C005  F002         	movff	??_tca_select+1,I2C_Master_Write@d
  2276  00ED94  C006  F003         	movff	??_tca_select+2,I2C_Master_Write@d+1
  2277  00ED98  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2278                           
  2279                           ;main.c: 144: I2C_Master_Stop();
  2280  00ED9C  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  2281  00EDA0  0012               	return		;funcret
  2282  00EDA2                     __end_of_tca_select:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           intcon	equ	0xFF2
  2286                           postinc0	equ	0xFEE
  2287                           wreg	equ	0xFE8
  2288                           plusw1	equ	0xFE3
  2289                           plusw2	equ	0xFDB
  2290                           status	equ	0xFD8
  2291                           
  2292 ;; *************** function _stop_rotate *****************
  2293 ;; Defined at:
  2294 ;;		line 47 in file "main.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		None
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2312 ;;Total ram usage:        0 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text2
  2322  00EC00                     __ptext2:
  2323                           	opt stack 0
  2324  00EC00                     _stop_rotate:
  2325                           	opt stack 30
  2326                           
  2327                           ;main.c: 48: LATEbits.LATE2 = 1;
  2328                           
  2329                           ;incstack = 0
  2330  00EC00  848D               	bsf	3981,2,c	;volatile
  2331  00EC02  0012               	return		;funcret
  2332  00EC04                     __end_of_stop_rotate:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           intcon	equ	0xFF2
  2336                           postinc0	equ	0xFEE
  2337                           wreg	equ	0xFE8
  2338                           plusw1	equ	0xFE3
  2339                           plusw2	equ	0xFDB
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _set_time *****************
  2343 ;; Defined at:
  2344 ;;		line 20 in file "main.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  i               1    3[COMRAM] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0, cstack
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;Total ram usage:        1 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    2
  2365 ;; This function calls:
  2366 ;;		_I2C_Master_Start
  2367 ;;		_I2C_Master_Stop
  2368 ;;		_I2C_Master_Write
  2369 ;; This function is called by:
  2370 ;;		_main
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text3
  2375  00ED26                     __ptext3:
  2376                           	opt stack 0
  2377  00ED26                     _set_time:
  2378                           	opt stack 28
  2379                           
  2380                           ;main.c: 21: I2C_Master_Start();
  2381                           
  2382                           ;incstack = 0
  2383  00ED26  EC02  F076         	call	_I2C_Master_Start	;wreg free
  2384                           
  2385                           ;main.c: 22: I2C_Master_Write(0b11010000);
  2386  00ED2A  0E00               	movlw	0
  2387  00ED2C  6E03               	movwf	I2C_Master_Write@d+1,c
  2388  00ED2E  0ED0               	movlw	208
  2389  00ED30  6E02               	movwf	I2C_Master_Write@d,c
  2390  00ED32  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2391                           
  2392                           ;main.c: 23: I2C_Master_Write(0x00);
  2393  00ED36  0E00               	movlw	0
  2394  00ED38  6E03               	movwf	I2C_Master_Write@d+1,c
  2395  00ED3A  0E00               	movlw	0
  2396  00ED3C  6E02               	movwf	I2C_Master_Write@d,c
  2397  00ED3E  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2398                           
  2399                           ;main.c: 24: for(char i=0; i<2; i++){
  2400  00ED42  0E00               	movlw	0
  2401  00ED44  6E04               	movwf	set_time@i,c
  2402  00ED46                     l1814:
  2403  00ED46  0E01               	movlw	1
  2404  00ED48  6404               	cpfsgt	set_time@i,c
  2405  00ED4A  D001               	goto	l1818
  2406  00ED4C  D008               	goto	l1824
  2407  00ED4E                     l1818:
  2408                           
  2409                           ;main.c: 25: I2C_Master_Write(0x00);
  2410  00ED4E  0E00               	movlw	0
  2411  00ED50  6E03               	movwf	I2C_Master_Write@d+1,c
  2412  00ED52  0E00               	movlw	0
  2413  00ED54  6E02               	movwf	I2C_Master_Write@d,c
  2414  00ED56  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2415  00ED5A  2A04               	incf	set_time@i,f,c
  2416  00ED5C  D7F4               	goto	l1814
  2417  00ED5E                     l1824:
  2418                           
  2419                           ;main.c: 26: }
  2420                           ;main.c: 27: I2C_Master_Stop();
  2421  00ED5E  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  2422  00ED62  0012               	return		;funcret
  2423  00ED64                     __end_of_set_time:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           intcon	equ	0xFF2
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           plusw1	equ	0xFE3
  2430                           plusw2	equ	0xFDB
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function _rotate *****************
  2434 ;; Defined at:
  2435 ;;		line 43 in file "main.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;		None
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;		None
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  1    wreg      void 
  2442 ;; Registers used:
  2443 ;;		None
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2453 ;;Total ram usage:        0 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text4
  2463  00EBFC                     __ptext4:
  2464                           	opt stack 0
  2465  00EBFC                     _rotate:
  2466                           	opt stack 30
  2467                           
  2468                           ;main.c: 44: LATEbits.LATE2 = 0;
  2469                           
  2470                           ;incstack = 0
  2471  00EBFC  948D               	bcf	3981,2,c	;volatile
  2472  00EBFE  0012               	return		;funcret
  2473  00EC00                     __end_of_rotate:
  2474                           	opt stack 0
  2475                           tblptru	equ	0xFF8
  2476                           intcon	equ	0xFF2
  2477                           postinc0	equ	0xFEE
  2478                           wreg	equ	0xFE8
  2479                           plusw1	equ	0xFE3
  2480                           plusw2	equ	0xFDB
  2481                           status	equ	0xFD8
  2482                           
  2483 ;; *************** function _return_motors *****************
  2484 ;; Defined at:
  2485 ;;		line 96 in file "main.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  motor           1    wreg     unsigned char 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  motor           1    2[COMRAM] unsigned char 
  2490 ;;  i               1    3[COMRAM] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, status,0
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;Total ram usage:        4 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; This function calls:
  2507 ;;		Nothing
  2508 ;; This function is called by:
  2509 ;;		_main
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           	psect	text5
  2514  00F054                     __ptext5:
  2515                           	opt stack 0
  2516  00F054                     _return_motors:
  2517                           	opt stack 30
  2518                           
  2519                           ;incstack = 0
  2520                           ;return_motors@motor stored from wreg
  2521  00F054  6E03               	movwf	return_motors@motor,c
  2522                           
  2523                           ;main.c: 98: LATA = 0xFF;
  2524  00F056  6889               	setf	3977,c	;volatile
  2525                           
  2526                           ;main.c: 100: switch (motor){
  2527  00F058  D009               	goto	l1180
  2528  00F05A                     l82:
  2529                           
  2530                           ;main.c: 102: LATAbits.LATA0 = 1;
  2531  00F05A  8089               	bsf	3977,0,c	;volatile
  2532                           
  2533                           ;main.c: 103: LATAbits.LATA1 = 0;
  2534  00F05C  9289               	bcf	3977,1,c	;volatile
  2535                           
  2536                           ;main.c: 104: break;
  2537  00F05E  D010               	goto	l83
  2538  00F060                     l84:
  2539                           
  2540                           ;main.c: 106: LATAbits.LATA2 = 1;
  2541  00F060  8489               	bsf	3977,2,c	;volatile
  2542                           
  2543                           ;main.c: 107: LATAbits.LATA3 = 0;
  2544  00F062  9689               	bcf	3977,3,c	;volatile
  2545                           
  2546                           ;main.c: 108: break;
  2547  00F064  D00D               	goto	l83
  2548  00F066                     l85:
  2549                           
  2550                           ;main.c: 110: LATAbits.LATA4 = 1;
  2551  00F066  8889               	bsf	3977,4,c	;volatile
  2552                           
  2553                           ;main.c: 111: LATAbits.LATA5 = 0;
  2554  00F068  9A89               	bcf	3977,5,c	;volatile
  2555                           
  2556                           ;main.c: 113: }
  2557                           
  2558                           ;main.c: 112: break;
  2559  00F06A  D00A               	goto	l83
  2560  00F06C                     l1180:
  2561  00F06C  5003               	movf	return_motors@motor,w,c
  2562                           
  2563                           ; Switch size 1, requested type "space"
  2564                           ; Number of cases is 3, Range of values is 1 to 3
  2565                           ; switch strategies available:
  2566                           ; Name         Instructions Cycles
  2567                           ; simple_byte           10     6 (average)
  2568                           ;	Chosen strategy is simple_byte
  2569  00F06E  0A01               	xorlw	1	; case 1
  2570  00F070  B4D8               	btfsc	status,2,c
  2571  00F072  D7F3               	goto	l82
  2572  00F074  0A03               	xorlw	3	; case 2
  2573  00F076  B4D8               	btfsc	status,2,c
  2574  00F078  D7F3               	goto	l84
  2575  00F07A  0A01               	xorlw	1	; case 3
  2576  00F07C  B4D8               	btfsc	status,2,c
  2577  00F07E  D7F3               	goto	l85
  2578  00F080                     l83:
  2579                           
  2580                           ;main.c: 114: LATAbits.LATA6 = LATAbits.LATA6 ^ 0b1;
  2581  00F080  BC89               	btfsc	3977,6,c	;volatile
  2582  00F082  D002               	goto	u320
  2583  00F084  8C89               	bsf	3977,6,c	;volatile
  2584  00F086  D001               	goto	u335
  2585  00F088                     u320:
  2586  00F088  9C89               	bcf	3977,6,c	;volatile
  2587  00F08A                     u335:
  2588                           
  2589                           ;main.c: 115: LATAbits.LATA7 = LATAbits.LATA7 ^ 0b1;
  2590  00F08A  BE89               	btfsc	3977,7,c	;volatile
  2591  00F08C  D002               	goto	u340
  2592  00F08E  8E89               	bsf	3977,7,c	;volatile
  2593  00F090  D001               	goto	l1182
  2594  00F092                     u340:
  2595  00F092  9E89               	bcf	3977,7,c	;volatile
  2596  00F094                     l1182:
  2597                           
  2598                           ;main.c: 116: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  2599  00F094  0E00               	movlw	0
  2600  00F096  6E04               	movwf	return_motors@i,c
  2601  00F098                     l1184:
  2602  00F098  0E09               	movlw	9
  2603  00F09A  6404               	cpfsgt	return_motors@i,c
  2604  00F09C  D001               	goto	l1188
  2605  00F09E  D00E               	goto	l1192
  2606  00F0A0                     l1188:
  2607  00F0A0  0E02               	movlw	2
  2608  00F0A2  6E02               	movwf	(??_return_motors+1)& (0+255),c
  2609  00F0A4  0E3F               	movlw	63
  2610  00F0A6  6E01               	movwf	??_return_motors& (0+255),c
  2611  00F0A8  0E2B               	movlw	43
  2612  00F0AA                     u1907:
  2613  00F0AA  2EE8               	decfsz	wreg,f,c
  2614  00F0AC  D7FE               	bra	u1907
  2615  00F0AE  2E01               	decfsz	??_return_motors& (0+255),f,c
  2616  00F0B0  D7FC               	bra	u1907
  2617  00F0B2  2E02               	decfsz	(??_return_motors+1)& (0+255),f,c
  2618  00F0B4  D7FA               	bra	u1907
  2619  00F0B6  F000               	nop	
  2620  00F0B8  2A04               	incf	return_motors@i,f,c
  2621  00F0BA  D7EE               	goto	l1184
  2622  00F0BC                     l1192:
  2623                           
  2624                           ;main.c: 117: _delay((unsigned long)((210)*(10000000/4000.0)));
  2625  00F0BC  0E03               	movlw	3
  2626  00F0BE  6E02               	movwf	(??_return_motors+1)& (0+255),c
  2627  00F0C0  0EAA               	movlw	170
  2628  00F0C2  6E01               	movwf	??_return_motors& (0+255),c
  2629  00F0C4  0ECE               	movlw	206
  2630  00F0C6                     u1917:
  2631  00F0C6  2EE8               	decfsz	wreg,f,c
  2632  00F0C8  D7FE               	bra	u1917
  2633  00F0CA  2E01               	decfsz	??_return_motors& (0+255),f,c
  2634  00F0CC  D7FC               	bra	u1917
  2635  00F0CE  2E02               	decfsz	(??_return_motors+1)& (0+255),f,c
  2636  00F0D0  D7FA               	bra	u1917
  2637  00F0D2  0012               	return	
  2638  00F0D4                     __end_of_return_motors:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           plusw1	equ	0xFE3
  2645                           plusw2	equ	0xFDB
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _read_sensor *****************
  2649 ;; Defined at:
  2650 ;;		line 56 in file "main.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  r               2    3[COMRAM] PTR unsigned char 
  2653 ;;		 -> main@R3(2), main@R2(2), main@R1(2), 
  2654 ;;  g               2    5[COMRAM] PTR unsigned char 
  2655 ;;		 -> main@G3(2), main@G2(2), main@G1(2), 
  2656 ;;  b               2    7[COMRAM] PTR unsigned char 
  2657 ;;		 -> main@B3(2), main@B2(2), main@B1(2), 
  2658 ;;  c               2    9[COMRAM] PTR unsigned char 
  2659 ;;		 -> main@C3(2), main@C2(2), main@C1(2), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2671 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;Total ram usage:        8 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		_I2C_Master_Read
  2680 ;;		_I2C_Master_Start
  2681 ;;		_I2C_Master_Stop
  2682 ;;		_I2C_Master_Write
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text6
  2689  00F294                     __ptext6:
  2690                           	opt stack 0
  2691  00F294                     _read_sensor:
  2692                           	opt stack 28
  2693                           
  2694                           ;main.c: 58: I2C_Master_Start();
  2695                           
  2696                           ;incstack = 0
  2697  00F294  EC02  F076         	call	_I2C_Master_Start	;wreg free
  2698                           
  2699                           ;main.c: 59: I2C_Master_Write(0b01010010);
  2700  00F298  0E00               	movlw	0
  2701  00F29A  6E03               	movwf	I2C_Master_Write@d+1,c
  2702  00F29C  0E52               	movlw	82
  2703  00F29E  6E02               	movwf	I2C_Master_Write@d,c
  2704  00F2A0  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2705                           
  2706                           ;main.c: 60: I2C_Master_Write(0b10000000);
  2707  00F2A4  0E00               	movlw	0
  2708  00F2A6  6E03               	movwf	I2C_Master_Write@d+1,c
  2709  00F2A8  0E80               	movlw	128
  2710  00F2AA  6E02               	movwf	I2C_Master_Write@d,c
  2711  00F2AC  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2712                           
  2713                           ;main.c: 61: I2C_Master_Write(0b00000011);
  2714  00F2B0  0E00               	movlw	0
  2715  00F2B2  6E03               	movwf	I2C_Master_Write@d+1,c
  2716  00F2B4  0E03               	movlw	3
  2717  00F2B6  6E02               	movwf	I2C_Master_Write@d,c
  2718  00F2B8  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2719                           
  2720                           ;main.c: 62: I2C_Master_Stop();
  2721  00F2BC  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  2722                           
  2723                           ;main.c: 64: I2C_Master_Start();
  2724  00F2C0  EC02  F076         	call	_I2C_Master_Start	;wreg free
  2725                           
  2726                           ;main.c: 65: I2C_Master_Write(0b01010010);
  2727  00F2C4  0E00               	movlw	0
  2728  00F2C6  6E03               	movwf	I2C_Master_Write@d+1,c
  2729  00F2C8  0E52               	movlw	82
  2730  00F2CA  6E02               	movwf	I2C_Master_Write@d,c
  2731  00F2CC  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2732                           
  2733                           ;main.c: 66: I2C_Master_Write(0b10110100);
  2734  00F2D0  0E00               	movlw	0
  2735  00F2D2  6E03               	movwf	I2C_Master_Write@d+1,c
  2736  00F2D4  0EB4               	movlw	180
  2737  00F2D6  6E02               	movwf	I2C_Master_Write@d,c
  2738  00F2D8  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2739                           
  2740                           ;main.c: 70: I2C_Master_Start();
  2741  00F2DC  EC02  F076         	call	_I2C_Master_Start	;wreg free
  2742                           
  2743                           ;main.c: 71: I2C_Master_Write(0b01010011);
  2744  00F2E0  0E00               	movlw	0
  2745  00F2E2  6E03               	movwf	I2C_Master_Write@d+1,c
  2746  00F2E4  0E53               	movlw	83
  2747  00F2E6  6E02               	movwf	I2C_Master_Write@d,c
  2748  00F2E8  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  2749                           
  2750                           ;main.c: 72: c[0] = I2C_Master_Read(1);
  2751  00F2EC  0E01               	movlw	1
  2752  00F2EE  EC6D  F076         	call	_I2C_Master_Read
  2753  00F2F2  C00A  FFD9         	movff	read_sensor@c,fsr2l
  2754  00F2F6  C00B  FFDA         	movff	read_sensor@c+1,fsr2h
  2755  00F2FA  6EDF               	movwf	indf2,c
  2756                           
  2757                           ;main.c: 73: c[1] = I2C_Master_Read(1);
  2758  00F2FC  EE20 F001          	lfsr	2,1
  2759  00F300  500A               	movf	read_sensor@c,w,c
  2760  00F302  26D9               	addwf	fsr2l,f,c
  2761  00F304  500B               	movf	read_sensor@c+1,w,c
  2762  00F306  22DA               	addwfc	fsr2h,f,c
  2763  00F308  0E01               	movlw	1
  2764  00F30A  EC6D  F076         	call	_I2C_Master_Read
  2765  00F30E  6EDF               	movwf	indf2,c
  2766                           
  2767                           ;main.c: 75: r[0] = I2C_Master_Read(1);
  2768  00F310  0E01               	movlw	1
  2769  00F312  EC6D  F076         	call	_I2C_Master_Read
  2770  00F316  C004  FFD9         	movff	read_sensor@r,fsr2l
  2771  00F31A  C005  FFDA         	movff	read_sensor@r+1,fsr2h
  2772  00F31E  6EDF               	movwf	indf2,c
  2773                           
  2774                           ;main.c: 76: r[1] = I2C_Master_Read(1);
  2775  00F320  EE20 F001          	lfsr	2,1
  2776  00F324  5004               	movf	read_sensor@r,w,c
  2777  00F326  26D9               	addwf	fsr2l,f,c
  2778  00F328  5005               	movf	read_sensor@r+1,w,c
  2779  00F32A  22DA               	addwfc	fsr2h,f,c
  2780  00F32C  0E01               	movlw	1
  2781  00F32E  EC6D  F076         	call	_I2C_Master_Read
  2782  00F332  6EDF               	movwf	indf2,c
  2783                           
  2784                           ;main.c: 78: g[0] = I2C_Master_Read(1);
  2785  00F334  0E01               	movlw	1
  2786  00F336  EC6D  F076         	call	_I2C_Master_Read
  2787  00F33A  C006  FFD9         	movff	read_sensor@g,fsr2l
  2788  00F33E  C007  FFDA         	movff	read_sensor@g+1,fsr2h
  2789  00F342  6EDF               	movwf	indf2,c
  2790                           
  2791                           ;main.c: 79: g[1] = I2C_Master_Read(1);
  2792  00F344  EE20 F001          	lfsr	2,1
  2793  00F348  5006               	movf	read_sensor@g,w,c
  2794  00F34A  26D9               	addwf	fsr2l,f,c
  2795  00F34C  5007               	movf	read_sensor@g+1,w,c
  2796  00F34E  22DA               	addwfc	fsr2h,f,c
  2797  00F350  0E01               	movlw	1
  2798  00F352  EC6D  F076         	call	_I2C_Master_Read
  2799  00F356  6EDF               	movwf	indf2,c
  2800                           
  2801                           ;main.c: 81: b[0] = I2C_Master_Read(1);
  2802  00F358  0E01               	movlw	1
  2803  00F35A  EC6D  F076         	call	_I2C_Master_Read
  2804  00F35E  C008  FFD9         	movff	read_sensor@b,fsr2l
  2805  00F362  C009  FFDA         	movff	read_sensor@b+1,fsr2h
  2806  00F366  6EDF               	movwf	indf2,c
  2807                           
  2808                           ;main.c: 82: b[1] = I2C_Master_Read(0);
  2809  00F368  EE20 F001          	lfsr	2,1
  2810  00F36C  5008               	movf	read_sensor@b,w,c
  2811  00F36E  26D9               	addwf	fsr2l,f,c
  2812  00F370  5009               	movf	read_sensor@b+1,w,c
  2813  00F372  22DA               	addwfc	fsr2h,f,c
  2814  00F374  0E00               	movlw	0
  2815  00F376  EC6D  F076         	call	_I2C_Master_Read
  2816  00F37A  6EDF               	movwf	indf2,c
  2817                           
  2818                           ;main.c: 83: I2C_Master_Stop();
  2819  00F37C  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  2820  00F380  0012               	return	
  2821  00F382                     __end_of_read_sensor:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           intcon	equ	0xFF2
  2825                           postinc0	equ	0xFEE
  2826                           wreg	equ	0xFE8
  2827                           plusw1	equ	0xFE3
  2828                           indf2	equ	0xFDF
  2829                           plusw2	equ	0xFDB
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _printf *****************
  2835 ;; Defined at:
  2836 ;;		line 464 in file "C:\Users\Andrew\Desktop\xc8\sources\common\doprnt.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2839 ;;		 -> STR_20(20), STR_19(19), STR_18(12), STR_17(18), 
  2840 ;;		 -> STR_16(13), STR_15(17), STR_14(13), STR_13(14), 
  2841 ;;		 -> STR_12(13), STR_11(16), STR_10(15), STR_9(13), 
  2842 ;;		 -> STR_8(12), STR_7(17), STR_6(14), STR_5(14), 
  2843 ;;		 -> STR_4(17), STR_3(9), STR_2(12), STR_1(16), 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  idx             1   22[COMRAM] unsigned char 
  2846 ;;  tmpval          4    0        struct .
  2847 ;;  cp              3    0        PTR const unsigned char 
  2848 ;;  width           2   29[COMRAM] int 
  2849 ;;  val             2   26[COMRAM] unsigned int 
  2850 ;;  ap              2   23[COMRAM] PTR void [1]
  2851 ;;		 -> ?_printf(2), 
  2852 ;;  len             2    0        unsigned int 
  2853 ;;  c               1   31[COMRAM] char 
  2854 ;;  flag            1   28[COMRAM] unsigned char 
  2855 ;;  prec            1   25[COMRAM] char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  2   12[COMRAM] int 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2865 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;Total ram usage:       20 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    2
  2872 ;; This function calls:
  2873 ;;		___lwdiv
  2874 ;;		___lwmod
  2875 ;;		___wmul
  2876 ;;		_isdigit
  2877 ;;		_putch
  2878 ;; This function is called by:
  2879 ;;		_main
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text7
  2884  00F382                     __ptext7:
  2885                           	opt stack 0
  2886  00F382                     _printf:
  2887                           	opt stack 28
  2888                           
  2889                           ;doprnt.c: 466: va_list ap;
  2890                           ;doprnt.c: 499: signed char c;
  2891                           ;doprnt.c: 501: int width;
  2892                           ;doprnt.c: 506: signed char prec;
  2893                           ;doprnt.c: 508: unsigned char flag;
  2894                           ;doprnt.c: 523: union {
  2895                           ;doprnt.c: 524: unsigned long vd;
  2896                           ;doprnt.c: 525: double integ;
  2897                           ;doprnt.c: 526: } tmpval;
  2898                           ;doprnt.c: 528: unsigned int val;
  2899                           ;doprnt.c: 529: unsigned len;
  2900                           ;doprnt.c: 530: const char * cp;
  2901                           ;doprnt.c: 533: *ap = __va_start();
  2902                           
  2903                           ;incstack = 0
  2904  00F382  0E0F               	movlw	low (?_printf+2)
  2905  00F384  6E18               	movwf	printf@ap,c
  2906  00F386  0E00               	movlw	high (?_printf+2)
  2907  00F388  6E19               	movwf	printf@ap+1,c
  2908                           
  2909                           ;doprnt.c: 536: while(c = *f++) {
  2910  00F38A  D174               	goto	l2006
  2911  00F38C                     l1880:
  2912                           
  2913                           ;doprnt.c: 538: if(c != '%')
  2914  00F38C  0E25               	movlw	37
  2915  00F38E  1820               	xorwf	printf@c,w,c
  2916  00F390  B4D8               	btfsc	status,2,c
  2917  00F392  D004               	goto	l1884
  2918                           
  2919                           ;doprnt.c: 540: {
  2920                           ;doprnt.c: 541: (putch(c) );
  2921  00F394  5020               	movf	printf@c,w,c
  2922  00F396  EC15  F076         	call	_putch
  2923                           
  2924                           ;doprnt.c: 542: continue;
  2925  00F39A  D16C               	goto	l2006
  2926  00F39C                     l1884:
  2927                           
  2928                           ;doprnt.c: 543: }
  2929                           ;doprnt.c: 546: width = 0;
  2930  00F39C  0E00               	movlw	0
  2931  00F39E  6E1F               	movwf	printf@width+1,c
  2932  00F3A0  0E00               	movlw	0
  2933  00F3A2  6E1E               	movwf	printf@width,c
  2934                           
  2935                           ;doprnt.c: 548: flag = 0;
  2936  00F3A4  0E00               	movlw	0
  2937  00F3A6  6E1D               	movwf	printf@flag,c
  2938                           
  2939                           ;doprnt.c: 551: switch(*f) {
  2940                           
  2941                           ;doprnt.c: 550: for(;;) {
  2942  00F3A8  D003               	goto	l1890
  2943  00F3AA                     l1886:
  2944                           
  2945                           ;doprnt.c: 580: flag |= 0x04;
  2946  00F3AA  841D               	bsf	printf@flag,2,c
  2947                           
  2948                           ;doprnt.c: 581: f++;
  2949  00F3AC  4A0D               	infsnz	printf@f,f,c
  2950  00F3AE  2A0E               	incf	printf@f+1,f,c
  2951  00F3B0                     l1890:
  2952  00F3B0  C00D  FFF6         	movff	printf@f,tblptrl
  2953  00F3B4  C00E  FFF7         	movff	printf@f+1,tblptrh
  2954  00F3B8                     	if	0	;tblptru may be non-zero
  2955  00F3B8                     	endif
  2956  00F3B8                     	if	0	;tblptru may be non-zero
  2957  00F3B8                     	endif
  2958  00F3B8  0008               	tblrd		*
  2959  00F3BA  50F5               	movf	tablat,w,c
  2960                           
  2961                           ; Switch size 1, requested type "space"
  2962                           ; Number of cases is 1, Range of values is 48 to 48
  2963                           ; switch strategies available:
  2964                           ; Name         Instructions Cycles
  2965                           ; simple_byte            4     3 (average)
  2966                           ;	Chosen strategy is simple_byte
  2967  00F3BC  0A30               	xorlw	48	; case 48
  2968  00F3BE  B4D8               	btfsc	status,2,c
  2969  00F3C0  D7F4               	goto	l1886
  2970                           
  2971                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2972                           
  2973                           ;doprnt.c: 586: }
  2974                           
  2975                           ;doprnt.c: 585: break;
  2976  00F3C2  C00D  FFF6         	movff	printf@f,tblptrl
  2977  00F3C6  C00E  FFF7         	movff	printf@f+1,tblptrh
  2978  00F3CA                     	if	0	;tblptru may be non-zero
  2979  00F3CA                     	endif
  2980  00F3CA                     	if	0	;tblptru may be non-zero
  2981  00F3CA                     	endif
  2982  00F3CA  0008               	tblrd		*
  2983  00F3CC  50F5               	movf	tablat,w,c
  2984  00F3CE  EC3B  F076         	call	_isdigit
  2985  00F3D2  A0D8               	btfss	status,0,c
  2986  00F3D4  D035               	goto	l1908
  2987                           
  2988                           ;doprnt.c: 598: width = 0;
  2989  00F3D6  0E00               	movlw	0
  2990  00F3D8  6E1F               	movwf	printf@width+1,c
  2991  00F3DA  0E00               	movlw	0
  2992  00F3DC  6E1E               	movwf	printf@width,c
  2993  00F3DE                     l1896:
  2994                           
  2995                           ;doprnt.c: 600: width *= 10;
  2996  00F3DE  C01E  F001         	movff	printf@width,___wmul@multiplier
  2997  00F3E2  C01F  F002         	movff	printf@width+1,___wmul@multiplier+1
  2998  00F3E6  0E00               	movlw	0
  2999  00F3E8  6E04               	movwf	___wmul@multiplicand+1,c
  3000  00F3EA  0E0A               	movlw	10
  3001  00F3EC  6E03               	movwf	___wmul@multiplicand,c
  3002  00F3EE  EC80  F076         	call	___wmul	;wreg free
  3003  00F3F2  C001  F01E         	movff	?___wmul,printf@width
  3004  00F3F6  C002  F01F         	movff	?___wmul+1,printf@width+1
  3005                           
  3006                           ;doprnt.c: 601: width += *f++ - '0';
  3007  00F3FA  0ED0               	movlw	208
  3008  00F3FC  6E13               	movwf	??_printf& (0+255),c
  3009  00F3FE  0EFF               	movlw	255
  3010  00F400  6E14               	movwf	(??_printf+1)& (0+255),c
  3011  00F402  C00D  FFF6         	movff	printf@f,tblptrl
  3012  00F406  C00E  FFF7         	movff	printf@f+1,tblptrh
  3013  00F40A                     	if	0	;tblptru may be non-zero
  3014  00F40A                     	endif
  3015  00F40A                     	if	0	;tblptru may be non-zero
  3016  00F40A                     	endif
  3017  00F40A  0008               	tblrd		*
  3018  00F40C  50F5               	movf	tablat,w,c
  3019  00F40E  6E15               	movwf	(??_printf+2)& (0+255),c
  3020  00F410  6A16               	clrf	(??_printf+3)& (0+255),c
  3021  00F412  5013               	movf	??_printf,w,c
  3022  00F414  2615               	addwf	??_printf+2,f,c
  3023  00F416  5014               	movf	??_printf+1,w,c
  3024  00F418  2216               	addwfc	??_printf+3,f,c
  3025  00F41A  5015               	movf	??_printf+2,w,c
  3026  00F41C  261E               	addwf	printf@width,f,c
  3027  00F41E  5016               	movf	??_printf+3,w,c
  3028  00F420  221F               	addwfc	printf@width+1,f,c
  3029  00F422  4A0D               	infsnz	printf@f,f,c
  3030  00F424  2A0E               	incf	printf@f+1,f,c
  3031                           
  3032                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3033  00F426  C00D  FFF6         	movff	printf@f,tblptrl
  3034  00F42A  C00E  FFF7         	movff	printf@f+1,tblptrh
  3035  00F42E                     	if	0	;tblptru may be non-zero
  3036  00F42E                     	endif
  3037  00F42E                     	if	0	;tblptru may be non-zero
  3038  00F42E                     	endif
  3039  00F42E  0008               	tblrd		*
  3040  00F430  50F5               	movf	tablat,w,c
  3041  00F432  EC3B  F076         	call	_isdigit
  3042  00F436  A0D8               	btfss	status,0,c
  3043  00F438  D003               	goto	l1908
  3044  00F43A  D7D1               	goto	l1896
  3045  00F43C                     l1904:
  3046                           
  3047                           ;doprnt.c: 721: flag |= 0x80;
  3048  00F43C  8E1D               	bsf	printf@flag,7,c
  3049                           
  3050                           ;doprnt.c: 723: break;
  3051  00F43E  D017               	goto	l258
  3052  00F440                     l1908:
  3053  00F440  C00D  FFF6         	movff	printf@f,tblptrl
  3054  00F444  C00E  FFF7         	movff	printf@f+1,tblptrh
  3055  00F448  4A0D               	infsnz	printf@f,f,c
  3056  00F44A  2A0E               	incf	printf@f+1,f,c
  3057  00F44C                     	if	0	;tblptru may be non-zero
  3058  00F44C                     	endif
  3059  00F44C                     	if	0	;tblptru may be non-zero
  3060  00F44C                     	endif
  3061  00F44C  0008               	tblrd		*
  3062  00F44E  CFF5 F020          	movff	tablat,printf@c
  3063  00F452  5020               	movf	printf@c,w,c
  3064                           
  3065                           ; Switch size 1, requested type "space"
  3066                           ; Number of cases is 4, Range of values is 0 to 120
  3067                           ; switch strategies available:
  3068                           ; Name         Instructions Cycles
  3069                           ; simple_byte           13     7 (average)
  3070                           ;	Chosen strategy is simple_byte
  3071  00F454  0A00               	xorlw	0	; case 0
  3072  00F456  B4D8               	btfsc	status,2,c
  3073  00F458  0012               	return	
  3074  00F45A  0A64               	xorlw	100	; case 100
  3075  00F45C  B4D8               	btfsc	status,2,c
  3076  00F45E  D007               	goto	l258
  3077  00F460  0A0D               	xorlw	13	; case 105
  3078  00F462  B4D8               	btfsc	status,2,c
  3079  00F464  D004               	goto	l258
  3080  00F466  0A11               	xorlw	17	; case 120
  3081  00F468  B4D8               	btfsc	status,2,c
  3082  00F46A  D7E8               	goto	l1904
  3083  00F46C  D103               	goto	l2006
  3084  00F46E                     l258:
  3085                           
  3086                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3087  00F46E  BE1D               	btfsc	printf@flag,7,c
  3088  00F470  D015               	goto	l1920
  3089                           
  3090                           ;doprnt.c: 1253: {
  3091                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3092  00F472  C018  FFD9         	movff	printf@ap,fsr2l
  3093  00F476  C019  FFDA         	movff	printf@ap+1,fsr2h
  3094  00F47A  CFDE F01B          	movff	postinc2,printf@val
  3095  00F47E  CFDD F01C          	movff	postdec2,printf@val+1
  3096  00F482  0E02               	movlw	2
  3097  00F484  2618               	addwf	printf@ap,f,c
  3098  00F486  0E00               	movlw	0
  3099  00F488  2219               	addwfc	printf@ap+1,f,c
  3100                           
  3101                           ;doprnt.c: 1261: if((int)val < 0) {
  3102  00F48A  AE1C               	btfss	printf@val+1,7,c
  3103  00F48C  D044               	goto	l1954
  3104                           
  3105                           ;doprnt.c: 1262: flag |= 0x03;
  3106  00F48E  0E03               	movlw	3
  3107  00F490  121D               	iorwf	printf@flag,f,c
  3108                           
  3109                           ;doprnt.c: 1263: val = -val;
  3110  00F492  6C1B               	negf	printf@val,c
  3111  00F494  1E1C               	comf	printf@val+1,f,c
  3112  00F496  B0D8               	btfsc	status,0,c
  3113  00F498  2A1C               	incf	printf@val+1,f,c
  3114                           
  3115                           ;doprnt.c: 1264: }
  3116                           ;doprnt.c: 1266: }
  3117  00F49A  D03D               	goto	l1954
  3118  00F49C                     l1920:
  3119                           
  3120                           ;doprnt.c: 1268: else
  3121                           ;doprnt.c: 1273: {
  3122                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3123  00F49C  C018  FFD9         	movff	printf@ap,fsr2l
  3124  00F4A0  C019  FFDA         	movff	printf@ap+1,fsr2h
  3125  00F4A4  CFDE F01B          	movff	postinc2,printf@val
  3126  00F4A8  CFDD F01C          	movff	postdec2,printf@val+1
  3127  00F4AC  0E02               	movlw	2
  3128  00F4AE  2618               	addwf	printf@ap,f,c
  3129  00F4B0  0E00               	movlw	0
  3130  00F4B2  2219               	addwfc	printf@ap+1,f,c
  3131                           
  3132                           ;doprnt.c: 1287: }
  3133                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3134  00F4B4  D030               	goto	l1954
  3135  00F4B6                     l1924:
  3136                           
  3137                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3138  00F4B6  0E01               	movlw	1
  3139  00F4B8  6E20               	movwf	printf@c,c
  3140  00F4BA                     l1926:
  3141  00F4BA  0E05               	movlw	5
  3142  00F4BC  1820               	xorwf	printf@c,w,c
  3143  00F4BE  B4D8               	btfsc	status,2,c
  3144  00F4C0  D032               	goto	l1956
  3145                           
  3146                           ;doprnt.c: 1306: if(val < dpowers[c])
  3147  00F4C2  5020               	movf	printf@c,w,c
  3148  00F4C4  0D02               	mullw	2
  3149  00F4C6  0EB5               	movlw	low _dpowers
  3150  00F4C8  24F3               	addwf	prodl,w,c
  3151  00F4CA  6EF6               	movwf	tblptrl,c
  3152  00F4CC  0EFE               	movlw	high _dpowers
  3153  00F4CE  20F4               	addwfc	prodh,w,c
  3154  00F4D0  6EF7               	movwf	tblptrh,c
  3155  00F4D2                     	if	0	;There are less than 3 active tblptr bytes
  3156  00F4D2                     	endif
  3157  00F4D2  0009               	tblrd		*+
  3158  00F4D4  50F5               	movf	tablat,w,c
  3159  00F4D6  5C1B               	subwf	printf@val,w,c
  3160  00F4D8  0009               	tblrd		*+
  3161  00F4DA  50F5               	movf	tablat,w,c
  3162  00F4DC  581C               	subwfb	printf@val+1,w,c
  3163  00F4DE  A0D8               	btfss	status,0,c
  3164  00F4E0  D022               	goto	l1956
  3165                           
  3166                           ;doprnt.c: 1307: break;
  3167  00F4E2  2A20               	incf	printf@c,f,c
  3168  00F4E4  D7EA               	goto	l1926
  3169  00F4E6                     l1938:
  3170                           
  3171                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3172  00F4E6  0E01               	movlw	1
  3173  00F4E8  6E20               	movwf	printf@c,c
  3174  00F4EA                     l1940:
  3175  00F4EA  0E04               	movlw	4
  3176  00F4EC  1820               	xorwf	printf@c,w,c
  3177  00F4EE  B4D8               	btfsc	status,2,c
  3178  00F4F0  D01A               	goto	l1956
  3179                           
  3180                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3181  00F4F2  5020               	movf	printf@c,w,c
  3182  00F4F4  0D02               	mullw	2
  3183  00F4F6  0EBF               	movlw	low _hexpowers
  3184  00F4F8  24F3               	addwf	prodl,w,c
  3185  00F4FA  6EF6               	movwf	tblptrl,c
  3186  00F4FC  0EFE               	movlw	high _hexpowers
  3187  00F4FE  20F4               	addwfc	prodh,w,c
  3188  00F500  6EF7               	movwf	tblptrh,c
  3189  00F502                     	if	0	;There are less than 3 active tblptr bytes
  3190  00F502                     	endif
  3191  00F502  0009               	tblrd		*+
  3192  00F504  50F5               	movf	tablat,w,c
  3193  00F506  5C1B               	subwf	printf@val,w,c
  3194  00F508  0009               	tblrd		*+
  3195  00F50A  50F5               	movf	tablat,w,c
  3196  00F50C  581C               	subwfb	printf@val+1,w,c
  3197  00F50E  A0D8               	btfss	status,0,c
  3198  00F510  D00A               	goto	l1956
  3199                           
  3200                           ;doprnt.c: 1318: break;
  3201  00F512  2A20               	incf	printf@c,f,c
  3202  00F514  D7EA               	goto	l1940
  3203  00F516                     l1954:
  3204  00F516  501D               	movf	printf@flag,w,c
  3205  00F518  0B80               	andlw	128
  3206                           
  3207                           ; Switch size 1, requested type "space"
  3208                           ; Number of cases is 2, Range of values is 0 to 128
  3209                           ; switch strategies available:
  3210                           ; Name         Instructions Cycles
  3211                           ; simple_byte            7     4 (average)
  3212                           ;	Chosen strategy is simple_byte
  3213  00F51A  0A00               	xorlw	0	; case 0
  3214  00F51C  B4D8               	btfsc	status,2,c
  3215  00F51E  D7CB               	goto	l1924
  3216  00F520  0A80               	xorlw	128	; case 128
  3217  00F522  B4D8               	btfsc	status,2,c
  3218  00F524  D7E0               	goto	l1938
  3219  00F526                     l1956:
  3220                           
  3221                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3222  00F526  501E               	movf	printf@width,w,c
  3223  00F528  101F               	iorwf	printf@width+1,w,c
  3224  00F52A  B4D8               	btfsc	status,2,c
  3225  00F52C  D009               	goto	l1962
  3226  00F52E  C01D  F013         	movff	printf@flag,??_printf
  3227  00F532  0E03               	movlw	3
  3228  00F534  1613               	andwf	??_printf,f,c
  3229  00F536  B4D8               	btfsc	status,2,c
  3230  00F538  D003               	goto	l1962
  3231                           
  3232                           ;doprnt.c: 1346: width--;
  3233  00F53A  061E               	decf	printf@width,f,c
  3234  00F53C  A0D8               	btfss	status,0,c
  3235  00F53E  061F               	decf	printf@width+1,f,c
  3236  00F540                     l1962:
  3237                           
  3238                           ;doprnt.c: 1381: if(width > c)
  3239  00F540  0E80               	movlw	128
  3240  00F542  BE20               	btfsc	printf@c,7,c
  3241  00F544  0E7F               	movlw	127
  3242  00F546  6E13               	movwf	??_printf& (0+255),c
  3243  00F548  501E               	movf	printf@width,w,c
  3244  00F54A  5C20               	subwf	printf@c,w,c
  3245  00F54C  501F               	movf	printf@width+1,w,c
  3246  00F54E  0A80               	xorlw	128
  3247  00F550  5813               	subwfb	??_printf& (0+255),w,c
  3248  00F552  B0D8               	btfsc	status,0,c
  3249  00F554  D007               	goto	l1966
  3250                           
  3251                           ;doprnt.c: 1382: width -= c;
  3252  00F556  5020               	movf	printf@c,w,c
  3253  00F558  5E1E               	subwf	printf@width,f,c
  3254  00F55A  0E00               	movlw	0
  3255  00F55C  BE20               	btfsc	printf@c,7,c
  3256  00F55E  0EFF               	movlw	255
  3257  00F560  5A1F               	subwfb	printf@width+1,f,c
  3258  00F562  D004               	goto	l1968
  3259  00F564                     l1966:
  3260                           
  3261                           ;doprnt.c: 1383: else
  3262                           ;doprnt.c: 1384: width = 0;
  3263  00F564  0E00               	movlw	0
  3264  00F566  6E1F               	movwf	printf@width+1,c
  3265  00F568  0E00               	movlw	0
  3266  00F56A  6E1E               	movwf	printf@width,c
  3267  00F56C                     l1968:
  3268                           
  3269                           ;doprnt.c: 1387: if(flag & 0x04) {
  3270  00F56C  A41D               	btfss	printf@flag,2,c
  3271  00F56E  D014               	goto	l1980
  3272                           
  3273                           ;doprnt.c: 1392: if(flag & 0x03)
  3274  00F570  C01D  F013         	movff	printf@flag,??_printf
  3275  00F574  0E03               	movlw	3
  3276  00F576  1613               	andwf	??_printf,f,c
  3277  00F578  B4D8               	btfsc	status,2,c
  3278  00F57A  D003               	goto	l1974
  3279                           
  3280                           ;doprnt.c: 1393: (putch('-') );
  3281  00F57C  0E2D               	movlw	45
  3282  00F57E  EC15  F076         	call	_putch
  3283  00F582                     l1974:
  3284                           
  3285                           ;doprnt.c: 1415: if(width)
  3286  00F582  501E               	movf	printf@width,w,c
  3287  00F584  101F               	iorwf	printf@width+1,w,c
  3288  00F586  B4D8               	btfsc	status,2,c
  3289  00F588  D01E               	goto	l1990
  3290                           
  3291                           ;doprnt.c: 1417: (putch('0') );
  3292                           
  3293                           ;doprnt.c: 1416: do
  3294  00F58A  0E30               	movlw	48
  3295  00F58C  EC15  F076         	call	_putch
  3296                           
  3297                           ;doprnt.c: 1418: while(--width);
  3298  00F590  061E               	decf	printf@width,f,c
  3299  00F592  A0D8               	btfss	status,0,c
  3300  00F594  061F               	decf	printf@width+1,f,c
  3301  00F596  D7F5               	goto	l1974
  3302  00F598                     l1980:
  3303                           
  3304                           ;doprnt.c: 1422: {
  3305                           ;doprnt.c: 1424: if(width
  3306                           ;doprnt.c: 1428: )
  3307  00F598  501E               	movf	printf@width,w,c
  3308  00F59A  101F               	iorwf	printf@width+1,w,c
  3309  00F59C  B4D8               	btfsc	status,2,c
  3310  00F59E  D00A               	goto	l1986
  3311  00F5A0                     l1982:
  3312                           
  3313                           ;doprnt.c: 1430: (putch(' ') );
  3314  00F5A0  0E20               	movlw	32
  3315  00F5A2  EC15  F076         	call	_putch
  3316                           
  3317                           ;doprnt.c: 1431: while(--width);
  3318  00F5A6  061E               	decf	printf@width,f,c
  3319  00F5A8  A0D8               	btfss	status,0,c
  3320  00F5AA  061F               	decf	printf@width+1,f,c
  3321  00F5AC  501E               	movf	printf@width,w,c
  3322  00F5AE  101F               	iorwf	printf@width+1,w,c
  3323  00F5B0  A4D8               	btfss	status,2,c
  3324  00F5B2  D7F6               	goto	l1982
  3325  00F5B4                     l1986:
  3326                           
  3327                           ;doprnt.c: 1438: if(flag & 0x03)
  3328  00F5B4  C01D  F013         	movff	printf@flag,??_printf
  3329  00F5B8  0E03               	movlw	3
  3330  00F5BA  1613               	andwf	??_printf,f,c
  3331  00F5BC  B4D8               	btfsc	status,2,c
  3332  00F5BE  D003               	goto	l1990
  3333                           
  3334                           ;doprnt.c: 1439: (putch('-') );
  3335  00F5C0  0E2D               	movlw	45
  3336  00F5C2  EC15  F076         	call	_putch
  3337  00F5C6                     l1990:
  3338                           
  3339                           ;doprnt.c: 1469: }
  3340                           ;doprnt.c: 1472: prec = c;
  3341  00F5C6  C020  F01A         	movff	printf@c,printf@prec
  3342                           
  3343                           ;doprnt.c: 1474: while(prec--) {
  3344  00F5CA  D050               	goto	l2004
  3345  00F5CC                     l1992:
  3346                           
  3347                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3348  00F5CC  501A               	movf	printf@prec,w,c
  3349  00F5CE  0D02               	mullw	2
  3350  00F5D0  0EB5               	movlw	low _dpowers
  3351  00F5D2  24F3               	addwf	prodl,w,c
  3352  00F5D4  6EF6               	movwf	tblptrl,c
  3353  00F5D6  0EFE               	movlw	high _dpowers
  3354  00F5D8  20F4               	addwfc	prodh,w,c
  3355  00F5DA  6EF7               	movwf	tblptrh,c
  3356  00F5DC                     	if	0	;There are less than 3 active tblptr bytes
  3357  00F5DC                     	endif
  3358  00F5DC  0009               	tblrd		*+
  3359  00F5DE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3360  00F5E2  000A               	tblrd		*-
  3361  00F5E4  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3362  00F5E8  C01B  F001         	movff	printf@val,___lwdiv@dividend
  3363  00F5EC  C01C  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3364  00F5F0  EC3E  F077         	call	___lwdiv	;wreg free
  3365  00F5F4  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3366  00F5F8  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3367  00F5FC  0E00               	movlw	0
  3368  00F5FE  6E0B               	movwf	___lwmod@divisor+1,c
  3369  00F600  0E0A               	movlw	10
  3370  00F602  6E0A               	movwf	___lwmod@divisor,c
  3371  00F604  ECD1  F076         	call	___lwmod	;wreg free
  3372  00F608  5008               	movf	?___lwmod,w,c
  3373  00F60A  0F30               	addlw	48
  3374  00F60C  6E20               	movwf	printf@c,c
  3375                           
  3376                           ;doprnt.c: 1491: break;
  3377  00F60E  D02B               	goto	l2002
  3378  00F610                     l1994:
  3379                           
  3380                           ;doprnt.c: 1499: {
  3381                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3382  00F610  C01B  F001         	movff	printf@val,___lwdiv@dividend
  3383  00F614  C01C  F002         	movff	printf@val+1,___lwdiv@dividend+1
  3384  00F618  501A               	movf	printf@prec,w,c
  3385  00F61A  0D02               	mullw	2
  3386  00F61C  0EBF               	movlw	low _hexpowers
  3387  00F61E  24F3               	addwf	prodl,w,c
  3388  00F620  6EF6               	movwf	tblptrl,c
  3389  00F622  0EFE               	movlw	high _hexpowers
  3390  00F624  20F4               	addwfc	prodh,w,c
  3391  00F626  6EF7               	movwf	tblptrh,c
  3392  00F628                     	if	0	;There are less than 3 active tblptr bytes
  3393  00F628                     	endif
  3394  00F628  0009               	tblrd		*+
  3395  00F62A  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3396  00F62E  000A               	tblrd		*-
  3397  00F630  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3398  00F634  EC3E  F077         	call	___lwdiv	;wreg free
  3399  00F638  5001               	movf	?___lwdiv,w,c
  3400  00F63A  0B0F               	andlw	15
  3401  00F63C  6E17               	movwf	printf@idx,c
  3402                           
  3403                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3404  00F63E  5017               	movf	printf@idx,w,c
  3405  00F640  0D01               	mullw	1
  3406  00F642  0E00               	movlw	low STR_21
  3407  00F644  24F3               	addwf	prodl,w,c
  3408  00F646  6EF6               	movwf	tblptrl,c
  3409  00F648  0EFF               	movlw	high STR_21
  3410  00F64A  20F4               	addwfc	prodh,w,c
  3411  00F64C  6EF7               	movwf	tblptrh,c
  3412  00F64E                     	if	0	;There are less than 3 active tblptr bytes
  3413  00F64E                     	endif
  3414  00F64E  0008               	tblrd		*
  3415  00F650  CFF5 F020          	movff	tablat,printf@c
  3416                           
  3417                           ;doprnt.c: 1523: }
  3418                           
  3419                           ;doprnt.c: 1508: }
  3420                           ;doprnt.c: 1510: break;
  3421  00F654  D008               	goto	l2002
  3422  00F656                     l2000:
  3423  00F656  501D               	movf	printf@flag,w,c
  3424  00F658  0B80               	andlw	128
  3425                           
  3426                           ; Switch size 1, requested type "space"
  3427                           ; Number of cases is 2, Range of values is 0 to 128
  3428                           ; switch strategies available:
  3429                           ; Name         Instructions Cycles
  3430                           ; simple_byte            7     4 (average)
  3431                           ;	Chosen strategy is simple_byte
  3432  00F65A  0A00               	xorlw	0	; case 0
  3433  00F65C  B4D8               	btfsc	status,2,c
  3434  00F65E  D7B6               	goto	l1992
  3435  00F660  0A80               	xorlw	128	; case 128
  3436  00F662  B4D8               	btfsc	status,2,c
  3437  00F664  D7D5               	goto	l1994
  3438  00F666                     l2002:
  3439                           
  3440                           ;doprnt.c: 1524: (putch(c) );
  3441  00F666  5020               	movf	printf@c,w,c
  3442  00F668  EC15  F076         	call	_putch
  3443  00F66C                     l2004:
  3444  00F66C  061A               	decf	printf@prec,f,c
  3445  00F66E  281A               	incf	printf@prec,w,c
  3446  00F670  A4D8               	btfss	status,2,c
  3447  00F672  D7F1               	goto	l2000
  3448  00F674                     l2006:
  3449  00F674  C00D  FFF6         	movff	printf@f,tblptrl
  3450  00F678  C00E  FFF7         	movff	printf@f+1,tblptrh
  3451  00F67C  4A0D               	infsnz	printf@f,f,c
  3452  00F67E  2A0E               	incf	printf@f+1,f,c
  3453  00F680                     	if	0	;tblptru may be non-zero
  3454  00F680                     	endif
  3455  00F680                     	if	0	;tblptru may be non-zero
  3456  00F680                     	endif
  3457  00F680  0008               	tblrd		*
  3458  00F682  CFF5 F020          	movff	tablat,printf@c
  3459  00F686  5020               	movf	printf@c,w,c
  3460  00F688  B4D8               	btfsc	status,2,c
  3461  00F68A  0012               	return	
  3462  00F68C  D67F               	goto	l1880
  3463  00F68E                     __end_of_printf:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           plusw1	equ	0xFE3
  3475                           indf2	equ	0xFDF
  3476                           postinc2	equ	0xFDE
  3477                           postdec2	equ	0xFDD
  3478                           plusw2	equ	0xFDB
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _putch *****************
  3484 ;; Defined at:
  3485 ;;		line 30 in file "lcd.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  data            1    wreg     unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  data            1    2[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;Total ram usage:        1 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    1
  3506 ;; This function calls:
  3507 ;;		_lcdNibble
  3508 ;; This function is called by:
  3509 ;;		_printf
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text8
  3514  00EC2A                     __ptext8:
  3515                           	opt stack 0
  3516  00EC2A                     _putch:
  3517                           	opt stack 28
  3518                           
  3519                           ;incstack = 0
  3520                           ;putch@data stored from wreg
  3521  00EC2A  6E03               	movwf	putch@data,c
  3522                           
  3523                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  3524  00EC2C  848C               	bsf	3980,2,c	;volatile
  3525                           
  3526                           ;lcd.c: 32: lcdNibble(data);
  3527  00EC2E  5003               	movf	putch@data,w,c
  3528  00EC30  EC67  F077         	call	_lcdNibble
  3529  00EC34  0012               	return		;funcret
  3530  00EC36                     __end_of_putch:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           postinc0	equ	0xFEE
  3540                           wreg	equ	0xFE8
  3541                           plusw1	equ	0xFE3
  3542                           indf2	equ	0xFDF
  3543                           postinc2	equ	0xFDE
  3544                           postdec2	equ	0xFDD
  3545                           plusw2	equ	0xFDB
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _isdigit *****************
  3551 ;; Defined at:
  3552 ;;		line 8 in file "C:\Users\Andrew\Desktop\xc8\sources\common\isdigit.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  c               1    wreg     unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  c               1    2[COMRAM] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;		None               void
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;Total ram usage:        3 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_printf
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text9
  3580  00EC76                     __ptext9:
  3581                           	opt stack 0
  3582  00EC76                     _isdigit:
  3583                           	opt stack 29
  3584                           
  3585                           ;incstack = 0
  3586                           ;isdigit@c stored from wreg
  3587  00EC76  6E03               	movwf	isdigit@c,c
  3588  00EC78  0E00               	movlw	0
  3589  00EC7A  6E02               	movwf	_isdigit$716,c
  3590  00EC7C  0E3A               	movlw	58
  3591  00EC7E  6003               	cpfslt	isdigit@c,c
  3592  00EC80  D005               	goto	l1704
  3593  00EC82  0E2F               	movlw	47
  3594  00EC84  6403               	cpfsgt	isdigit@c,c
  3595  00EC86  D002               	goto	l1704
  3596  00EC88  0E01               	movlw	1
  3597  00EC8A  6E02               	movwf	_isdigit$716,c
  3598  00EC8C                     l1704:
  3599  00EC8C  C002  F001         	movff	_isdigit$716,??_isdigit
  3600  00EC90  3001               	rrcf	??_isdigit,w,c
  3601  00EC92  0012               	return	
  3602  00EC94                     __end_of_isdigit:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           postinc0	equ	0xFEE
  3612                           wreg	equ	0xFE8
  3613                           plusw1	equ	0xFE3
  3614                           indf2	equ	0xFDF
  3615                           postinc2	equ	0xFDE
  3616                           postdec2	equ	0xFDD
  3617                           plusw2	equ	0xFDB
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function ___wmul *****************
  3623 ;; Defined at:
  3624 ;;		line 15 in file "C:\Users\Andrew\Desktop\xc8\sources\common\Umul16.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  multiplier      2    0[COMRAM] unsigned int 
  3627 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  product         2    4[COMRAM] unsigned int 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  2    0[COMRAM] unsigned int 
  3632 ;; Registers used:
  3633 ;;		wreg, status,2, status,0, prodl, prodh
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3639 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;Total ram usage:        6 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		_printf
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text10
  3653  00ED00                     __ptext10:
  3654                           	opt stack 0
  3655  00ED00                     ___wmul:
  3656                           	opt stack 29
  3657                           
  3658                           ;incstack = 0
  3659  00ED00  5001               	movf	___wmul@multiplier,w,c
  3660  00ED02  0203               	mulwf	___wmul@multiplicand,c
  3661  00ED04  CFF3 F005          	movff	prodl,___wmul@product
  3662  00ED08  CFF4 F006          	movff	prodh,___wmul@product+1
  3663  00ED0C  5001               	movf	___wmul@multiplier,w,c
  3664  00ED0E  0204               	mulwf	___wmul@multiplicand+1,c
  3665  00ED10  50F3               	movf	prodl,w,c
  3666  00ED12  2606               	addwf	___wmul@product+1,f,c
  3667  00ED14  5002               	movf	___wmul@multiplier+1,w,c
  3668  00ED16  0203               	mulwf	___wmul@multiplicand,c
  3669  00ED18  50F3               	movf	prodl,w,c
  3670  00ED1A  2606               	addwf	___wmul@product+1,f,c
  3671  00ED1C  C005  F001         	movff	___wmul@product,?___wmul
  3672  00ED20  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3673  00ED24  0012               	return	
  3674  00ED26                     __end_of___wmul:
  3675                           	opt stack 0
  3676                           tblptru	equ	0xFF8
  3677                           tblptrh	equ	0xFF7
  3678                           tblptrl	equ	0xFF6
  3679                           tablat	equ	0xFF5
  3680                           prodh	equ	0xFF4
  3681                           prodl	equ	0xFF3
  3682                           intcon	equ	0xFF2
  3683                           postinc0	equ	0xFEE
  3684                           wreg	equ	0xFE8
  3685                           plusw1	equ	0xFE3
  3686                           indf2	equ	0xFDF
  3687                           postinc2	equ	0xFDE
  3688                           postdec2	equ	0xFDD
  3689                           plusw2	equ	0xFDB
  3690                           fsr2h	equ	0xFDA
  3691                           fsr2l	equ	0xFD9
  3692                           status	equ	0xFD8
  3693                           
  3694 ;; *************** function ___lwmod *****************
  3695 ;; Defined at:
  3696 ;;		line 8 in file "C:\Users\Andrew\Desktop\xc8\sources\common\lwmod.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;  dividend        2    7[COMRAM] unsigned int 
  3699 ;;  divisor         2    9[COMRAM] unsigned int 
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  counter         1   11[COMRAM] unsigned char 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  2    7[COMRAM] unsigned int 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3711 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;Total ram usage:        5 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_printf
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text11
  3725  00EDA2                     __ptext11:
  3726                           	opt stack 0
  3727  00EDA2                     ___lwmod:
  3728                           	opt stack 29
  3729                           
  3730                           ;incstack = 0
  3731  00EDA2  500A               	movf	___lwmod@divisor,w,c
  3732  00EDA4  100B               	iorwf	___lwmod@divisor+1,w,c
  3733  00EDA6  B4D8               	btfsc	status,2,c
  3734  00EDA8  D018               	goto	l713
  3735  00EDAA  0E01               	movlw	1
  3736  00EDAC  6E0C               	movwf	___lwmod@counter,c
  3737  00EDAE  D004               	goto	l1800
  3738  00EDB0                     l1798:
  3739  00EDB0  90D8               	bcf	status,0,c
  3740  00EDB2  360A               	rlcf	___lwmod@divisor,f,c
  3741  00EDB4  360B               	rlcf	___lwmod@divisor+1,f,c
  3742  00EDB6  2A0C               	incf	___lwmod@counter,f,c
  3743  00EDB8                     l1800:
  3744  00EDB8  AE0B               	btfss	___lwmod@divisor+1,7,c
  3745  00EDBA  D7FA               	goto	l1798
  3746  00EDBC                     l1802:
  3747  00EDBC  500A               	movf	___lwmod@divisor,w,c
  3748  00EDBE  5C08               	subwf	___lwmod@dividend,w,c
  3749  00EDC0  500B               	movf	___lwmod@divisor+1,w,c
  3750  00EDC2  5809               	subwfb	___lwmod@dividend+1,w,c
  3751  00EDC4  A0D8               	btfss	status,0,c
  3752  00EDC6  D004               	goto	l1806
  3753  00EDC8  500A               	movf	___lwmod@divisor,w,c
  3754  00EDCA  5E08               	subwf	___lwmod@dividend,f,c
  3755  00EDCC  500B               	movf	___lwmod@divisor+1,w,c
  3756  00EDCE  5A09               	subwfb	___lwmod@dividend+1,f,c
  3757  00EDD0                     l1806:
  3758  00EDD0  90D8               	bcf	status,0,c
  3759  00EDD2  320B               	rrcf	___lwmod@divisor+1,f,c
  3760  00EDD4  320A               	rrcf	___lwmod@divisor,f,c
  3761  00EDD6  2E0C               	decfsz	___lwmod@counter,f,c
  3762  00EDD8  D7F1               	goto	l1802
  3763  00EDDA                     l713:
  3764  00EDDA  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3765  00EDDE  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3766  00EDE2  0012               	return		;funcret
  3767  00EDE4                     __end_of___lwmod:
  3768                           	opt stack 0
  3769                           tblptru	equ	0xFF8
  3770                           tblptrh	equ	0xFF7
  3771                           tblptrl	equ	0xFF6
  3772                           tablat	equ	0xFF5
  3773                           prodh	equ	0xFF4
  3774                           prodl	equ	0xFF3
  3775                           intcon	equ	0xFF2
  3776                           postinc0	equ	0xFEE
  3777                           wreg	equ	0xFE8
  3778                           plusw1	equ	0xFE3
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           plusw2	equ	0xFDB
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function ___lwdiv *****************
  3788 ;; Defined at:
  3789 ;;		line 8 in file "C:\Users\Andrew\Desktop\xc8\sources\common\lwdiv.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  dividend        2    0[COMRAM] unsigned int 
  3792 ;;  divisor         2    2[COMRAM] unsigned int 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  quotient        2    4[COMRAM] unsigned int 
  3795 ;;  counter         1    6[COMRAM] unsigned char 
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  2    0[COMRAM] unsigned int 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;Total ram usage:        7 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		_main
  3815 ;;		_printf
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text12
  3820  00EE7C                     __ptext12:
  3821                           	opt stack 0
  3822  00EE7C                     ___lwdiv:
  3823                           	opt stack 29
  3824                           
  3825                           ;incstack = 0
  3826  00EE7C  0E00               	movlw	0
  3827  00EE7E  6E06               	movwf	___lwdiv@quotient+1,c
  3828  00EE80  0E00               	movlw	0
  3829  00EE82  6E05               	movwf	___lwdiv@quotient,c
  3830  00EE84  5003               	movf	___lwdiv@divisor,w,c
  3831  00EE86  1004               	iorwf	___lwdiv@divisor+1,w,c
  3832  00EE88  B4D8               	btfsc	status,2,c
  3833  00EE8A  D01C               	goto	l703
  3834  00EE8C  0E01               	movlw	1
  3835  00EE8E  6E07               	movwf	___lwdiv@counter,c
  3836  00EE90  D004               	goto	l1780
  3837  00EE92                     l1778:
  3838  00EE92  90D8               	bcf	status,0,c
  3839  00EE94  3603               	rlcf	___lwdiv@divisor,f,c
  3840  00EE96  3604               	rlcf	___lwdiv@divisor+1,f,c
  3841  00EE98  2A07               	incf	___lwdiv@counter,f,c
  3842  00EE9A                     l1780:
  3843  00EE9A  AE04               	btfss	___lwdiv@divisor+1,7,c
  3844  00EE9C  D7FA               	goto	l1778
  3845  00EE9E                     l1782:
  3846  00EE9E  90D8               	bcf	status,0,c
  3847  00EEA0  3605               	rlcf	___lwdiv@quotient,f,c
  3848  00EEA2  3606               	rlcf	___lwdiv@quotient+1,f,c
  3849  00EEA4  5003               	movf	___lwdiv@divisor,w,c
  3850  00EEA6  5C01               	subwf	___lwdiv@dividend,w,c
  3851  00EEA8  5004               	movf	___lwdiv@divisor+1,w,c
  3852  00EEAA  5802               	subwfb	___lwdiv@dividend+1,w,c
  3853  00EEAC  A0D8               	btfss	status,0,c
  3854  00EEAE  D005               	goto	l1790
  3855  00EEB0  5003               	movf	___lwdiv@divisor,w,c
  3856  00EEB2  5E01               	subwf	___lwdiv@dividend,f,c
  3857  00EEB4  5004               	movf	___lwdiv@divisor+1,w,c
  3858  00EEB6  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3859  00EEB8  8005               	bsf	___lwdiv@quotient,0,c
  3860  00EEBA                     l1790:
  3861  00EEBA  90D8               	bcf	status,0,c
  3862  00EEBC  3204               	rrcf	___lwdiv@divisor+1,f,c
  3863  00EEBE  3203               	rrcf	___lwdiv@divisor,f,c
  3864  00EEC0  2E07               	decfsz	___lwdiv@counter,f,c
  3865  00EEC2  D7ED               	goto	l1782
  3866  00EEC4                     l703:
  3867  00EEC4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3868  00EEC8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3869  00EECC  0012               	return		;funcret
  3870  00EECE                     __end_of___lwdiv:
  3871                           	opt stack 0
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           plusw1	equ	0xFE3
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           plusw2	equ	0xFDB
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function _poweroff_sensor *****************
  3891 ;; Defined at:
  3892 ;;		line 87 in file "main.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used:    1
  3912 ;; Hardware stack levels required when called:    2
  3913 ;; This function calls:
  3914 ;;		_I2C_Master_Start
  3915 ;;		_I2C_Master_Stop
  3916 ;;		_I2C_Master_Write
  3917 ;; This function is called by:
  3918 ;;		_main
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           	psect	text13
  3923  00EC94                     __ptext13:
  3924                           	opt stack 0
  3925  00EC94                     _poweroff_sensor:
  3926                           	opt stack 28
  3927                           
  3928                           ;main.c: 89: I2C_Master_Start();
  3929                           
  3930                           ;incstack = 0
  3931  00EC94  EC02  F076         	call	_I2C_Master_Start	;wreg free
  3932                           
  3933                           ;main.c: 90: I2C_Master_Write(0x00);
  3934  00EC98  0E00               	movlw	0
  3935  00EC9A  6E03               	movwf	I2C_Master_Write@d+1,c
  3936  00EC9C  0E00               	movlw	0
  3937  00EC9E  6E02               	movwf	I2C_Master_Write@d,c
  3938  00ECA0  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  3939                           
  3940                           ;main.c: 91: I2C_Master_Write(0x00);
  3941  00ECA4  0E00               	movlw	0
  3942  00ECA6  6E03               	movwf	I2C_Master_Write@d+1,c
  3943  00ECA8  0E00               	movlw	0
  3944  00ECAA  6E02               	movwf	I2C_Master_Write@d,c
  3945  00ECAC  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  3946                           
  3947                           ;main.c: 92: I2C_Master_Stop();
  3948  00ECB0  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  3949  00ECB4  0012               	return	
  3950  00ECB6                     __end_of_poweroff_sensor:
  3951                           	opt stack 0
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           postinc0	equ	0xFEE
  3960                           wreg	equ	0xFE8
  3961                           plusw1	equ	0xFE3
  3962                           indf2	equ	0xFDF
  3963                           postinc2	equ	0xFDE
  3964                           postdec2	equ	0xFDD
  3965                           plusw2	equ	0xFDB
  3966                           fsr2h	equ	0xFDA
  3967                           fsr2l	equ	0xFD9
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _initLCD *****************
  3971 ;; Defined at:
  3972 ;;		line 14 in file "lcd.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;		None
  3977 ;; Return value:  Size  Location     Type
  3978 ;;                  1    wreg      void 
  3979 ;; Registers used:
  3980 ;;		wreg, status,2, status,0, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;Total ram usage:        1 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    2
  3993 ;; This function calls:
  3994 ;;		_lcdInst
  3995 ;; This function is called by:
  3996 ;;		_main
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text14
  4001  00EDE4                     __ptext14:
  4002                           	opt stack 0
  4003  00EDE4                     _initLCD:
  4004                           	opt stack 28
  4005                           
  4006                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  4007                           
  4008                           ;incstack = 0
  4009  00EDE4  0E31               	movlw	49
  4010  00EDE6  6E04               	movwf	??_initLCD& (0+255),c
  4011  00EDE8  0EB2               	movlw	178
  4012  00EDEA                     u1927:
  4013  00EDEA  2EE8               	decfsz	wreg,f,c
  4014  00EDEC  D7FE               	bra	u1927
  4015  00EDEE  2E04               	decfsz	??_initLCD& (0+255),f,c
  4016  00EDF0  D7FC               	bra	u1927
  4017  00EDF2  D000               	nop2	
  4018                           
  4019                           ;lcd.c: 16: lcdInst(0b00110011);
  4020  00EDF4  0E33               	movlw	51
  4021  00EDF6  EC0F  F076         	call	_lcdInst
  4022                           
  4023                           ;lcd.c: 17: lcdInst(0b00110010);
  4024  00EDFA  0E32               	movlw	50
  4025  00EDFC  EC0F  F076         	call	_lcdInst
  4026                           
  4027                           ;lcd.c: 18: lcdInst(0b00101000);
  4028  00EE00  0E28               	movlw	40
  4029  00EE02  EC0F  F076         	call	_lcdInst
  4030                           
  4031                           ;lcd.c: 19: lcdInst(0b00001100);
  4032  00EE06  0E0C               	movlw	12
  4033  00EE08  EC0F  F076         	call	_lcdInst
  4034                           
  4035                           ;lcd.c: 20: lcdInst(0b00000110);
  4036  00EE0C  0E06               	movlw	6
  4037  00EE0E  EC0F  F076         	call	_lcdInst
  4038                           
  4039                           ;lcd.c: 21: lcdInst(0b00000001);
  4040  00EE12  0E01               	movlw	1
  4041  00EE14  EC0F  F076         	call	_lcdInst
  4042                           
  4043                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  4044  00EE18  0E31               	movlw	49
  4045  00EE1A  6E04               	movwf	??_initLCD& (0+255),c
  4046  00EE1C  0EB2               	movlw	178
  4047  00EE1E                     u1937:
  4048  00EE1E  2EE8               	decfsz	wreg,f,c
  4049  00EE20  D7FE               	bra	u1937
  4050  00EE22  2E04               	decfsz	??_initLCD& (0+255),f,c
  4051  00EE24  D7FC               	bra	u1937
  4052  00EE26  D000               	nop2	
  4053  00EE28  0012               	return		;funcret
  4054  00EE2A                     __end_of_initLCD:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           intcon	equ	0xFF2
  4063                           postinc0	equ	0xFEE
  4064                           wreg	equ	0xFE8
  4065                           plusw1	equ	0xFE3
  4066                           indf2	equ	0xFDF
  4067                           postinc2	equ	0xFDE
  4068                           postdec2	equ	0xFDD
  4069                           plusw2	equ	0xFDB
  4070                           fsr2h	equ	0xFDA
  4071                           fsr2l	equ	0xFD9
  4072                           status	equ	0xFD8
  4073                           
  4074 ;; *************** function _lcdInst *****************
  4075 ;; Defined at:
  4076 ;;		line 25 in file "lcd.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  data            1    wreg     unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  data            1    2[COMRAM] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;Total ram usage:        1 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    1
  4097 ;; This function calls:
  4098 ;;		_lcdNibble
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;;		_initLCD
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text15
  4106  00EC1E                     __ptext15:
  4107                           	opt stack 0
  4108  00EC1E                     _lcdInst:
  4109                           	opt stack 29
  4110                           
  4111                           ;incstack = 0
  4112                           ;lcdInst@data stored from wreg
  4113  00EC1E  6E03               	movwf	lcdInst@data,c
  4114                           
  4115                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  4116  00EC20  948C               	bcf	3980,2,c	;volatile
  4117                           
  4118                           ;lcd.c: 27: lcdNibble(data);
  4119  00EC22  5003               	movf	lcdInst@data,w,c
  4120  00EC24  EC67  F077         	call	_lcdNibble
  4121  00EC28  0012               	return		;funcret
  4122  00EC2A                     __end_of_lcdInst:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           plusw1	equ	0xFE3
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           plusw2	equ	0xFDB
  4138                           fsr2h	equ	0xFDA
  4139                           fsr2l	equ	0xFD9
  4140                           status	equ	0xFD8
  4141                           
  4142 ;; *************** function _lcdNibble *****************
  4143 ;; Defined at:
  4144 ;;		line 35 in file "lcd.c"
  4145 ;; Parameters:    Size  Location     Type
  4146 ;;  data            1    wreg     unsigned char 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  data            1    1[COMRAM] unsigned char 
  4149 ;;  temp            1    0[COMRAM] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  1    wreg      void 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:        2 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; This function calls:
  4166 ;;		Nothing
  4167 ;; This function is called by:
  4168 ;;		_lcdInst
  4169 ;;		_putch
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text16
  4174  00EECE                     __ptext16:
  4175                           	opt stack 0
  4176  00EECE                     _lcdNibble:
  4177                           	opt stack 28
  4178                           
  4179                           ;incstack = 0
  4180                           ;lcdNibble@data stored from wreg
  4181  00EECE  6E02               	movwf	lcdNibble@data,c
  4182                           
  4183                           ;lcd.c: 39: char temp = data & 0xF0;
  4184  00EED0  5002               	movf	lcdNibble@data,w,c
  4185  00EED2  0BF0               	andlw	240
  4186  00EED4  6E01               	movwf	lcdNibble@temp,c
  4187                           
  4188                           ;lcd.c: 42: LATD = LATD & 0x0F;
  4189  00EED6  508C               	movf	3980,w,c	;volatile
  4190  00EED8  0B0F               	andlw	15
  4191  00EEDA  6E8C               	movwf	3980,c	;volatile
  4192                           
  4193                           ;lcd.c: 45: LATD = temp | LATD;
  4194  00EEDC  5001               	movf	lcdNibble@temp,w,c
  4195  00EEDE  108C               	iorwf	3980,w,c	;volatile
  4196  00EEE0  6E8C               	movwf	3980,c	;volatile
  4197                           
  4198                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4199  00EEE2  968C               	bcf	3980,3,c	;volatile
  4200                           
  4201                           ;lcd.c: 48: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4202  00EEE4  0E14               	movlw	20
  4203  00EEE6                     u1947:
  4204  00EEE6  2EE8               	decfsz	wreg,f,c
  4205  00EEE8  D7FE               	bra	u1947
  4206  00EEEA  D000               	nop2	
  4207                           
  4208                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4209  00EEEC  868C               	bsf	3980,3,c	;volatile
  4210                           
  4211                           ;lcd.c: 50: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4212  00EEEE  0E14               	movlw	20
  4213  00EEF0                     u1957:
  4214  00EEF0  2EE8               	decfsz	wreg,f,c
  4215  00EEF2  D7FE               	bra	u1957
  4216  00EEF4  D000               	nop2	
  4217                           
  4218                           ;lcd.c: 53: data = data << 4;
  4219  00EEF6  3802               	swapf	lcdNibble@data,w,c
  4220  00EEF8  0BF0               	andlw	240
  4221  00EEFA  6E02               	movwf	lcdNibble@data,c
  4222                           
  4223                           ;lcd.c: 55: temp = data & 0xF0;
  4224  00EEFC  5002               	movf	lcdNibble@data,w,c
  4225  00EEFE  0BF0               	andlw	240
  4226  00EF00  6E01               	movwf	lcdNibble@temp,c
  4227                           
  4228                           ;lcd.c: 56: LATD = LATD & 0x0F;
  4229  00EF02  508C               	movf	3980,w,c	;volatile
  4230  00EF04  0B0F               	andlw	15
  4231  00EF06  6E8C               	movwf	3980,c	;volatile
  4232                           
  4233                           ;lcd.c: 57: LATD = temp | LATD;
  4234  00EF08  5001               	movf	lcdNibble@temp,w,c
  4235  00EF0A  108C               	iorwf	3980,w,c	;volatile
  4236  00EF0C  6E8C               	movwf	3980,c	;volatile
  4237                           
  4238                           ;lcd.c: 59: LATDbits.LATD3 = 0;
  4239  00EF0E  968C               	bcf	3980,3,c	;volatile
  4240                           
  4241                           ;lcd.c: 60: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4242  00EF10  0E14               	movlw	20
  4243  00EF12                     u1967:
  4244  00EF12  2EE8               	decfsz	wreg,f,c
  4245  00EF14  D7FE               	bra	u1967
  4246  00EF16  D000               	nop2	
  4247                           
  4248                           ;lcd.c: 61: LATDbits.LATD3 = 1;
  4249  00EF18  868C               	bsf	3980,3,c	;volatile
  4250                           
  4251                           ;lcd.c: 62: _delay((unsigned long)((25)*(10000000/4000000.0)));
  4252  00EF1A  0E14               	movlw	20
  4253  00EF1C                     u1977:
  4254  00EF1C  2EE8               	decfsz	wreg,f,c
  4255  00EF1E  D7FE               	bra	u1977
  4256  00EF20  D000               	nop2	
  4257  00EF22  0012               	return		;funcret
  4258  00EF24                     __end_of_lcdNibble:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodh	equ	0xFF4
  4265                           prodl	equ	0xFF3
  4266                           intcon	equ	0xFF2
  4267                           postinc0	equ	0xFEE
  4268                           wreg	equ	0xFE8
  4269                           plusw1	equ	0xFE3
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           plusw2	equ	0xFDB
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _check_B_press *****************
  4279 ;; Defined at:
  4280 ;;		line 147 in file "main.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  key             1    wreg     unsigned char 
  4283 ;;  time            2    5[COMRAM] PTR unsigned char 
  4284 ;;		 -> main@finalTime(2), 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  key             1    8[COMRAM] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      unsigned char 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;Total ram usage:        4 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    3
  4303 ;; This function calls:
  4304 ;;		_timer_done
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text17
  4311  00EE2A                     __ptext17:
  4312                           	opt stack 0
  4313  00EE2A                     _check_B_press:
  4314                           	opt stack 27
  4315                           
  4316                           ;incstack = 0
  4317                           ;check_B_press@key stored from wreg
  4318  00EE2A  6E09               	movwf	check_B_press@key,c
  4319                           
  4320                           ;main.c: 148: timer_done(time);
  4321  00EE2C  C006  F004         	movff	check_B_press@time,timer_done@time
  4322  00EE30  C007  F005         	movff	check_B_press@time+1,timer_done@time+1
  4323  00EE34  ECBF  F077         	call	_timer_done	;wreg free
  4324                           
  4325                           ;main.c: 150: if (time[1] >= 1 && time[0] >= 60)
  4326  00EE38  EE20 F001          	lfsr	2,1
  4327  00EE3C  5006               	movf	check_B_press@time,w,c
  4328  00EE3E  26D9               	addwf	fsr2l,f,c
  4329  00EE40  5007               	movf	check_B_press@time+1,w,c
  4330  00EE42  22DA               	addwfc	fsr2h,f,c
  4331  00EE44  50DF               	movf	indf2,w,c
  4332  00EE46  B4D8               	btfsc	status,2,c
  4333  00EE48  D009               	goto	l97
  4334  00EE4A  C006  FFD9         	movff	check_B_press@time,fsr2l
  4335  00EE4E  C007  FFDA         	movff	check_B_press@time+1,fsr2h
  4336  00EE52  0E3B               	movlw	59
  4337  00EE54  64DF               	cpfsgt	indf2,c
  4338  00EE56  D002               	goto	l97
  4339                           
  4340                           ;main.c: 151: return 1;
  4341  00EE58  0E01               	movlw	1
  4342  00EE5A  0012               	return	
  4343  00EE5C                     l97:
  4344                           
  4345                           ;main.c: 152: if (PORTBbits.RB1 == 1 && key == 0b0111){
  4346  00EE5C  A281               	btfss	3969,1,c	;volatile
  4347  00EE5E  D00C               	goto	l1874
  4348  00EE60  0E07               	movlw	7
  4349  00EE62  1809               	xorwf	check_B_press@key,w,c
  4350  00EE64  A4D8               	btfss	status,2,c
  4351  00EE66  D008               	goto	l1874
  4352  00EE68                     l100:
  4353  00EE68  B281               	btfsc	3969,1,c	;volatile
  4354  00EE6A  D7FE               	goto	l100
  4355                           
  4356                           ;main.c: 155: }
  4357                           ;main.c: 156: __nop();
  4358  00EE6C  F000               	nop	
  4359                           
  4360                           ;main.c: 157: __nop();
  4361  00EE6E  F000               	nop	
  4362                           
  4363                           ;main.c: 160: LATA = 0xFF;
  4364  00EE70  6889               	setf	3977,c	;volatile
  4365                           
  4366                           ;main.c: 162: LATE = 0xFF;
  4367  00EE72  688D               	setf	3981,c	;volatile
  4368                           
  4369                           ;main.c: 163: return 1;
  4370  00EE74  0E01               	movlw	1
  4371  00EE76  0012               	return	
  4372  00EE78                     l1874:
  4373                           
  4374                           ;main.c: 165: }
  4375                           ;main.c: 166: return 0;
  4376  00EE78  0E00               	movlw	0
  4377  00EE7A  0012               	return	
  4378  00EE7C                     __end_of_check_B_press:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           intcon	equ	0xFF2
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           plusw1	equ	0xFE3
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           plusw2	equ	0xFDB
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _timer_done *****************
  4399 ;; Defined at:
  4400 ;;		line 122 in file "main.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  time            2    3[COMRAM] PTR unsigned char 
  4403 ;;		 -> main@finalTime(2), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4415 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;Total ram usage:        2 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    2
  4422 ;; This function calls:
  4423 ;;		_I2C_Master_Read
  4424 ;;		_I2C_Master_Start
  4425 ;;		_I2C_Master_Stop
  4426 ;;		_I2C_Master_Write
  4427 ;; This function is called by:
  4428 ;;		_check_B_press
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text18
  4433  00EF7E                     __ptext18:
  4434                           	opt stack 0
  4435  00EF7E                     _timer_done:
  4436                           	opt stack 27
  4437                           
  4438                           ;main.c: 124: I2C_Master_Start();
  4439                           
  4440                           ;incstack = 0
  4441  00EF7E  EC02  F076         	call	_I2C_Master_Start	;wreg free
  4442                           
  4443                           ;main.c: 125: I2C_Master_Write(0b11010000);
  4444  00EF82  0E00               	movlw	0
  4445  00EF84  6E03               	movwf	I2C_Master_Write@d+1,c
  4446  00EF86  0ED0               	movlw	208
  4447  00EF88  6E02               	movwf	I2C_Master_Write@d,c
  4448  00EF8A  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  4449                           
  4450                           ;main.c: 126: I2C_Master_Write(0x00);
  4451  00EF8E  0E00               	movlw	0
  4452  00EF90  6E03               	movwf	I2C_Master_Write@d+1,c
  4453  00EF92  0E00               	movlw	0
  4454  00EF94  6E02               	movwf	I2C_Master_Write@d,c
  4455  00EF96  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  4456                           
  4457                           ;main.c: 127: I2C_Master_Stop();
  4458  00EF9A  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  4459                           
  4460                           ;main.c: 130: I2C_Master_Start();
  4461  00EF9E  EC02  F076         	call	_I2C_Master_Start	;wreg free
  4462                           
  4463                           ;main.c: 131: I2C_Master_Write(0b11010001);
  4464  00EFA2  0E00               	movlw	0
  4465  00EFA4  6E03               	movwf	I2C_Master_Write@d+1,c
  4466  00EFA6  0ED1               	movlw	209
  4467  00EFA8  6E02               	movwf	I2C_Master_Write@d,c
  4468  00EFAA  EC0A  F076         	call	_I2C_Master_Write	;wreg free
  4469                           
  4470                           ;main.c: 133: time[0] = I2C_Master_Read(1);
  4471  00EFAE  0E01               	movlw	1
  4472  00EFB0  EC6D  F076         	call	_I2C_Master_Read
  4473  00EFB4  C004  FFD9         	movff	timer_done@time,fsr2l
  4474  00EFB8  C005  FFDA         	movff	timer_done@time+1,fsr2h
  4475  00EFBC  6EDF               	movwf	indf2,c
  4476                           
  4477                           ;main.c: 134: time[1] = I2C_Master_Read(0);
  4478  00EFBE  EE20 F001          	lfsr	2,1
  4479  00EFC2  5004               	movf	timer_done@time,w,c
  4480  00EFC4  26D9               	addwf	fsr2l,f,c
  4481  00EFC6  5005               	movf	timer_done@time+1,w,c
  4482  00EFC8  22DA               	addwfc	fsr2h,f,c
  4483  00EFCA  0E00               	movlw	0
  4484  00EFCC  EC6D  F076         	call	_I2C_Master_Read
  4485  00EFD0  6EDF               	movwf	indf2,c
  4486                           
  4487                           ;main.c: 135: I2C_Master_Stop();
  4488  00EFD2  EC06  F076         	call	_I2C_Master_Stop	;wreg free
  4489  00EFD6  0012               	return	
  4490  00EFD8                     __end_of_timer_done:
  4491                           	opt stack 0
  4492                           tblptru	equ	0xFF8
  4493                           tblptrh	equ	0xFF7
  4494                           tblptrl	equ	0xFF6
  4495                           tablat	equ	0xFF5
  4496                           prodh	equ	0xFF4
  4497                           prodl	equ	0xFF3
  4498                           intcon	equ	0xFF2
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           plusw1	equ	0xFE3
  4502                           indf2	equ	0xFDF
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           plusw2	equ	0xFDB
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function _I2C_Master_Write *****************
  4511 ;; Defined at:
  4512 ;;		line 46 in file "I2C.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  d               2    1[COMRAM] unsigned int 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, status,2, status,0, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4526 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;Total ram usage:        2 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    1
  4533 ;; This function calls:
  4534 ;;		_I2C_Master_Wait
  4535 ;; This function is called by:
  4536 ;;		_set_time
  4537 ;;		_read_sensor
  4538 ;;		_poweroff_sensor
  4539 ;;		_timer_done
  4540 ;;		_tca_select
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text19
  4545  00EC14                     __ptext19:
  4546                           	opt stack 0
  4547  00EC14                     _I2C_Master_Write:
  4548                           	opt stack 28
  4549                           
  4550                           ;I2C.c: 48: I2C_Master_Wait();
  4551                           
  4552                           ;incstack = 0
  4553  00EC14  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4554                           
  4555                           ;I2C.c: 49: SSPBUF = d;
  4556  00EC18  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4557  00EC1C  0012               	return		;funcret
  4558  00EC1E                     __end_of_I2C_Master_Write:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           plusw1	equ	0xFE3
  4570                           indf2	equ	0xFDF
  4571                           postinc2	equ	0xFDE
  4572                           postdec2	equ	0xFDD
  4573                           plusw2	equ	0xFDB
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _I2C_Master_Stop *****************
  4579 ;; Defined at:
  4580 ;;		line 40 in file "I2C.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;		None
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:        0 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    1
  4601 ;; This function calls:
  4602 ;;		_I2C_Master_Wait
  4603 ;; This function is called by:
  4604 ;;		_set_time
  4605 ;;		_read_sensor
  4606 ;;		_poweroff_sensor
  4607 ;;		_timer_done
  4608 ;;		_tca_select
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text20
  4613  00EC0C                     __ptext20:
  4614                           	opt stack 0
  4615  00EC0C                     _I2C_Master_Stop:
  4616                           	opt stack 28
  4617                           
  4618                           ;I2C.c: 42: I2C_Master_Wait();
  4619                           
  4620                           ;incstack = 0
  4621  00EC0C  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4622                           
  4623                           ;I2C.c: 43: PEN = 1;
  4624  00EC10  84C5               	bsf	4037,2,c	;volatile
  4625  00EC12  0012               	return		;funcret
  4626  00EC14                     __end_of_I2C_Master_Stop:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           plusw1	equ	0xFE3
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           plusw2	equ	0xFDB
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function _I2C_Master_Start *****************
  4647 ;; Defined at:
  4648 ;;		line 28 in file "I2C.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  2    2[None  ] int 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        0 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    1
  4669 ;; This function calls:
  4670 ;;		_I2C_Master_Wait
  4671 ;; This function is called by:
  4672 ;;		_set_time
  4673 ;;		_read_sensor
  4674 ;;		_poweroff_sensor
  4675 ;;		_timer_done
  4676 ;;		_tca_select
  4677 ;; This function uses a non-reentrant model
  4678 ;;
  4679                           
  4680                           	psect	text21
  4681  00EC04                     __ptext21:
  4682                           	opt stack 0
  4683  00EC04                     _I2C_Master_Start:
  4684                           	opt stack 28
  4685                           
  4686                           ;I2C.c: 30: I2C_Master_Wait();
  4687                           
  4688                           ;incstack = 0
  4689  00EC04  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4690                           
  4691                           ;I2C.c: 31: SEN = 1;
  4692  00EC08  80C5               	bsf	4037,0,c	;volatile
  4693  00EC0A  0012               	return		;funcret
  4694  00EC0C                     __end_of_I2C_Master_Start:
  4695                           	opt stack 0
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           postinc0	equ	0xFEE
  4704                           wreg	equ	0xFE8
  4705                           plusw1	equ	0xFE3
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           plusw2	equ	0xFDB
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _I2C_Master_Read *****************
  4715 ;; Defined at:
  4716 ;;		line 52 in file "I2C.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  a               1    wreg     unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  a               1    1[COMRAM] unsigned char 
  4721 ;;  temp            1    2[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      unsigned char 
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0, cstack
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4732 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;Total ram usage:        2 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    1
  4738 ;; This function calls:
  4739 ;;		_I2C_Master_Wait
  4740 ;; This function is called by:
  4741 ;;		_read_sensor
  4742 ;;		_timer_done
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text22
  4747  00ECDA                     __ptext22:
  4748                           	opt stack 0
  4749  00ECDA                     _I2C_Master_Read:
  4750                           	opt stack 28
  4751                           
  4752                           ;incstack = 0
  4753                           ;I2C_Master_Read@a stored from wreg
  4754  00ECDA  6E02               	movwf	I2C_Master_Read@a,c
  4755                           
  4756                           ;I2C.c: 54: unsigned char temp;
  4757                           ;I2C.c: 55: I2C_Master_Wait();
  4758  00ECDC  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4759                           
  4760                           ;I2C.c: 56: RCEN = 1;
  4761  00ECE0  86C5               	bsf	4037,3,c	;volatile
  4762                           
  4763                           ;I2C.c: 57: I2C_Master_Wait();
  4764  00ECE2  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4765                           
  4766                           ;I2C.c: 58: temp = SSPBUF;
  4767  00ECE6  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  4768                           
  4769                           ;I2C.c: 59: I2C_Master_Wait();
  4770  00ECEA  EC1B  F076         	call	_I2C_Master_Wait	;wreg free
  4771                           
  4772                           ;I2C.c: 60: ACKDT = (a)?0:1;
  4773  00ECEE  5002               	movf	I2C_Master_Read@a,w,c
  4774  00ECF0  A4D8               	btfss	status,2,c
  4775  00ECF2  D002               	goto	u30
  4776  00ECF4  8AC5               	bsf	4037,5,c	;volatile
  4777  00ECF6  D001               	goto	l950
  4778  00ECF8                     u30:
  4779  00ECF8  9AC5               	bcf	4037,5,c	;volatile
  4780  00ECFA                     l950:
  4781                           
  4782                           ;I2C.c: 61: ACKEN = 1;
  4783  00ECFA  88C5               	bsf	4037,4,c	;volatile
  4784                           
  4785                           ;I2C.c: 62: return temp;
  4786  00ECFC  5003               	movf	I2C_Master_Read@temp,w,c
  4787  00ECFE  0012               	return	
  4788  00ED00                     __end_of_I2C_Master_Read:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           plusw1	equ	0xFE3
  4800                           indf2	equ	0xFDF
  4801                           postinc2	equ	0xFDE
  4802                           postdec2	equ	0xFDD
  4803                           plusw2	equ	0xFDB
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _I2C_Master_Wait *****************
  4809 ;; Defined at:
  4810 ;;		line 23 in file "I2C.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;                  1    wreg      void 
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; This function calls:
  4831 ;;		Nothing
  4832 ;; This function is called by:
  4833 ;;		_I2C_Master_Start
  4834 ;;		_I2C_Master_Stop
  4835 ;;		_I2C_Master_Write
  4836 ;;		_I2C_Master_Read
  4837 ;;		_I2C_Master_RepeatedStart
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text23
  4842  00EC36                     __ptext23:
  4843                           	opt stack 0
  4844  00EC36                     _I2C_Master_Wait:
  4845                           	opt stack 28
  4846  00EC36                     l208:
  4847  00EC36  B4C7               	btfsc	4039,2,c	;volatile
  4848  00EC38  D7FE               	goto	l208
  4849  00EC3A  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4850  00EC3E  0E1F               	movlw	31
  4851  00EC40  1601               	andwf	??_I2C_Master_Wait,f,c
  4852  00EC42  B4D8               	btfsc	status,2,c
  4853  00EC44  0012               	return	
  4854  00EC46  D7F7               	goto	l208
  4855  00EC48                     __end_of_I2C_Master_Wait:
  4856                           	opt stack 0
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           postinc0	equ	0xFEE
  4865                           wreg	equ	0xFE8
  4866                           plusw1	equ	0xFE3
  4867                           indf2	equ	0xFDF
  4868                           postinc2	equ	0xFDE
  4869                           postdec2	equ	0xFDD
  4870                           plusw2	equ	0xFDB
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function _agitator_move *****************
  4876 ;; Defined at:
  4877 ;;		line 51 in file "main.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  a               1    wreg     void 
  4880 ;;  b               1    0[COMRAM] void 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  a               1    1[COMRAM] void 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		wreg
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4892 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4893 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;Total ram usage:        2 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_main
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text24
  4906  00EC5E                     __ptext24:
  4907                           	opt stack 0
  4908  00EC5E                     _agitator_move:
  4909                           	opt stack 30
  4910                           
  4911                           ;incstack = 0
  4912                           ;agitator_move@a stored from wreg
  4913  00EC5E  6E02               	movwf	agitator_move@a,c
  4914                           
  4915                           ;main.c: 52: LATEbits.LATE0 = a;
  4916  00EC60  B002               	btfsc	agitator_move@a,0,c
  4917  00EC62  D002               	bra	u1135
  4918  00EC64  908D               	bcf	3981,0,c	;volatile
  4919  00EC66  D001               	bra	u1136
  4920  00EC68                     u1135:
  4921  00EC68  808D               	bsf	3981,0,c	;volatile
  4922  00EC6A                     u1136:
  4923                           
  4924                           ;main.c: 53: LATEbits.LATE1 = b;
  4925  00EC6A  B001               	btfsc	agitator_move@b,0,c
  4926  00EC6C  D002               	bra	u1145
  4927  00EC6E  928D               	bcf	3981,1,c	;volatile
  4928  00EC70  D001               	bra	u1146
  4929  00EC72                     u1145:
  4930  00EC72  828D               	bsf	3981,1,c	;volatile
  4931  00EC74                     u1146:
  4932  00EC74  0012               	return		;funcret
  4933  00EC76                     __end_of_agitator_move:
  4934                           	opt stack 0
  4935                           tblptru	equ	0xFF8
  4936                           tblptrh	equ	0xFF7
  4937                           tblptrl	equ	0xFF6
  4938                           tablat	equ	0xFF5
  4939                           prodh	equ	0xFF4
  4940                           prodl	equ	0xFF3
  4941                           intcon	equ	0xFF2
  4942                           postinc0	equ	0xFEE
  4943                           wreg	equ	0xFE8
  4944                           plusw1	equ	0xFE3
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           plusw2	equ	0xFDB
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _activate_stepper *****************
  4954 ;; Defined at:
  4955 ;;		line 30 in file "main.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  motor           1    wreg     unsigned char 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;  motor           1    2[COMRAM] unsigned char 
  4960 ;;  i               1    3[COMRAM] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0, prodl, prodh
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;Total ram usage:        4 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_main
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text25
  4984  00EFD8                     __ptext25:
  4985                           	opt stack 0
  4986  00EFD8                     _activate_stepper:
  4987                           	opt stack 30
  4988                           
  4989                           ;incstack = 0
  4990                           ;activate_stepper@motor stored from wreg
  4991  00EFD8  6E03               	movwf	activate_stepper@motor,c
  4992                           
  4993                           ;main.c: 31: LATA = 0xFF;
  4994  00EFDA  6889               	setf	3977,c	;volatile
  4995                           
  4996                           ;main.c: 32: _delay((unsigned long)((50)*(10000000/4000.0)));
  4997  00EFDC  0EA3               	movlw	163
  4998  00EFDE  6E01               	movwf	??_activate_stepper& (0+255),c
  4999  00EFE0  0E55               	movlw	85
  5000  00EFE2                     u1987:
  5001  00EFE2  2EE8               	decfsz	wreg,f,c
  5002  00EFE4  D7FE               	bra	u1987
  5003  00EFE6  2E01               	decfsz	??_activate_stepper& (0+255),f,c
  5004  00EFE8  D7FC               	bra	u1987
  5005  00EFEA  F000               	nop	
  5006                           
  5007                           ;main.c: 33: if(motor < 4){
  5008  00EFEC  0E04               	movlw	4
  5009  00EFEE  6003               	cpfslt	activate_stepper@motor,c
  5010  00EFF0  D02F               	goto	l1140
  5011                           
  5012                           ;main.c: 35: LATA = (1 << ((motor*2)-1));
  5013  00EFF2  5003               	movf	activate_stepper@motor,w,c
  5014  00EFF4  0D02               	mullw	2
  5015  00EFF6  CFF3 F001          	movff	prodl,??_activate_stepper
  5016  00EFFA  0EFF               	movlw	-1
  5017  00EFFC  2601               	addwf	??_activate_stepper,f,c
  5018  00EFFE  0E01               	movlw	1
  5019  00F000  6E02               	movwf	(??_activate_stepper+1)& (0+255),c
  5020  00F002  2A01               	incf	??_activate_stepper,f,c
  5021  00F004  D002               	goto	u274
  5022  00F006                     u275:
  5023  00F006  90D8               	bcf	status,0,c
  5024  00F008  3602               	rlcf	??_activate_stepper+1,f,c
  5025  00F00A                     u274:
  5026  00F00A  2E01               	decfsz	??_activate_stepper,f,c
  5027  00F00C  D7FC               	goto	u275
  5028  00F00E  5002               	movf	??_activate_stepper+1,w,c
  5029  00F010  6E89               	movwf	3977,c	;volatile
  5030                           
  5031                           ;main.c: 36: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(10000000/4000.0)));};
  5032  00F012  0E00               	movlw	0
  5033  00F014  6E04               	movwf	activate_stepper@i,c
  5034  00F016                     l1130:
  5035  00F016  0E09               	movlw	9
  5036  00F018  6404               	cpfsgt	activate_stepper@i,c
  5037  00F01A  D001               	goto	l1134
  5038  00F01C  D00E               	goto	l1138
  5039  00F01E                     l1134:
  5040  00F01E  0E02               	movlw	2
  5041  00F020  6E02               	movwf	(??_activate_stepper+1)& (0+255),c
  5042  00F022  0E3F               	movlw	63
  5043  00F024  6E01               	movwf	??_activate_stepper& (0+255),c
  5044  00F026  0E2B               	movlw	43
  5045  00F028                     u1997:
  5046  00F028  2EE8               	decfsz	wreg,f,c
  5047  00F02A  D7FE               	bra	u1997
  5048  00F02C  2E01               	decfsz	??_activate_stepper& (0+255),f,c
  5049  00F02E  D7FC               	bra	u1997
  5050  00F030  2E02               	decfsz	(??_activate_stepper+1)& (0+255),f,c
  5051  00F032  D7FA               	bra	u1997
  5052  00F034  F000               	nop	
  5053  00F036  2A04               	incf	activate_stepper@i,f,c
  5054  00F038  D7EE               	goto	l1130
  5055  00F03A                     l1138:
  5056                           
  5057                           ;main.c: 37: _delay((unsigned long)((200)*(10000000/4000.0)));
  5058  00F03A  0E03               	movlw	3
  5059  00F03C  6E02               	movwf	(??_activate_stepper+1)& (0+255),c
  5060  00F03E  0E8A               	movlw	138
  5061  00F040  6E01               	movwf	??_activate_stepper& (0+255),c
  5062  00F042  0E56               	movlw	86
  5063  00F044                     u2007:
  5064  00F044  2EE8               	decfsz	wreg,f,c
  5065  00F046  D7FE               	bra	u2007
  5066  00F048  2E01               	decfsz	??_activate_stepper& (0+255),f,c
  5067  00F04A  D7FC               	bra	u2007
  5068  00F04C  2E02               	decfsz	(??_activate_stepper+1)& (0+255),f,c
  5069  00F04E  D7FA               	bra	u2007
  5070  00F050                     l1140:
  5071                           
  5072                           ;main.c: 38: }
  5073                           ;main.c: 39: LATA = 0xFF;
  5074  00F050  6889               	setf	3977,c	;volatile
  5075  00F052  0012               	return	
  5076  00F054                     __end_of_activate_stepper:
  5077                           	opt stack 0
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           intcon	equ	0xFF2
  5085                           postinc0	equ	0xFEE
  5086                           wreg	equ	0xFE8
  5087                           plusw1	equ	0xFE3
  5088                           indf2	equ	0xFDF
  5089                           postinc2	equ	0xFDE
  5090                           postdec2	equ	0xFDD
  5091                           plusw2	equ	0xFDB
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096 ;; *************** function ___lwtoft *****************
  5097 ;; Defined at:
  5098 ;;		line 28 in file "C:\Users\Andrew\Desktop\xc8\sources\common\lwtoft.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  c               2    8[COMRAM] unsigned int 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  3    8[COMRAM] float 
  5105 ;; Registers used:
  5106 ;;		wreg, status,2, status,0, cstack
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5112 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;Total ram usage:        3 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    1
  5119 ;; This function calls:
  5120 ;;		___ftpack
  5121 ;; This function is called by:
  5122 ;;		_main
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text26
  5127  00ECB6                     __ptext26:
  5128                           	opt stack 0
  5129  00ECB6                     ___lwtoft:
  5130                           	opt stack 29
  5131                           
  5132                           ;incstack = 0
  5133  00ECB6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5134  00ECBA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5135  00ECBE  6A03               	clrf	___ftpack@arg+2,c
  5136  00ECC0  0E8E               	movlw	142
  5137  00ECC2  6E04               	movwf	___ftpack@exp,c
  5138  00ECC4  0E00               	movlw	0
  5139  00ECC6  6E05               	movwf	___ftpack@sign,c
  5140  00ECC8  ECF3  F078         	call	___ftpack	;wreg free
  5141  00ECCC  C001  F009         	movff	?___ftpack,?___lwtoft
  5142  00ECD0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5143  00ECD4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5144  00ECD8  0012               	return	
  5145  00ECDA                     __end_of___lwtoft:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           plusw1	equ	0xFE3
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           plusw2	equ	0xFDB
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function ___ftpack *****************
  5166 ;; Defined at:
  5167 ;;		line 62 in file "C:\Users\Andrew\Desktop\xc8\sources\common\float.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  arg             3    0[COMRAM] unsigned um
  5170 ;;  exp             1    3[COMRAM] unsigned char 
  5171 ;;  sign            1    4[COMRAM] unsigned char 
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;		None
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  3    0[COMRAM] float 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5183 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;Total ram usage:        8 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		___lwtoft
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text27
  5197  00F1E6                     __ptext27:
  5198                           	opt stack 0
  5199  00F1E6                     ___ftpack:
  5200                           	opt stack 29
  5201                           
  5202                           ;incstack = 0
  5203  00F1E6  5004               	movf	___ftpack@exp,w,c
  5204  00F1E8  B4D8               	btfsc	status,2,c
  5205  00F1EA  D005               	goto	l1718
  5206  00F1EC  5001               	movf	___ftpack@arg,w,c
  5207  00F1EE  1002               	iorwf	___ftpack@arg+1,w,c
  5208  00F1F0  1003               	iorwf	___ftpack@arg+2,w,c
  5209  00F1F2  A4D8               	btfss	status,2,c
  5210  00F1F4  D00C               	goto	l1724
  5211  00F1F6                     l1718:
  5212  00F1F6  0E00               	movlw	0
  5213  00F1F8  6E01               	movwf	?___ftpack,c
  5214  00F1FA  0E00               	movlw	0
  5215  00F1FC  6E02               	movwf	?___ftpack+1,c
  5216  00F1FE  0E00               	movlw	0
  5217  00F200  6E03               	movwf	?___ftpack+2,c
  5218  00F202  0012               	return	
  5219  00F204                     l1722:
  5220  00F204  2A04               	incf	___ftpack@exp,f,c
  5221  00F206  90D8               	bcf	status,0,c
  5222  00F208  3203               	rrcf	___ftpack@arg+2,f,c
  5223  00F20A  3202               	rrcf	___ftpack@arg+1,f,c
  5224  00F20C  3201               	rrcf	___ftpack@arg,f,c
  5225  00F20E                     l1724:
  5226  00F20E  0E00               	movlw	0
  5227  00F210  1401               	andwf	___ftpack@arg,w,c
  5228  00F212  6E06               	movwf	??___ftpack& (0+255),c
  5229  00F214  0E00               	movlw	0
  5230  00F216  1402               	andwf	___ftpack@arg+1,w,c
  5231  00F218  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5232  00F21A  0EFE               	movlw	254
  5233  00F21C  1403               	andwf	___ftpack@arg+2,w,c
  5234  00F21E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5235  00F220  5006               	movf	??___ftpack,w,c
  5236  00F222  1007               	iorwf	??___ftpack+1,w,c
  5237  00F224  1008               	iorwf	??___ftpack+2,w,c
  5238  00F226  B4D8               	btfsc	status,2,c
  5239  00F228  D00C               	goto	l1730
  5240  00F22A  D7EC               	goto	l1722
  5241  00F22C                     l1726:
  5242  00F22C  2A04               	incf	___ftpack@exp,f,c
  5243  00F22E  0E01               	movlw	1
  5244  00F230  2601               	addwf	___ftpack@arg,f,c
  5245  00F232  0E00               	movlw	0
  5246  00F234  2202               	addwfc	___ftpack@arg+1,f,c
  5247  00F236  0E00               	movlw	0
  5248  00F238  2203               	addwfc	___ftpack@arg+2,f,c
  5249  00F23A  90D8               	bcf	status,0,c
  5250  00F23C  3203               	rrcf	___ftpack@arg+2,f,c
  5251  00F23E  3202               	rrcf	___ftpack@arg+1,f,c
  5252  00F240  3201               	rrcf	___ftpack@arg,f,c
  5253  00F242                     l1730:
  5254  00F242  0E00               	movlw	0
  5255  00F244  1401               	andwf	___ftpack@arg,w,c
  5256  00F246  6E06               	movwf	??___ftpack& (0+255),c
  5257  00F248  0E00               	movlw	0
  5258  00F24A  1402               	andwf	___ftpack@arg+1,w,c
  5259  00F24C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5260  00F24E  0EFF               	movlw	255
  5261  00F250  1403               	andwf	___ftpack@arg+2,w,c
  5262  00F252  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5263  00F254  5006               	movf	??___ftpack,w,c
  5264  00F256  1007               	iorwf	??___ftpack+1,w,c
  5265  00F258  1008               	iorwf	??___ftpack+2,w,c
  5266  00F25A  B4D8               	btfsc	status,2,c
  5267  00F25C  D006               	goto	l1734
  5268  00F25E  D7E6               	goto	l1726
  5269  00F260                     l1732:
  5270  00F260  0604               	decf	___ftpack@exp,f,c
  5271  00F262  90D8               	bcf	status,0,c
  5272  00F264  3601               	rlcf	___ftpack@arg,f,c
  5273  00F266  3602               	rlcf	___ftpack@arg+1,f,c
  5274  00F268  3603               	rlcf	___ftpack@arg+2,f,c
  5275  00F26A                     l1734:
  5276  00F26A  BE02               	btfsc	___ftpack@arg+1,7,c
  5277  00F26C  D003               	goto	l520
  5278  00F26E  0E02               	movlw	2
  5279  00F270  6004               	cpfslt	___ftpack@exp,c
  5280  00F272  D7F6               	goto	l1732
  5281  00F274                     l520:
  5282  00F274  A004               	btfss	___ftpack@exp,0,c
  5283  00F276  9E02               	bcf	___ftpack@arg+1,7,c
  5284  00F278  90D8               	bcf	status,0,c
  5285  00F27A  3204               	rrcf	___ftpack@exp,f,c
  5286  00F27C  5004               	movf	___ftpack@exp,w,c
  5287  00F27E  1203               	iorwf	___ftpack@arg+2,f,c
  5288  00F280  5005               	movf	___ftpack@sign,w,c
  5289  00F282  A4D8               	btfss	status,2,c
  5290  00F284  8E03               	bsf	___ftpack@arg+2,7,c
  5291  00F286  C001  F001         	movff	___ftpack@arg,?___ftpack
  5292  00F28A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5293  00F28E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5294  00F292  0012               	return	
  5295  00F294                     __end_of___ftpack:
  5296                           	opt stack 0
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           postinc0	equ	0xFEE
  5305                           wreg	equ	0xFE8
  5306                           plusw1	equ	0xFE3
  5307                           indf2	equ	0xFDF
  5308                           postinc2	equ	0xFDE
  5309                           postdec2	equ	0xFDD
  5310                           plusw2	equ	0xFDB
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function ___ftge *****************
  5316 ;; Defined at:
  5317 ;;		line 4 in file "C:\Users\Andrew\Desktop\xc8\sources\common\ftge.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  ff1             3   11[COMRAM] float 
  5320 ;;  ff2             3   14[COMRAM] float 
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;		None               void
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        9 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; This function calls:
  5339 ;;		Nothing
  5340 ;; This function is called by:
  5341 ;;		_main
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text28
  5346  00F156                     __ptext28:
  5347                           	opt stack 0
  5348  00F156                     ___ftge:
  5349                           	opt stack 30
  5350                           
  5351                           ;incstack = 0
  5352  00F156  AE0E               	btfss	___ftge@ff1+2,7,c
  5353  00F158  D016               	goto	l2020
  5354  00F15A  C00C  F012         	movff	___ftge@ff1,??___ftge
  5355  00F15E  C00D  F013         	movff	___ftge@ff1+1,??___ftge+1
  5356  00F162  C00E  F014         	movff	___ftge@ff1+2,??___ftge+2
  5357  00F166  1E12               	comf	??___ftge,f,c
  5358  00F168  1E13               	comf	??___ftge+1,f,c
  5359  00F16A  1E14               	comf	??___ftge+2,f,c
  5360  00F16C  2A12               	incf	??___ftge,f,c
  5361  00F16E  0E00               	movlw	0
  5362  00F170  2213               	addwfc	??___ftge+1,f,c
  5363  00F172  2214               	addwfc	??___ftge+2,f,c
  5364  00F174  0E00               	movlw	0
  5365  00F176  2412               	addwf	??___ftge,w,c
  5366  00F178  6E0C               	movwf	___ftge@ff1,c
  5367  00F17A  0E00               	movlw	0
  5368  00F17C  2013               	addwfc	??___ftge+1,w,c
  5369  00F17E  6E0D               	movwf	___ftge@ff1+1,c
  5370  00F180  0E80               	movlw	128
  5371  00F182  2014               	addwfc	??___ftge+2,w,c
  5372  00F184  6E0E               	movwf	___ftge@ff1+2,c
  5373  00F186                     l2020:
  5374  00F186  AE11               	btfss	___ftge@ff2+2,7,c
  5375  00F188  D016               	goto	l2024
  5376  00F18A  C00F  F012         	movff	___ftge@ff2,??___ftge
  5377  00F18E  C010  F013         	movff	___ftge@ff2+1,??___ftge+1
  5378  00F192  C011  F014         	movff	___ftge@ff2+2,??___ftge+2
  5379  00F196  1E12               	comf	??___ftge,f,c
  5380  00F198  1E13               	comf	??___ftge+1,f,c
  5381  00F19A  1E14               	comf	??___ftge+2,f,c
  5382  00F19C  2A12               	incf	??___ftge,f,c
  5383  00F19E  0E00               	movlw	0
  5384  00F1A0  2213               	addwfc	??___ftge+1,f,c
  5385  00F1A2  2214               	addwfc	??___ftge+2,f,c
  5386  00F1A4  0E00               	movlw	0
  5387  00F1A6  2412               	addwf	??___ftge,w,c
  5388  00F1A8  6E0F               	movwf	___ftge@ff2,c
  5389  00F1AA  0E00               	movlw	0
  5390  00F1AC  2013               	addwfc	??___ftge+1,w,c
  5391  00F1AE  6E10               	movwf	___ftge@ff2+1,c
  5392  00F1B0  0E80               	movlw	128
  5393  00F1B2  2014               	addwfc	??___ftge+2,w,c
  5394  00F1B4  6E11               	movwf	___ftge@ff2+2,c
  5395  00F1B6                     l2024:
  5396  00F1B6  0E00               	movlw	0
  5397  00F1B8  1A0C               	xorwf	___ftge@ff1,f,c
  5398  00F1BA  0E00               	movlw	0
  5399  00F1BC  1A0D               	xorwf	___ftge@ff1+1,f,c
  5400  00F1BE  0E80               	movlw	128
  5401  00F1C0  1A0E               	xorwf	___ftge@ff1+2,f,c
  5402  00F1C2  0E00               	movlw	0
  5403  00F1C4  1A0F               	xorwf	___ftge@ff2,f,c
  5404  00F1C6  0E00               	movlw	0
  5405  00F1C8  1A10               	xorwf	___ftge@ff2+1,f,c
  5406  00F1CA  0E80               	movlw	128
  5407  00F1CC  1A11               	xorwf	___ftge@ff2+2,f,c
  5408  00F1CE  500F               	movf	___ftge@ff2,w,c
  5409  00F1D0  5C0C               	subwf	___ftge@ff1,w,c
  5410  00F1D2  5010               	movf	___ftge@ff2+1,w,c
  5411  00F1D4  580D               	subwfb	___ftge@ff1+1,w,c
  5412  00F1D6  5011               	movf	___ftge@ff2+2,w,c
  5413  00F1D8  580E               	subwfb	___ftge@ff1+2,w,c
  5414  00F1DA  B0D8               	btfsc	status,0,c
  5415  00F1DC  D002               	goto	l2030
  5416  00F1DE  90D8               	bcf	status,0,c
  5417  00F1E0  0012               	return	
  5418  00F1E2                     l2030:
  5419  00F1E2  80D8               	bsf	status,0,c
  5420  00F1E4  0012               	return	
  5421  00F1E6                     __end_of___ftge:
  5422                           	opt stack 0
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           intcon	equ	0xFF2
  5430                           postinc0	equ	0xFEE
  5431                           wreg	equ	0xFE8
  5432                           plusw1	equ	0xFE3
  5433                           indf2	equ	0xFDF
  5434                           postinc2	equ	0xFDE
  5435                           postdec2	equ	0xFDD
  5436                           plusw2	equ	0xFDB
  5437                           fsr2h	equ	0xFDA
  5438                           fsr2l	equ	0xFD9
  5439                           status	equ	0xFD8
  5440                           
  5441 ;; *************** function _I2C_Master_Init *****************
  5442 ;; Defined at:
  5443 ;;		line 12 in file "I2C.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  c               4   13[COMRAM] const unsigned long 
  5446 ;; Auto vars:     Size  Location     Type
  5447 ;;		None
  5448 ;; Return value:  Size  Location     Type
  5449 ;;                  1    wreg      void 
  5450 ;; Registers used:
  5451 ;;		wreg, status,2, status,0, cstack
  5452 ;; Tracked objects:
  5453 ;;		On entry : 0/0
  5454 ;;		On exit  : 0/0
  5455 ;;		Unchanged: 0/0
  5456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;Total ram usage:        8 bytes
  5462 ;; Hardware stack levels used:    1
  5463 ;; Hardware stack levels required when called:    1
  5464 ;; This function calls:
  5465 ;;		___lldiv
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text29
  5472  00EF24                     __ptext29:
  5473                           	opt stack 0
  5474  00EF24                     _I2C_Master_Init:
  5475                           	opt stack 29
  5476                           
  5477                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  5478                           
  5479                           ;incstack = 0
  5480  00EF24  0E00               	movlw	0
  5481  00EF26  6EC7               	movwf	4039,c	;volatile
  5482                           
  5483                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  5484  00EF28  0E28               	movlw	40
  5485  00EF2A  6EC6               	movwf	4038,c	;volatile
  5486                           
  5487                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  5488  00EF2C  0E00               	movlw	0
  5489  00EF2E  6EC5               	movwf	4037,c	;volatile
  5490                           
  5491                           ;I2C.c: 18: SSPADD = (10000000/(4*c))-1;
  5492  00EF30  0E80               	movlw	128
  5493  00EF32  6E01               	movwf	___lldiv@dividend,c
  5494  00EF34  0E96               	movlw	150
  5495  00EF36  6E02               	movwf	___lldiv@dividend+1,c
  5496  00EF38  0E98               	movlw	152
  5497  00EF3A  6E03               	movwf	___lldiv@dividend+2,c
  5498  00EF3C  0E00               	movlw	0
  5499  00EF3E  6E04               	movwf	___lldiv@dividend+3,c
  5500  00EF40  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5501  00EF44  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5502  00EF48  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5503  00EF4C  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5504  00EF50  0E02               	movlw	2
  5505  00EF52                     u1445:
  5506  00EF52  90D8               	bcf	status,0,c
  5507  00EF54  3612               	rlcf	??_I2C_Master_Init,f,c
  5508  00EF56  3613               	rlcf	??_I2C_Master_Init+1,f,c
  5509  00EF58  3614               	rlcf	??_I2C_Master_Init+2,f,c
  5510  00EF5A  3615               	rlcf	??_I2C_Master_Init+3,f,c
  5511  00EF5C  2EE8               	decfsz	wreg,f,c
  5512  00EF5E  D7F9               	goto	u1445
  5513  00EF60  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  5514  00EF64  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5515  00EF68  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5516  00EF6C  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5517  00EF70  EC6A  F078         	call	___lldiv	;wreg free
  5518  00EF74  0401               	decf	?___lldiv,w,c
  5519  00EF76  6EC8               	movwf	4040,c	;volatile
  5520                           
  5521                           ;I2C.c: 19: TRISC3 = 1;
  5522  00EF78  8694               	bsf	3988,3,c	;volatile
  5523                           
  5524                           ;I2C.c: 20: TRISC4 = 1;
  5525  00EF7A  8894               	bsf	3988,4,c	;volatile
  5526  00EF7C  0012               	return		;funcret
  5527  00EF7E                     __end_of_I2C_Master_Init:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           plusw1	equ	0xFE3
  5539                           indf2	equ	0xFDF
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           plusw2	equ	0xFDB
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function ___lldiv *****************
  5548 ;; Defined at:
  5549 ;;		line 8 in file "C:\Users\Andrew\Desktop\xc8\sources\common\lldiv.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  dividend        4    0[COMRAM] unsigned long 
  5552 ;;  divisor         4    4[COMRAM] unsigned long 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  quotient        4    8[COMRAM] unsigned long 
  5555 ;;  counter         1   12[COMRAM] unsigned char 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  4    0[COMRAM] unsigned long 
  5558 ;; Registers used:
  5559 ;;		wreg, status,2, status,0
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;Total ram usage:       13 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_I2C_Master_Init
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text30
  5579  00F0D4                     __ptext30:
  5580                           	opt stack 0
  5581  00F0D4                     ___lldiv:
  5582                           	opt stack 29
  5583                           
  5584                           ;incstack = 0
  5585  00F0D4  0E00               	movlw	0
  5586  00F0D6  6E09               	movwf	___lldiv@quotient,c
  5587  00F0D8  0E00               	movlw	0
  5588  00F0DA  6E0A               	movwf	___lldiv@quotient+1,c
  5589  00F0DC  0E00               	movlw	0
  5590  00F0DE  6E0B               	movwf	___lldiv@quotient+2,c
  5591  00F0E0  0E00               	movlw	0
  5592  00F0E2  6E0C               	movwf	___lldiv@quotient+3,c
  5593  00F0E4  5005               	movf	___lldiv@divisor,w,c
  5594  00F0E6  1006               	iorwf	___lldiv@divisor+1,w,c
  5595  00F0E8  1007               	iorwf	___lldiv@divisor+2,w,c
  5596  00F0EA  1008               	iorwf	___lldiv@divisor+3,w,c
  5597  00F0EC  B4D8               	btfsc	status,2,c
  5598  00F0EE  D02A               	goto	l650
  5599  00F0F0  0E01               	movlw	1
  5600  00F0F2  6E0D               	movwf	___lldiv@counter,c
  5601  00F0F4  D006               	goto	l1758
  5602  00F0F6                     l1756:
  5603  00F0F6  90D8               	bcf	status,0,c
  5604  00F0F8  3605               	rlcf	___lldiv@divisor,f,c
  5605  00F0FA  3606               	rlcf	___lldiv@divisor+1,f,c
  5606  00F0FC  3607               	rlcf	___lldiv@divisor+2,f,c
  5607  00F0FE  3608               	rlcf	___lldiv@divisor+3,f,c
  5608  00F100  2A0D               	incf	___lldiv@counter,f,c
  5609  00F102                     l1758:
  5610  00F102  AE08               	btfss	___lldiv@divisor+3,7,c
  5611  00F104  D7F8               	goto	l1756
  5612  00F106                     l1760:
  5613  00F106  90D8               	bcf	status,0,c
  5614  00F108  3609               	rlcf	___lldiv@quotient,f,c
  5615  00F10A  360A               	rlcf	___lldiv@quotient+1,f,c
  5616  00F10C  360B               	rlcf	___lldiv@quotient+2,f,c
  5617  00F10E  360C               	rlcf	___lldiv@quotient+3,f,c
  5618  00F110  5005               	movf	___lldiv@divisor,w,c
  5619  00F112  5C01               	subwf	___lldiv@dividend,w,c
  5620  00F114  5006               	movf	___lldiv@divisor+1,w,c
  5621  00F116  5802               	subwfb	___lldiv@dividend+1,w,c
  5622  00F118  5007               	movf	___lldiv@divisor+2,w,c
  5623  00F11A  5803               	subwfb	___lldiv@dividend+2,w,c
  5624  00F11C  5008               	movf	___lldiv@divisor+3,w,c
  5625  00F11E  5804               	subwfb	___lldiv@dividend+3,w,c
  5626  00F120  A0D8               	btfss	status,0,c
  5627  00F122  D009               	goto	l1768
  5628  00F124  5005               	movf	___lldiv@divisor,w,c
  5629  00F126  5E01               	subwf	___lldiv@dividend,f,c
  5630  00F128  5006               	movf	___lldiv@divisor+1,w,c
  5631  00F12A  5A02               	subwfb	___lldiv@dividend+1,f,c
  5632  00F12C  5007               	movf	___lldiv@divisor+2,w,c
  5633  00F12E  5A03               	subwfb	___lldiv@dividend+2,f,c
  5634  00F130  5008               	movf	___lldiv@divisor+3,w,c
  5635  00F132  5A04               	subwfb	___lldiv@dividend+3,f,c
  5636  00F134  8009               	bsf	___lldiv@quotient,0,c
  5637  00F136                     l1768:
  5638  00F136  90D8               	bcf	status,0,c
  5639  00F138  3208               	rrcf	___lldiv@divisor+3,f,c
  5640  00F13A  3207               	rrcf	___lldiv@divisor+2,f,c
  5641  00F13C  3206               	rrcf	___lldiv@divisor+1,f,c
  5642  00F13E  3205               	rrcf	___lldiv@divisor,f,c
  5643  00F140  2E0D               	decfsz	___lldiv@counter,f,c
  5644  00F142  D7E1               	goto	l1760
  5645  00F144                     l650:
  5646  00F144  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5647  00F148  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5648  00F14C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5649  00F150  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5650  00F154  0012               	return		;funcret
  5651  00F156                     __end_of___lldiv:
  5652                           	opt stack 0
  5653                           tblptru	equ	0xFF8
  5654                           tblptrh	equ	0xFF7
  5655                           tblptrl	equ	0xFF6
  5656                           tablat	equ	0xFF5
  5657                           prodh	equ	0xFF4
  5658                           prodl	equ	0xFF3
  5659                           intcon	equ	0xFF2
  5660                           postinc0	equ	0xFEE
  5661                           wreg	equ	0xFE8
  5662                           plusw1	equ	0xFE3
  5663                           indf2	equ	0xFDF
  5664                           postinc2	equ	0xFDE
  5665                           postdec2	equ	0xFDD
  5666                           plusw2	equ	0xFDB
  5667                           fsr2h	equ	0xFDA
  5668                           fsr2l	equ	0xFD9
  5669                           status	equ	0xFD8
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           intcon	equ	0xFF2
  5677                           postinc0	equ	0xFEE
  5678                           wreg	equ	0xFE8
  5679                           plusw1	equ	0xFE3
  5680                           indf2	equ	0xFDF
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           plusw2	equ	0xFDB
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688                           	psect	rparam
  5689  0000                     tblptru	equ	0xFF8
  5690                           tblptrh	equ	0xFF7
  5691                           tblptrl	equ	0xFF6
  5692                           tablat	equ	0xFF5
  5693                           prodh	equ	0xFF4
  5694                           prodl	equ	0xFF3
  5695                           intcon	equ	0xFF2
  5696                           postinc0	equ	0xFEE
  5697                           wreg	equ	0xFE8
  5698                           plusw1	equ	0xFE3
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           plusw2	equ	0xFDB
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8


Data Sizes:
    Strings     311
    Constant    18
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    106     114
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_20(CODE[20]), STR_19(CODE[19]), STR_18(CODE[12]), STR_17(CODE[18]), 
		 -> STR_16(CODE[13]), STR_15(CODE[17]), STR_14(CODE[13]), STR_13(CODE[14]), 
		 -> STR_12(CODE[13]), STR_11(CODE[16]), STR_10(CODE[15]), STR_9(CODE[13]), 
		 -> STR_8(CODE[12]), STR_7(CODE[17]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> STR_4(CODE[17]), STR_3(CODE[9]), STR_2(CODE[12]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    check_B_press@time	PTR unsigned char  size(2) Largest target is 2
		 -> main@finalTime(COMRAM[2]), 

    timer_done@time	PTR unsigned char  size(2) Largest target is 2
		 -> main@finalTime(COMRAM[2]), 

    read_sensor@b	PTR unsigned char  size(2) Largest target is 2
		 -> main@B3(COMRAM[2]), main@B2(COMRAM[2]), main@B1(COMRAM[2]), 

    read_sensor@g	PTR unsigned char  size(2) Largest target is 2
		 -> main@G3(COMRAM[2]), main@G2(COMRAM[2]), main@G1(COMRAM[2]), 

    read_sensor@r	PTR unsigned char  size(2) Largest target is 2
		 -> main@R3(COMRAM[2]), main@R2(COMRAM[2]), main@R1(COMRAM[2]), 

    read_sensor@c	PTR unsigned char  size(2) Largest target is 2
		 -> main@C3(COMRAM[2]), main@C2(COMRAM[2]), main@C1(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _tca_select->_I2C_Master_Write
    _set_time->_I2C_Master_Write
    _read_sensor->_I2C_Master_Read
    _read_sensor->_I2C_Master_Write
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _poweroff_sensor->_I2C_Master_Write
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _check_B_press->_timer_done
    _timer_done->_I2C_Master_Read
    _timer_done->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___lwtoft->___ftpack
    ___ftge->___lwtoft
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                74    74      0   18045
                                             32 COMRAM    74    74      0
                    _I2C_Master_Init
                             ___ftge
                            ___lwdiv
                           ___lwtoft
                   _activate_stepper
                      _agitator_move
                      _check_B_press
                            _initLCD
                            _lcdInst
                    _poweroff_sensor
                             _printf
                        _read_sensor
                      _return_motors
                             _rotate
                           _set_time
                        _stop_rotate
                         _tca_select
 ---------------------------------------------------------------------------------
 (1) _tca_select                                           4     4      0    1068
                                              3 COMRAM     4     4      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _stop_rotate                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0    1092
                                              3 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _rotate                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _return_motors                                        4     4      0      45
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          8     0      8    2020
                                              3 COMRAM     8     0      8
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    23      6    4067
                                             12 COMRAM    20    14      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1058
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _poweroff_sensor                                      0     0      0    1046
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_B_press                                        4     2      2    1528
                                              5 COMRAM     4     2      2
                         _timer_done
 ---------------------------------------------------------------------------------
 (2) _timer_done                                           2     0      2    1184
                                              3 COMRAM     2     0      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1046
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _agitator_move                                        2     1      1     236
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _activate_stepper                                     4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2295
                                              8 COMRAM     3     0      3
                           ___ftpack
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1953
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     776
                                             11 COMRAM     9     3      6
                            ___lwdiv (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   ___ftge
     ___lwdiv (ARG)
     ___lwtoft (ARG)
       ___ftpack
       ___lwdiv (ARG)
   ___lwdiv
   ___lwtoft
     ___ftpack
     ___lwdiv (ARG)
   _activate_stepper
   _agitator_move
   _check_B_press
     _timer_done
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _poweroff_sensor
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _read_sensor
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _return_motors
   _rotate
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _stop_rotate
   _tca_select
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6A      72       1       89.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      34        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 11 13:27:47 2017

                       l82 F05A                         l83 F080                         l84 F060  
                       l85 F066                         l97 EE5C                         u30 ECF8  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
                      l100 EE68                        l141 FD06                        l109 F720  
                      l208 EC36                        l520 F274                        l258 F46E  
                      l703 EEC4                        l713 EDDA                        l650 F144  
                      l950 ECFA               __CFG_CPB$OFF 000000                        u320 F088  
                      u340 F092                        u335 F08A                        _PEN 007E2A  
                      u274 F00A               __CFG_CPD$OFF 000000                        u275 F006  
                      _SEN 007E28                        wreg 000FE8            _poweroff_sensor EC94  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l2000 F656  
                     l1130 F016                       l2002 F666                       l2020 F186  
                     l1140 F050                       l2004 F66C                       l2030 F1E2  
                     l1134 F01E                       l2006 F674                       l2024 F1B6  
                     l1138 F03A                       l1180 F06C                       l2300 FE18  
                     l2204 FB90                       l1182 F094                       l1192 F0BC  
                     l1184 F098                       l2160 FA86                       l2064 F70C  
                     l1188 F0A0                       l2308 FE50                       l2180 FAC6  
                     l2172 FAB2                       l2156 FA4E                       l2318 FE8C  
                     l2238 FC6E                       l1800 EDB8                       l1704 EC8C  
                     l2256 FCFA                       l2192 FB32                       l2184 FB1E  
                     l2168 FA9A                       l2088 F79C                       l1730 F242  
                     l1722 F204                       l1802 EDBC                       l1732 F260  
                     l1724 F20E                       l2292 FDE0                       l2284 FDA8  
                     l2276 FD70                       l2268 FD38                       l2196 FB7E  
                     l1734 F26A                       l1726 F22C                       l1718 F1F6  
                     l1806 EDD0                       l1814 ED46                       l1760 F106  
                     l1920 F49C                       l1904 F43C                       l1824 ED5E  
                     l1818 ED4E                       l1756 F0F6                       l1780 EE9A  
                     l1940 F4EA                       l1924 F4B6                       l1908 F440  
                     l1758 F102                       l1790 EEBA                       l1782 EE9E  
                     l1926 F4BA                       l1768 F136                       l1880 F38C  
                     l1874 EE78                       l1778 EE92                       l1962 F540  
                     l1938 F4E6                       l1954 F516                       l1890 F3B0  
                     l1980 F598                       l1956 F526                       l1884 F39C  
                     l1798 EDB0                       l1982 F5A0                       l1990 F5C6  
                     l1974 F582                       l1966 F564                       l1886 F3AA  
                     l1992 F5CC                       l1968 F56C                       l1896 F3DE  
                     l1994 F610                       l1986 F5B4                       STR_1 FF54  
                     STR_2 FFD1                       STR_3 FFF5                       STR_4 FF11  
                     STR_5 FF73                       STR_6 FF81                       STR_7 FF22  
                     STR_8 FFE9                       STR_9 FFC4             timer_done@time 0004  
                     u2007 F044                       u1135 EC68                       u1136 EC6A  
                     u1145 EC72                       u1146 EC74                       u1154 ED8C  
                     u1155 ED86                       _LATA 000F89                       _LATB 000F8A  
                     _LATD 000F8C                       _LATE 000F8D                       u1445 EF52  
                     u1481 F6C0                       u1707 F6F6                       u1717 F734  
                     u1807 FCA2                       u1727 F74A                       u1817 FCC4  
                     u1737 F76C                       u1907 F0AA                       u1827 FD16  
                     u1747 F832                       u1917 F0C6                       u1837 FD2C  
                     u1757 F848                       u1927 EDEA                       u1847 FD50  
                     u1767 F876                       u1937 EE1E                       u1857 FD88  
                     u1777 FBB8                       u1697 F6D4                       u1947 EEE6  
                     u1867 FDC0                       u1787 FBEA                       u1957 EEF0  
                     u1877 FDF8                       u1797 FC00                       u1967 EF12  
                     u1887 FE30                       u1977 EF1C                       u1897 FE68  
                     u1987 EFE2                       _RCEN 007E2B                       u1997 F028  
                     _RSEN 007E29                       _main F68E               ___ftpack@arg 0001  
             ___ftpack@exp 0004                       fsr2h 000FDA                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                _stop_rotate EC00            ??_return_motors 0001  
         ?_I2C_Master_Init 000E           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001          ?_activate_stepper 0001                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D                      STR_10 FF64  
                    STR_11 FF44                      STR_12 FF9D                      STR_20 FEC7  
                    STR_13 FF8F                      STR_21 FF00                      STR_14 FFAA  
                    STR_15 FF33                      STR_16 FFB7                      STR_17 FEEE  
                    STR_18 FFDD                      STR_19 FEDB            __end_of___lldiv F156  
           __CFG_DEBUG$OFF 000000            __end_of___lwdiv EECE            __end_of___lwmod EDE4  
       ??_activate_stepper 0001                      _PORTB 000F81                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000      __end_of_agitator_move EC76  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst EC2A             return_motors@i 0004  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000               main@keypress 0037             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_initLCD EE2A             __CFG_EBTRB$OFF 000000            __end_of_dpowers FEBF  
             ?_read_sensor 0004            __end_of_isdigit EC94              ___ftpack@sign 0005  
                    _putch EC2A                      tablat 000FF5                      plusw1 000FE3  
                    plusw2 000FDB                      status 000FD8             __CFG_PBADEN$ON 000000  
          __initialization EC48               __end_of_main FEB4              main@binsCount 0062  
                   ??_main 0021    __end_of_poweroff_sensor ECB6              __activetblptr 000002  
            main@finalTime 005F          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0002  
       ??_I2C_Master_Start 0002                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0004                     ?_putch 0001           __end_of___ftpack F294  
         __end_of___lwtoft ECDA                     _OSCCON 000FD3                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___ftge F156                     ___wmul ED00  
           __CFG_STVREN$ON 000000                  ??___lldiv 0009                  ??___lwdiv 0005  
                ??___lwmod 000C                     clear_0 EC4E                     main@B1 003B  
                   main@B2 0041                     main@C1 0055                     main@B3 0045  
                   main@C2 003D                     main@C3 0057                     main@G1 0025  
                   main@G2 0027                     main@G3 0029                  ??_lcdInst 0003  
                   _printf F382                     main@R1 0039                     main@R2 003F  
                   main@R3 0043                     main@b1 005B                     main@b2 004B  
                   main@b3 004F                     main@c1 0047                     main@c2 002B  
                   main@c3 0051                     _rotate EBFC                     main@r1 0059  
                   main@r2 0049                     main@r3 004D                  ??_initLCD 0004  
                ??_isdigit 0001           __end_of_set_time ED64               __mediumconst FEB4  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
               __accesstop 0080    __end_of__initialization EC54                 ___ftge@ff1 000C  
               ___ftge@ff2 000F              ___rparam_used 000001             __pcstackCOMRAM 0001  
    activate_stepper@motor 0003              __end_of_putch EC36                 ___lwtoft@c 0009  
              tca_select@i 0007           ?_poweroff_sensor 0001         __size_of_lcdNibble 0056  
                  ??_putch 0003       __size_of_read_sensor 00EE               ?_stop_rotate 0001  
                  ?___ftge 000C          check_B_press@time 0006                    ?___wmul 0001  
                ?___ftpack 0001                    ?_printf 000D                    ?_rotate 0001  
                ?___lwtoft 0009     __size_of_check_B_press 0052                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7  __size_of_activate_stepper 007C  
        __end_of_lcdNibble EF24                    __Hparam 0000                    __Lparam 0000  
                ?_set_time 0001            __size_of___ftge 0090                    ___lldiv F0D4  
          __size_of___wmul 0026                    ___lwdiv EE7C                    ___lwmod EDA2  
                  __pcinit EC48                 ??___ftpack 0006                    __ramtop 1000  
                  _lcdInst EC1E                    __ptext0 F68E                    __ptext1 ED64  
                  __ptext2 EC00                    __ptext3 ED26                    __ptext4 EBFC  
                  __ptext5 F054                    __ptext6 F294                    __ptext7 F382  
                  __ptext8 EC2A      __end_of_return_motors F0D4                    __ptext9 EC76  
          __size_of_printf 030C            __size_of_rotate 0004                 ??___lwtoft 000C  
                  _initLCD EDE4          __end_of_hexpowers FEC7                    _dpowers FEB5  
                  _isdigit EC76                 _tca_select ED64   __size_of_I2C_Master_Init 005A  
 __size_of_I2C_Master_Read 0026   __size_of_I2C_Master_Wait 0012   __size_of_I2C_Master_Stop 0008  
     end_of_initialization EC54              __Lmediumconst FEB4  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0005            ___lldiv@counter 000D  
               ??_set_time 0004     __size_of_agitator_move 0018              _check_B_press EE2A  
                  printf@c 0020                    printf@f 000D           I2C_Master_Init@c 000E  
         I2C_Master_Read@a 0002                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE             main@totalCount 0035                 _timer_done EF7E  
                _PORTBbits 000F81               read_sensor@b 0008               read_sensor@c 000A  
             read_sensor@g 0006               read_sensor@r 0004           main@currentMotor 006A  
              printf@width 001E             ?_check_B_press 0006             __end_of___ftge F1E6  
     __size_of_stop_rotate 0004             __end_of___wmul ED26             __end_of_printf F68E  
           __end_of_rotate EC00        start_initialization EC48                ?_tca_select 0001  
            _agitator_move EC5E           _activate_stepper EFD8         return_motors@motor 0003  
        ??_I2C_Master_Init 0012          ??_I2C_Master_Read 0002          ??_I2C_Master_Wait 0001  
        ??_I2C_Master_Stop 0002           main@keypress_348 0061           main@keypress_364 0038  
         __CFG_OSC$INTIO67 000000                   ??___ftge 0012                   ??___wmul 0005  
         __CFG_LPT1OSC$OFF 000000                ?_timer_done 0004                   ??_printf 0013  
                 ??_rotate 0001          __size_of___ftpack 00AE                __pbssCOMRAM 006B  
           ?_agitator_move 0001          __size_of___lwtoft 0024              ??_read_sensor 000C  
 __size_of_poweroff_sensor 0022          activate_stepper@i 0004            ??_check_B_press 0008  
         _I2C_Master_Start EC04           _I2C_Master_Write EC14           ___lwdiv@dividend 0001  
        __CFG_CCP2MX$PORTC 000000        __size_of_tca_select 003E           check_B_press@key 0009  
            __pmediumconst FEB4                  _lcdNibble EECE                   ?___lldiv 0001  
                 ?___lwdiv 0001                   ?___lwmod 0008          __size_of_set_time 003E  
                 ?_lcdInst 0001                   ?_initLCD 0001                   ?_isdigit 0001  
                _hexpowers FEBF           ___lwdiv@quotient 0005             __size_of_putch 000C  
           ___wmul@product 0005                   _LATAbits 000F89                   _LATDbits 000F8C  
                 _LATEbits 000F8D        __size_of_timer_done 005A        __end_of_read_sensor F382  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001                  main@F3227 006B  
        ___wmul@multiplier 0001            ??_agitator_move 0002              lcdNibble@data 0002  
                main@bcap1 0031                  main@bcap3 0033                 printf@flag 001D  
            lcdNibble@temp 0001                 printf@prec 001A                  main@rcap1 002D  
                main@rcap2 002F        I2C_Master_Read@temp 0003     __size_of_return_motors 0080  
        ??_poweroff_sensor 0004                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000             agitator_move@a 0002             agitator_move@b 0001  
         __size_of___lldiv 0082           __size_of___lwdiv 0052   __end_of_activate_stepper F054  
         __size_of___lwmod 0042                   ___ftpack F1E6                _isdigit$716 0002  
                 ___lwtoft ECB6           __size_of_lcdInst 000C            _I2C_Master_Init EF24  
          _I2C_Master_Read ECDA           __size_of_initLCD 0046               ??_tca_select 0004  
          _I2C_Master_Wait EC36            _I2C_Master_Stop EC0C           __size_of_isdigit 001E  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 ED00  
                 __ptext11 EDA2                   __ptext20 EC0C                   __ptext12 EE7C  
                 __ptext21 EC04                   __ptext13 EC94                   __ptext30 F0D4  
                 __ptext22 ECDA                   __ptext14 EDE4                   __ptext23 EC36  
                 __ptext15 EC1E                   __ptext24 EC5E                   __ptext16 EECE  
                 __ptext25 EFD8                   __ptext17 EE2A                   __ptext26 ECB6  
                 __ptext18 EF7E                   __ptext27 F1E6                   __ptext19 EC14  
                 __ptext28 F156                   __ptext29 EF24                _read_sensor F294  
            __size_of_main 0826                  set_time@i 0004              ??_stop_rotate 0001  
                 _set_time ED26                ??_lcdNibble 0001         __end_of_tca_select EDA2  
                printf@idx 0017                  printf@val 001B                   main@tot1 005D  
                 main@tot2 0053                   main@tot3 0023               ??_timer_done 0006  
            _return_motors F054                  putch@data 0003   __end_of_I2C_Master_Start EC0C  
 __end_of_I2C_Master_Write EC1E                 _INTCONbits 000FF2                   isdigit@c 0003  
         ___lwmod@dividend 0008           ___lldiv@dividend 0001         __end_of_timer_done EFD8  
                 printf@ap 0018    __end_of_I2C_Master_Init EF7E    __end_of_I2C_Master_Read ED00  
  __end_of_I2C_Master_Wait EC48    __end_of_I2C_Master_Stop EC14                lcdInst@data 0003  
      __end_of_stop_rotate EC04             ?_return_motors 0001           ___lldiv@quotient 0009  
        I2C_Master_Write@d 0002            ___lwmod@divisor 000A            ___lwmod@counter 000C  
    __end_of_check_B_press EE7C  
